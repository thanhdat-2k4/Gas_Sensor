
CAM_BIEN_KHI_GAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08001e8c  08001e8c  00002e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff0  08001ff0  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001ff0  08001ff0  00002ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ff8  08001ff8  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff8  08001ff8  00002ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ffc  08001ffc  00002ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000054  08002054  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002054  000031c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002004  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000763  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  000057f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c3  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c2f  00000000  00000000  00005c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002edf  00000000  00000000  0001a85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ea7  00000000  00000000  0001d739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a15e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000df8  00000000  00000000  000a1624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000a241c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e74 	.word	0x08001e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001e74 	.word	0x08001e74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4907      	ldr	r1, [pc, #28]	@ (8000630 <__NVIC_EnableIRQ+0x38>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100

08000634 <delay_ms>:

// === Khai báo hàm trước khi sử dụng ===
void UART_Transmit(char *data);

// === Hàm delay ===
void delay_ms(uint32_t ms) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 8000; i++) __NOP();
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e003      	b.n	800064a <delay_ms+0x16>
 8000642:	bf00      	nop
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000650:	fb02 f303 	mul.w	r3, r2, r3
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3f3      	bcc.n	8000642 <delay_ms+0xe>
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <delay_us>:

void delay_us(uint32_t us) {
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < us * 8; i++) __NOP();
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e003      	b.n	800067e <delay_us+0x16>
 8000676:	bf00      	nop
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3f6      	bcc.n	8000676 <delay_us+0xe>
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <GPIO_Config>:

// === Cấu hình GPIO ===
void GPIO_Config(void) {
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <GPIO_Config+0xb8>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <GPIO_Config+0xb8>)
 80006a2:	f043 0307 	orr.w	r3, r3, #7
 80006a6:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA0 (MQ2) - Analog
    GPIOA->MODER |= (3 << (MQ2_CHANNEL * 2));
 80006a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <GPIO_Config+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <GPIO_Config+0xbc>)
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	6013      	str	r3, [r2, #0]

    // PA5 (Relay), PA6 (Buzzer), PA7 (LED Blue) - Output
    GPIOA->MODER &= ~((3 << (RELAY_PIN * 2)) | (3 << (BUZZER_PIN * 2)) | (3 << (LED_BLUE_PIN * 2)));
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <GPIO_Config+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <GPIO_Config+0xbc>)
 80006ba:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80006be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((1 << (RELAY_PIN * 2)) | (1 << (BUZZER_PIN * 2)) | (1 << (LED_BLUE_PIN * 2)));
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <GPIO_Config+0xbc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a23      	ldr	r2, [pc, #140]	@ (8000754 <GPIO_Config+0xbc>)
 80006c6:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80006ca:	6013      	str	r3, [r2, #0]
    GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <GPIO_Config+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a20      	ldr	r2, [pc, #128]	@ (8000754 <GPIO_Config+0xbc>)
 80006d2:	f023 0320 	bic.w	r3, r3, #32
 80006d6:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~(1 << BUZZER_PIN); // Buzzer OFF
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <GPIO_Config+0xbc>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000754 <GPIO_Config+0xbc>)
 80006de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006e2:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~(1 << LED_BLUE_PIN); // Blue LED OFF
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <GPIO_Config+0xbc>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000754 <GPIO_Config+0xbc>)
 80006ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ee:	6153      	str	r3, [r2, #20]

    // PB0 (Yellow), PB1 (Red), PB10 (Green) - Output
    GPIOB->MODER &= ~((3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)) | (3 << (LED_GREEN_PIN * 2)));
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <GPIO_Config+0xc0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <GPIO_Config+0xc0>)
 80006f6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((1 << (LED_YELLOW_PIN * 2)) | (1 << (LED_RED_PIN * 2)) | (1 << (LED_GREEN_PIN * 2)));
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <GPIO_Config+0xc0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <GPIO_Config+0xc0>)
 8000706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800070a:	f043 0305 	orr.w	r3, r3, #5
 800070e:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~((1 << LED_YELLOW_PIN) | (1 << LED_RED_PIN) | (1 << LED_GREEN_PIN)); // LEDs OFF
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <GPIO_Config+0xc0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <GPIO_Config+0xc0>)
 8000716:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800071a:	f023 0303 	bic.w	r3, r3, #3
 800071e:	6153      	str	r3, [r2, #20]

    // PC12, PC13 - Input Pull-up
    GPIOC->MODER &= ~((3 << (SW1_PIN * 2)) | (3 << (SW2_PIN * 2)));
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <GPIO_Config+0xc4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <GPIO_Config+0xc4>)
 8000726:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800072a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((3 << (SW1_PIN * 2)) | (3 << (SW2_PIN * 2)));
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <GPIO_Config+0xc4>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <GPIO_Config+0xc4>)
 8000732:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000736:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= ((1 << (SW1_PIN * 2)) | (1 << (SW2_PIN * 2)));
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <GPIO_Config+0xc4>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <GPIO_Config+0xc4>)
 800073e:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800

08000760 <I2C_Config>:

// === Cấu hình I2C1 (PB8 - SCL, PB9 - SDA) ===
void I2C_Config(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <I2C_Config+0x88>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a1f      	ldr	r2, [pc, #124]	@ (80007e8 <I2C_Config+0x88>)
 800076a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <I2C_Config+0x88>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <I2C_Config+0x88>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <I2C_Config+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <I2C_Config+0x8c>)
 8000782:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000786:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (8 * 2)) | (2 << (9 * 2)));
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <I2C_Config+0x8c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <I2C_Config+0x8c>)
 800078e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000792:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 8) | (1 << 9);
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <I2C_Config+0x8c>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <I2C_Config+0x8c>)
 800079a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800079e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |= (1 << (8 * 2)) | (1 << (9 * 2));
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <I2C_Config+0x8c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a11      	ldr	r2, [pc, #68]	@ (80007ec <I2C_Config+0x8c>)
 80007a6:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80007aa:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4));
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <I2C_Config+0x8c>)
 80007ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b0:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <I2C_Config+0x8c>)
 80007b2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80007b6:	6253      	str	r3, [r2, #36]	@ 0x24

    I2C1->CR1 = 0;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <I2C_Config+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 84; // 84MHz APB1
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <I2C_Config+0x90>)
 80007c0:	2254      	movs	r2, #84	@ 0x54
 80007c2:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 420; // 100kHz
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <I2C_Config+0x90>)
 80007c6:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80007ca:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 85;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <I2C_Config+0x90>)
 80007ce:	2255      	movs	r2, #85	@ 0x55
 80007d0:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <I2C_Config+0x90>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <I2C_Config+0x90>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40005400 	.word	0x40005400

080007f4 <I2C_WriteByte>:

uint8_t I2C_WriteByte(uint8_t addr, uint8_t data, const char *context) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	@ 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	603a      	str	r2, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	460b      	mov	r3, r1
 8000802:	71bb      	strb	r3, [r7, #6]
    uint32_t timeout = 100000;
 8000804:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <I2C_WriteByte+0x17c>)
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char debug_buf[32];
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000808:	e010      	b.n	800082c <I2C_WriteByte+0x38>
        if (timeout == 0) {
 800080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10d      	bne.n	800082c <I2C_WriteByte+0x38>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Busy\r\n", context);
 8000810:	f107 000c 	add.w	r0, r7, #12
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4a57      	ldr	r2, [pc, #348]	@ (8000974 <I2C_WriteByte+0x180>)
 8000818:	2120      	movs	r1, #32
 800081a:	f000 fe7f 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa32 	bl	8000c8c <UART_Transmit>
            return 1;
 8000828:	2301      	movs	r3, #1
 800082a:	e09c      	b.n	8000966 <I2C_WriteByte+0x172>
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 800082c:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <I2C_WriteByte+0x184>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	2b00      	cmp	r3, #0
 8000836:	d004      	beq.n	8000842 <I2C_WriteByte+0x4e>
 8000838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1e3      	bne.n	800080a <I2C_WriteByte+0x16>
        }
    }
    I2C1->CR1 |= I2C_CR1_START;
 8000842:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <I2C_WriteByte+0x184>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a4c      	ldr	r2, [pc, #304]	@ (8000978 <I2C_WriteByte+0x184>)
 8000848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800084c:	6013      	str	r3, [r2, #0]
    timeout = 100000;
 800084e:	4b48      	ldr	r3, [pc, #288]	@ (8000970 <I2C_WriteByte+0x17c>)
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000852:	e010      	b.n	8000876 <I2C_WriteByte+0x82>
        if (timeout == 0) {
 8000854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10d      	bne.n	8000876 <I2C_WriteByte+0x82>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Start\r\n", context);
 800085a:	f107 000c 	add.w	r0, r7, #12
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4a46      	ldr	r2, [pc, #280]	@ (800097c <I2C_WriteByte+0x188>)
 8000862:	2120      	movs	r1, #32
 8000864:	f000 fe5a 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fa0d 	bl	8000c8c <UART_Transmit>
            return 2;
 8000872:	2302      	movs	r3, #2
 8000874:	e077      	b.n	8000966 <I2C_WriteByte+0x172>
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <I2C_WriteByte+0x184>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <I2C_WriteByte+0x98>
 8000882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e3      	bne.n	8000854 <I2C_WriteByte+0x60>
        }
    }
    I2C1->DR = (addr << 1);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4a3a      	ldr	r2, [pc, #232]	@ (8000978 <I2C_WriteByte+0x184>)
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	6113      	str	r3, [r2, #16]
    timeout = 100000;
 8000894:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <I2C_WriteByte+0x17c>)
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000898:	e010      	b.n	80008bc <I2C_WriteByte+0xc8>
        if (timeout == 0) {
 800089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10d      	bne.n	80008bc <I2C_WriteByte+0xc8>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Addr\r\n", context);
 80008a0:	f107 000c 	add.w	r0, r7, #12
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4a36      	ldr	r2, [pc, #216]	@ (8000980 <I2C_WriteByte+0x18c>)
 80008a8:	2120      	movs	r1, #32
 80008aa:	f000 fe37 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f9ea 	bl	8000c8c <UART_Transmit>
            return 3;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e054      	b.n	8000966 <I2C_WriteByte+0x172>
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 80008bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <I2C_WriteByte+0x184>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <I2C_WriteByte+0xde>
 80008c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1e3      	bne.n	800089a <I2C_WriteByte+0xa6>
        }
    }
    (void)I2C1->SR2;
 80008d2:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <I2C_WriteByte+0x184>)
 80008d4:	699b      	ldr	r3, [r3, #24]
    timeout = 100000;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <I2C_WriteByte+0x17c>)
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 80008da:	e010      	b.n	80008fe <I2C_WriteByte+0x10a>
        if (timeout == 0) {
 80008dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10d      	bne.n	80008fe <I2C_WriteByte+0x10a>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C TXE\r\n", context);
 80008e2:	f107 000c 	add.w	r0, r7, #12
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	4a26      	ldr	r2, [pc, #152]	@ (8000984 <I2C_WriteByte+0x190>)
 80008ea:	2120      	movs	r1, #32
 80008ec:	f000 fe16 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9c9 	bl	8000c8c <UART_Transmit>
            return 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	e033      	b.n	8000966 <I2C_WriteByte+0x172>
    while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <I2C_WriteByte+0x184>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	2b00      	cmp	r3, #0
 8000908:	d104      	bne.n	8000914 <I2C_WriteByte+0x120>
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1e3      	bne.n	80008dc <I2C_WriteByte+0xe8>
        }
    }
    I2C1->DR = data;
 8000914:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <I2C_WriteByte+0x184>)
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	6113      	str	r3, [r2, #16]
    timeout = 100000;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <I2C_WriteByte+0x17c>)
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 800091e:	e010      	b.n	8000942 <I2C_WriteByte+0x14e>
        if (timeout == 0) {
 8000920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10d      	bne.n	8000942 <I2C_WriteByte+0x14e>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C BTF\r\n", context);
 8000926:	f107 000c 	add.w	r0, r7, #12
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	4a16      	ldr	r2, [pc, #88]	@ (8000988 <I2C_WriteByte+0x194>)
 800092e:	2120      	movs	r1, #32
 8000930:	f000 fdf4 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f9a7 	bl	8000c8c <UART_Transmit>
            return 5;
 800093e:	2305      	movs	r3, #5
 8000940:	e011      	b.n	8000966 <I2C_WriteByte+0x172>
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <I2C_WriteByte+0x184>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <I2C_WriteByte+0x164>
 800094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1e3      	bne.n	8000920 <I2C_WriteByte+0x12c>
        }
    }
    I2C1->CR1 |= I2C_CR1_STOP;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <I2C_WriteByte+0x184>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <I2C_WriteByte+0x184>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000962:	6013      	str	r3, [r2, #0]
    return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	000186a0 	.word	0x000186a0
 8000974:	08001e8c 	.word	0x08001e8c
 8000978:	40005400 	.word	0x40005400
 800097c:	08001e9c 	.word	0x08001e9c
 8000980:	08001eac 	.word	0x08001eac
 8000984:	08001ebc 	.word	0x08001ebc
 8000988:	08001ecc 	.word	0x08001ecc

0800098c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
    uint8_t data_u = (cmd & 0xF0);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	74fb      	strb	r3, [r7, #19]
    uint8_t data_l = ((cmd << 4) & 0xF0);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = { data_u | 0x0C, data_u | 0x08, data_l | 0x0C, data_l | 0x08 };
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	f043 030c 	orr.w	r3, r3, #12
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	733b      	strb	r3, [r7, #12]
 80009ae:	7cfb      	ldrb	r3, [r7, #19]
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	737b      	strb	r3, [r7, #13]
 80009b8:	7cbb      	ldrb	r3, [r7, #18]
 80009ba:	f043 030c 	orr.w	r3, r3, #12
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73bb      	strb	r3, [r7, #14]
 80009c2:	7cbb      	ldrb	r3, [r7, #18]
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00f      	b.n	80009f2 <LCD_SendCommand+0x66>
        I2C_WriteByte(LCD_I2C_ADDR, data_t[i], "CMD");
 80009d2:	f107 020c 	add.w	r2, r7, #12
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <LCD_SendCommand+0x78>)
 80009de:	4619      	mov	r1, r3
 80009e0:	2027      	movs	r0, #39	@ 0x27
 80009e2:	f7ff ff07 	bl	80007f4 <I2C_WriteByte>
        delay_us(200);
 80009e6:	20c8      	movs	r0, #200	@ 0xc8
 80009e8:	f7ff fe3e 	bl	8000668 <delay_us>
    for (int i = 0; i < 4; i++) {
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	ddec      	ble.n	80009d2 <LCD_SendCommand+0x46>
    }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08001edc 	.word	0x08001edc

08000a08 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    uint8_t data_u = (data & 0xF0);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f023 030f 	bic.w	r3, r3, #15
 8000a18:	74fb      	strb	r3, [r7, #19]
    uint8_t data_l = ((data << 4) & 0xF0);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = { data_u | 0x0D, data_u | 0x09, data_l | 0x0D, data_l | 0x09 };
 8000a20:	7cfb      	ldrb	r3, [r7, #19]
 8000a22:	f043 030d 	orr.w	r3, r3, #13
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	733b      	strb	r3, [r7, #12]
 8000a2a:	7cfb      	ldrb	r3, [r7, #19]
 8000a2c:	f043 0309 	orr.w	r3, r3, #9
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	737b      	strb	r3, [r7, #13]
 8000a34:	7cbb      	ldrb	r3, [r7, #18]
 8000a36:	f043 030d 	orr.w	r3, r3, #13
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	73bb      	strb	r3, [r7, #14]
 8000a3e:	7cbb      	ldrb	r3, [r7, #18]
 8000a40:	f043 0309 	orr.w	r3, r3, #9
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00f      	b.n	8000a6e <LCD_SendData+0x66>
        I2C_WriteByte(LCD_I2C_ADDR, data_t[i], "DATA");
 8000a4e:	f107 020c 	add.w	r2, r7, #12
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <LCD_SendData+0x78>)
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2027      	movs	r0, #39	@ 0x27
 8000a5e:	f7ff fec9 	bl	80007f4 <I2C_WriteByte>
        delay_us(200);
 8000a62:	20c8      	movs	r0, #200	@ 0xc8
 8000a64:	f7ff fe00 	bl	8000668 <delay_us>
    for (int i = 0; i < 4; i++) {
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	ddec      	ble.n	8000a4e <LCD_SendData+0x46>
    }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08001ee0 	.word	0x08001ee0

08000a84 <LCD_Init>:

uint8_t LCD_Init(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
    char debug_buf[32];
    uint8_t retry = 3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while (retry--) {
 8000a90:	e048      	b.n	8000b24 <LCD_Init+0xa0>
        delay_ms(50);
 8000a92:	2032      	movs	r0, #50	@ 0x32
 8000a94:	f7ff fdce 	bl	8000634 <delay_ms>
        if (I2C_WriteByte(LCD_I2C_ADDR, 0x00, "INIT") == 0) {
 8000a98:	4a2d      	ldr	r2, [pc, #180]	@ (8000b50 <LCD_Init+0xcc>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2027      	movs	r0, #39	@ 0x27
 8000a9e:	f7ff fea9 	bl	80007f4 <I2C_WriteByte>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d12f      	bne.n	8000b08 <LCD_Init+0x84>
            LCD_SendCommand(0x33);
 8000aa8:	2033      	movs	r0, #51	@ 0x33
 8000aaa:	f7ff ff6f 	bl	800098c <LCD_SendCommand>
            delay_ms(5);
 8000aae:	2005      	movs	r0, #5
 8000ab0:	f7ff fdc0 	bl	8000634 <delay_ms>
            LCD_SendCommand(0x32);
 8000ab4:	2032      	movs	r0, #50	@ 0x32
 8000ab6:	f7ff ff69 	bl	800098c <LCD_SendCommand>
            delay_us(50);
 8000aba:	2032      	movs	r0, #50	@ 0x32
 8000abc:	f7ff fdd4 	bl	8000668 <delay_us>
            LCD_SendCommand(0x28); // 4-bit, 2 dòng
 8000ac0:	2028      	movs	r0, #40	@ 0x28
 8000ac2:	f7ff ff63 	bl	800098c <LCD_SendCommand>
            delay_us(50);
 8000ac6:	2032      	movs	r0, #50	@ 0x32
 8000ac8:	f7ff fdce 	bl	8000668 <delay_us>
            LCD_SendCommand(0x0C); // Bật hiển thị
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff ff5d 	bl	800098c <LCD_SendCommand>
            delay_us(50);
 8000ad2:	2032      	movs	r0, #50	@ 0x32
 8000ad4:	f7ff fdc8 	bl	8000668 <delay_us>
            LCD_SendCommand(0x06); // Chế độ nhập
 8000ad8:	2006      	movs	r0, #6
 8000ada:	f7ff ff57 	bl	800098c <LCD_SendCommand>
            delay_us(50);
 8000ade:	2032      	movs	r0, #50	@ 0x32
 8000ae0:	f7ff fdc2 	bl	8000668 <delay_us>
            LCD_SendCommand(0x01); // Xóa màn
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff51 	bl	800098c <LCD_SendCommand>
            delay_ms(2);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fda2 	bl	8000634 <delay_ms>
            snprintf(debug_buf, sizeof(debug_buf), "LCD Init OK\r\n");
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <LCD_Init+0xd0>)
 8000af4:	2120      	movs	r1, #32
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fd10 	bl	800151c <sniprintf>
            UART_Transmit(debug_buf);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f8c4 	bl	8000c8c <UART_Transmit>
            return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e01f      	b.n	8000b48 <LCD_Init+0xc4>
        }
        snprintf(debug_buf, sizeof(debug_buf), "LCD Init Retry %d\r\n", retry);
 8000b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b0c:	1d38      	adds	r0, r7, #4
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <LCD_Init+0xd4>)
 8000b10:	2120      	movs	r1, #32
 8000b12:	f000 fd03 	bl	800151c <sniprintf>
        UART_Transmit(debug_buf);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f8b7 	bl	8000c8c <UART_Transmit>
        delay_ms(50);
 8000b1e:	2032      	movs	r0, #50	@ 0x32
 8000b20:	f7ff fd88 	bl	8000634 <delay_ms>
    while (retry--) {
 8000b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1af      	bne.n	8000a92 <LCD_Init+0xe>
    }
    snprintf(debug_buf, sizeof(debug_buf), "LCD Init Failed\r\n");
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <LCD_Init+0xd8>)
 8000b36:	2120      	movs	r1, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fcef 	bl	800151c <sniprintf>
    UART_Transmit(debug_buf);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f8a3 	bl	8000c8c <UART_Transmit>
    return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08001ee8 	.word	0x08001ee8
 8000b54:	08001ef0 	.word	0x08001ef0
 8000b58:	08001f00 	.word	0x08001f00
 8000b5c:	08001f14 	.word	0x08001f14

08000b60 <LCD_SendString>:

void LCD_SendString(char *str) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    char debug_buf[32];
    snprintf(debug_buf, sizeof(debug_buf), "LCD Send: %s\r\n", str);
 8000b68:	f107 0008 	add.w	r0, r7, #8
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <LCD_SendString+0x48>)
 8000b70:	2120      	movs	r1, #32
 8000b72:	f000 fcd3 	bl	800151c <sniprintf>
    UART_Transmit(debug_buf);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f886 	bl	8000c8c <UART_Transmit>
    while (*str && *str != '\0') LCD_SendData(*str++);
 8000b80:	e006      	b.n	8000b90 <LCD_SendString+0x30>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff3c 	bl	8000a08 <LCD_SendData>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <LCD_SendString+0x40>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f0      	bne.n	8000b82 <LCD_SendString+0x22>
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08001f28 	.word	0x08001f28

08000bac <ADC_Config>:

// === Cấu hình ADC1 cho PA0 ===
void ADC_Config(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <ADC_Config+0x40>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <ADC_Config+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bba:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <ADC_Config+0x44>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = MQ2_CHANNEL;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <ADC_Config+0x44>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << (MQ2_CHANNEL * 3)); // 480 chu kỳ
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <ADC_Config+0x44>)
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <ADC_Config+0x44>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <ADC_Config+0x44>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <ADC_Config+0x44>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6093      	str	r3, [r2, #8]
    delay_us(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f7ff fd41 	bl	8000668 <delay_us>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40012000 	.word	0x40012000

08000bf4 <ADC_Read>:

uint16_t ADC_Read(void) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <ADC_Read+0x30>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <ADC_Read+0x30>)
 8000bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c02:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 8000c04:	bf00      	nop
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <ADC_Read+0x30>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <ADC_Read+0x12>
    return ADC1->DR;
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <ADC_Read+0x30>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	b29b      	uxth	r3, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40012000 	.word	0x40012000

08000c28 <UART_Config>:

// === Cấu hình UART2 (PA2 - TX, PA3 - RX) ===
void UART_Config(void) {
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <UART_Config+0x58>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a13      	ldr	r2, [pc, #76]	@ (8000c80 <UART_Config+0x58>)
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <UART_Config+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <UART_Config+0x5c>)
 8000c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c42:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2 << (2 * 2)) | (2 << (3 * 2)));
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <UART_Config+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <UART_Config+0x5c>)
 8000c4a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000c4e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <UART_Config+0x5c>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <UART_Config+0x5c>)
 8000c56:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000c5a:	6213      	str	r3, [r2, #32]
    USART2->BRR = 84000000 / 9600; // Baud rate 9600 để khớp với ESP32
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <UART_Config+0x60>)
 8000c5e:	f242 222e 	movw	r2, #8750	@ 0x222e
 8000c62:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <UART_Config+0x60>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <UART_Config+0x60>)
 8000c6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c6e:	f043 030c 	orr.w	r3, r3, #12
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40004400 	.word	0x40004400

08000c8c <UART_Transmit>:

void UART_Transmit(char *data) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    while (*data && *data != '\0') {
 8000c94:	e00c      	b.n	8000cb0 <UART_Transmit+0x24>
        while (!(USART2->SR & USART_SR_TXE));
 8000c96:	bf00      	nop
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <UART_Transmit+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f9      	beq.n	8000c98 <UART_Transmit+0xc>
        USART2->DR = *data++;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <UART_Transmit+0x40>)
 8000cae:	605a      	str	r2, [r3, #4]
    while (*data && *data != '\0') {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <UART_Transmit+0x34>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1ea      	bne.n	8000c96 <UART_Transmit+0xa>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <LED_Set>:

// === Điều khiển LED ===
void LED_Set(uint8_t r, uint8_t y, uint8_t b, uint8_t g) {
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	717b      	strb	r3, [r7, #5]
 8000cea:	4613      	mov	r3, r2
 8000cec:	713b      	strb	r3, [r7, #4]
    if (LED_CATHODE_COMMON) {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << LED_BLUE_PIN)) | (b << LED_BLUE_PIN);
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <LED_Set+0x5c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000cf6:	797b      	ldrb	r3, [r7, #5]
 8000cf8:	01db      	lsls	r3, r3, #7
 8000cfa:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <LED_Set+0x5c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	614b      	str	r3, [r1, #20]
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <LED_Set+0x60>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d08:	f023 0303 	bic.w	r3, r3, #3
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	0052      	lsls	r2, r2, #1
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 8000d10:	431a      	orrs	r2, r3
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	793b      	ldrb	r3, [r7, #4]
 8000d18:	029b      	lsls	r3, r3, #10
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 8000d1a:	4905      	ldr	r1, [pc, #20]	@ (8000d30 <LED_Set+0x60>)
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 8000d1c:	4313      	orrs	r3, r2
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 8000d1e:	614b      	str	r3, [r1, #20]
    } else {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << LED_BLUE_PIN)) | ((b ? 0 : 1) << LED_BLUE_PIN);
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
                     ((r ? 0 : 1) << LED_RED_PIN) | ((y ? 0 : 1) << LED_YELLOW_PIN) | ((g ? 0 : 1) << LED_GREEN_PIN);
    }
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc90      	pop	{r4, r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400

08000d34 <Buzzer_Set>:

// === Điều khiển Buzzer ===
void Buzzer_Set(uint8_t state) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    if (BUZZER_ACTIVE_HIGH) {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << BUZZER_PIN)) | (state << BUZZER_PIN);
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <Buzzer_Set+0x28>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	4904      	ldr	r1, [pc, #16]	@ (8000d5c <Buzzer_Set+0x28>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	614b      	str	r3, [r1, #20]
    } else {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << BUZZER_PIN)) | ((state ? 0 : 1) << BUZZER_PIN);
    }
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40020000 	.word	0x40020000

08000d60 <TIM2_Config>:

// === Cấu hình TIM2 cho nhấp nháy 5Hz ===
void TIM2_Config(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Bật clock cho TIM2
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <TIM2_Config+0x50>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <TIM2_Config+0x50>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 8399; // Prescaler = 8400 - 1
 8000d70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d74:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999; // Auto-reload = 1000 - 1 (100ms)
 8000d7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE; // Bật ngắt update
 8000d84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN; // Bật timer
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn); // Bật ngắt TIM2
 8000da4:	201c      	movs	r0, #28
 8000da6:	f7ff fc27 	bl	80005f8 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <MQ2_GetPPM>:

// === Tính PPM cho MQ-2 ===
float MQ2_GetPPM(uint16_t adc_value) {
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
    float voltage = (adc_value / 4096.0f) * 3.3f; // Điện áp tham chiếu 3.3V
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000e28 <MQ2_GetPPM+0x74>
 8000dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000e2c <MQ2_GetPPM+0x78>
 8000dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd8:	edc7 7a04 	vstr	s15, [r7, #16]
    float k = 300.0f; // Ánh xạ 0-3.3V thành 0-990ppm
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MQ2_GetPPM+0x7c>)
 8000dde:	60fb      	str	r3, [r7, #12]
    float c = 0.0f;
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
    float ppm = k * voltage + c;
 8000de6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfa:	edc7 7a05 	vstr	s15, [r7, #20]
    if (ppm < 0) ppm = 0;
 8000dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	d502      	bpl.n	8000e12 <MQ2_GetPPM+0x5e>
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
    return ppm;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	ee07 3a90 	vmov	s15, r3
}
 8000e18:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	45800000 	.word	0x45800000
 8000e2c:	40533333 	.word	0x40533333
 8000e30:	43960000 	.word	0x43960000

08000e34 <main>:

// === Main ===
int main(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b098      	sub	sp, #96	@ 0x60
 8000e38:	af02      	add	r7, sp, #8
    GPIO_Config();
 8000e3a:	f7ff fc2d 	bl	8000698 <GPIO_Config>
    ADC_Config();
 8000e3e:	f7ff feb5 	bl	8000bac <ADC_Config>
    I2C_Config();
 8000e42:	f7ff fc8d 	bl	8000760 <I2C_Config>
    UART_Config();
 8000e46:	f7ff feef 	bl	8000c28 <UART_Config>
    TIM2_Config(); // Cấu hình TIM2
 8000e4a:	f7ff ff89 	bl	8000d60 <TIM2_Config>
    if (LCD_Init()) {
 8000e4e:	f7ff fe19 	bl	8000a84 <LCD_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <main+0x38>
        char debug_buf[32];
        snprintf(debug_buf, sizeof(debug_buf), "Try LCD_I2C_ADDR 0x3F\r\n");
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4ac7      	ldr	r2, [pc, #796]	@ (8001178 <main+0x344>)
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fb5c 	bl	800151c <sniprintf>
        UART_Transmit(debug_buf);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff10 	bl	8000c8c <UART_Transmit>
    }

    // Test LED để kiểm tra phần cứng
    LED_Set(1, 0, 0, 0); // Bật LED đỏ
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff2c 	bl	8000cd0 <LED_Set>
    delay_ms(100);
 8000e78:	2064      	movs	r0, #100	@ 0x64
 8000e7a:	f7ff fbdb 	bl	8000634 <delay_ms>
    LED_Set(0, 0, 0, 1); // Bật LED xanh lá
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff23 	bl	8000cd0 <LED_Set>
    delay_ms(100);
 8000e8a:	2064      	movs	r0, #100	@ 0x64
 8000e8c:	f7ff fbd2 	bl	8000634 <delay_ms>
    LED_Set(0, 1, 0, 0); // Bật LED vàng
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff1a 	bl	8000cd0 <LED_Set>
    delay_ms(100);
 8000e9c:	2064      	movs	r0, #100	@ 0x64
 8000e9e:	f7ff fbc9 	bl	8000634 <delay_ms>
    LED_Set(0, 0, 1, 0); // Bật LED xanh dương
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ff11 	bl	8000cd0 <LED_Set>
    delay_ms(100);
 8000eae:	2064      	movs	r0, #100	@ 0x64
 8000eb0:	f7ff fbc0 	bl	8000634 <delay_ms>
    LED_Set(0, 0, 0, 0); // Tắt tất cả LED
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff08 	bl	8000cd0 <LED_Set>

    // Khởi tạo hiển thị LCD ban đầu
    LCD_SendCommand(0x01); // Xóa màn hình
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fd63 	bl	800098c <LCD_SendCommand>
    LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 8000ec6:	2080      	movs	r0, #128	@ 0x80
 8000ec8:	f7ff fd60 	bl	800098c <LCD_SendCommand>
    LCD_SendString("Gas Detector");
 8000ecc:	48ab      	ldr	r0, [pc, #684]	@ (800117c <main+0x348>)
 8000ece:	f7ff fe47 	bl	8000b60 <LCD_SendString>
    LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 8000ed2:	20c0      	movs	r0, #192	@ 0xc0
 8000ed4:	f7ff fd5a 	bl	800098c <LCD_SendCommand>
    LCD_SendString("Starting...");
 8000ed8:	48a9      	ldr	r0, [pc, #676]	@ (8001180 <main+0x34c>)
 8000eda:	f7ff fe41 	bl	8000b60 <LCD_SendString>
    delay_ms(1000); // Chờ 1 giây để hiển thị thông báo khởi động
 8000ede:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee2:	f7ff fba7 	bl	8000634 <delay_ms>

    // Hiển thị giao diện chính
    LCD_SendCommand(0x01); // Xóa màn hình
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fd50 	bl	800098c <LCD_SendCommand>
    LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 8000eec:	2080      	movs	r0, #128	@ 0x80
 8000eee:	f7ff fd4d 	bl	800098c <LCD_SendCommand>
    LCD_SendString("PPM:----"); // Chuỗi tĩnh cho dòng 1
 8000ef2:	48a4      	ldr	r0, [pc, #656]	@ (8001184 <main+0x350>)
 8000ef4:	f7ff fe34 	bl	8000b60 <LCD_SendString>
    LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 8000ef8:	20c0      	movs	r0, #192	@ 0xc0
 8000efa:	f7ff fd47 	bl	800098c <LCD_SendCommand>
    LCD_SendString("SYS:ON Alert:-"); // Chuỗi tĩnh cho dòng 2
 8000efe:	48a2      	ldr	r0, [pc, #648]	@ (8001188 <main+0x354>)
 8000f00:	f7ff fe2e 	bl	8000b60 <LCD_SendString>
    delay_ms(50);
 8000f04:	2032      	movs	r0, #50	@ 0x32
 8000f06:	f7ff fb95 	bl	8000634 <delay_ms>

    char lcd_buf[17];
    char uart_buf[16];
    uint8_t last_system_state = system_state; // Lưu trạng thái hệ thống trước đó
 8000f0a:	4ba0      	ldr	r3, [pc, #640]	@ (800118c <main+0x358>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint8_t last_alert_state = 255; // Giá trị không hợp lệ để ép cập nhật lần đầu
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    uint32_t last_ppm = 0xFFFFFFFF; // Giá trị không hợp lệ để ép cập nhật lần đầu
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	653b      	str	r3, [r7, #80]	@ 0x50

    SysTick->LOAD = 84000000 / 1000 - 1; // 1ms
 8000f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8001190 <main+0x35c>)
 8000f20:	4a9c      	ldr	r2, [pc, #624]	@ (8001194 <main+0x360>)
 8000f22:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000f24:	4b9a      	ldr	r3, [pc, #616]	@ (8001190 <main+0x35c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8000f2a:	4b99      	ldr	r3, [pc, #612]	@ (8001190 <main+0x35c>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(SysTick_IRQn);
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f7ff fb60 	bl	80005f8 <__NVIC_EnableIRQ>

    while (1) {
        static uint8_t last_sw1 = 1, last_sw2 = 1;
        uint8_t sw1 = (GPIOC->IDR & (1 << SW1_PIN)) ? 1 : 0;
 8000f38:	4b97      	ldr	r3, [pc, #604]	@ (8001198 <main+0x364>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf14      	ite	ne
 8000f44:	2301      	movne	r3, #1
 8000f46:	2300      	moveq	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        uint8_t sw2 = (GPIOC->IDR & (1 << SW2_PIN)) ? 1 : 0;
 8000f4e:	4b92      	ldr	r3, [pc, #584]	@ (8001198 <main+0x364>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        // Xử lý SW1: Chuyển đổi trạng thái hệ thống
        if (last_sw1 && !sw1) {
 8000f64:	4b8d      	ldr	r3, [pc, #564]	@ (800119c <main+0x368>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <main+0x154>
 8000f6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <main+0x154>
            system_state = !system_state;
 8000f74:	4b85      	ldr	r3, [pc, #532]	@ (800118c <main+0x358>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b81      	ldr	r3, [pc, #516]	@ (800118c <main+0x358>)
 8000f86:	701a      	strb	r2, [r3, #0]
        }
        last_sw1 = sw1;
 8000f88:	4a84      	ldr	r2, [pc, #528]	@ (800119c <main+0x368>)
 8000f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f8e:	7013      	strb	r3, [r2, #0]

        // Xử lý SW2: Reset hệ thống
        if (last_sw2 && !sw2) {
 8000f90:	4b83      	ldr	r3, [pc, #524]	@ (80011a0 <main+0x36c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d04f      	beq.n	8001038 <main+0x204>
 8000f98:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d14b      	bne.n	8001038 <main+0x204>
            system_state = 1;
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800118c <main+0x358>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
            alert_state = 0;
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80011a4 <main+0x370>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
            tim2_blink_state = 0;
 8000fac:	4b7e      	ldr	r3, [pc, #504]	@ (80011a8 <main+0x374>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
            LED_Set(0, 0, 0, 0); // Tắt tất cả LED
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fe89 	bl	8000cd0 <LED_Set>
            GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8000fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80011ac <main+0x378>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a7a      	ldr	r2, [pc, #488]	@ (80011ac <main+0x378>)
 8000fc4:	f023 0320 	bic.w	r3, r3, #32
 8000fc8:	6153      	str	r3, [r2, #20]
            Buzzer_Set(0); // Buzzer OFF
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff feb2 	bl	8000d34 <Buzzer_Set>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 8000fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]
            LCD_SendCommand(0x01); // Xóa màn hình
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fcd3 	bl	800098c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 8000fe6:	2080      	movs	r0, #128	@ 0x80
 8000fe8:	f7ff fcd0 	bl	800098c <LCD_SendCommand>
            LCD_SendString("Gas Detector");
 8000fec:	4863      	ldr	r0, [pc, #396]	@ (800117c <main+0x348>)
 8000fee:	f7ff fdb7 	bl	8000b60 <LCD_SendString>
            LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 8000ff2:	20c0      	movs	r0, #192	@ 0xc0
 8000ff4:	f7ff fcca 	bl	800098c <LCD_SendCommand>
            LCD_SendString("Starting...");
 8000ff8:	4861      	ldr	r0, [pc, #388]	@ (8001180 <main+0x34c>)
 8000ffa:	f7ff fdb1 	bl	8000b60 <LCD_SendString>
            delay_ms(1000); // Chờ 1 giây
 8000ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001002:	f7ff fb17 	bl	8000634 <delay_ms>
            LCD_SendCommand(0x01); // Xóa màn hình
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fcc0 	bl	800098c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 800100c:	2080      	movs	r0, #128	@ 0x80
 800100e:	f7ff fcbd 	bl	800098c <LCD_SendCommand>
            LCD_SendString("PPM:----"); // Chuỗi tĩnh
 8001012:	485c      	ldr	r0, [pc, #368]	@ (8001184 <main+0x350>)
 8001014:	f7ff fda4 	bl	8000b60 <LCD_SendString>
            LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 8001018:	20c0      	movs	r0, #192	@ 0xc0
 800101a:	f7ff fcb7 	bl	800098c <LCD_SendCommand>
            LCD_SendString("SYS:ON Alert:-"); // Chuỗi tĩnh
 800101e:	485a      	ldr	r0, [pc, #360]	@ (8001188 <main+0x354>)
 8001020:	f7ff fd9e 	bl	8000b60 <LCD_SendString>
            last_system_state = system_state;
 8001024:	4b59      	ldr	r3, [pc, #356]	@ (800118c <main+0x358>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            last_alert_state = 255; // Ép cập nhật alert
 800102c:	23ff      	movs	r3, #255	@ 0xff
 800102e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            last_ppm = 0xFFFFFFFF; // Ép cập nhật PPM
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	653b      	str	r3, [r7, #80]	@ 0x50
        }
        last_sw2 = sw2;
 8001038:	4a59      	ldr	r2, [pc, #356]	@ (80011a0 <main+0x36c>)
 800103a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800103e:	7013      	strb	r3, [r2, #0]

        // Trạng thái hệ thống dừng
        if (!system_state) {
 8001040:	4b52      	ldr	r3, [pc, #328]	@ (800118c <main+0x358>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d145      	bne.n	80010d4 <main+0x2a0>
            if (last_system_state != system_state) {
 8001048:	4b50      	ldr	r3, [pc, #320]	@ (800118c <main+0x358>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001050:	429a      	cmp	r2, r3
 8001052:	d03b      	beq.n	80010cc <main+0x298>
                LED_Set(0, 0, 0, 1); // Xanh lá
 8001054:	2301      	movs	r3, #1
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fe38 	bl	8000cd0 <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8001060:	4b52      	ldr	r3, [pc, #328]	@ (80011ac <main+0x378>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a51      	ldr	r2, [pc, #324]	@ (80011ac <main+0x378>)
 8001066:	f023 0320 	bic.w	r3, r3, #32
 800106a:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fe61 	bl	8000d34 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 8001072:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6013      	str	r3, [r2, #0]
                LCD_SendCommand(0x01); // Xóa màn hình
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fc82 	bl	800098c <LCD_SendCommand>
                LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f7ff fc7f 	bl	800098c <LCD_SendCommand>
                LCD_SendString("SYS:OFF");
 800108e:	4848      	ldr	r0, [pc, #288]	@ (80011b0 <main+0x37c>)
 8001090:	f7ff fd66 	bl	8000b60 <LCD_SendString>
                LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 8001094:	20c0      	movs	r0, #192	@ 0xc0
 8001096:	f7ff fc79 	bl	800098c <LCD_SendCommand>
                LCD_SendString("PPM:--- Alert:0");
 800109a:	4846      	ldr	r0, [pc, #280]	@ (80011b4 <main+0x380>)
 800109c:	f7ff fd60 	bl	8000b60 <LCD_SendString>
                last_system_state = system_state;
 80010a0:	4b3a      	ldr	r3, [pc, #232]	@ (800118c <main+0x358>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                last_alert_state = 255; // Ép cập nhật alert
 80010a8:	23ff      	movs	r3, #255	@ 0xff
 80010aa:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                last_ppm = 0xFFFFFFFF; // Ép cập nhật PPM
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
                snprintf(uart_buf, sizeof(uart_buf), "0.0\n"); // Gửi PPM=0 khi hệ thống tắt
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4a3f      	ldr	r2, [pc, #252]	@ (80011b8 <main+0x384>)
 80010ba:	2110      	movs	r1, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fa2d 	bl	800151c <sniprintf>
                UART_Transmit(uart_buf);
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fde0 	bl	8000c8c <UART_Transmit>
            }
            delay_ms(50);
 80010cc:	2032      	movs	r0, #50	@ 0x32
 80010ce:	f7ff fab1 	bl	8000634 <delay_ms>
            continue;
 80010d2:	e13c      	b.n	800134e <main+0x51a>
        }

        // Cập nhật trạng thái hệ thống nếu thay đổi
        if (last_system_state != system_state) {
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <main+0x358>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80010dc:	429a      	cmp	r2, r3
 80010de:	d018      	beq.n	8001112 <main+0x2de>
            LCD_SendCommand(0x01); // Xóa màn hình
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fc53 	bl	800098c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Đặt con trỏ dòng 1
 80010e6:	2080      	movs	r0, #128	@ 0x80
 80010e8:	f7ff fc50 	bl	800098c <LCD_SendCommand>
            LCD_SendString("PPM:----"); // Chuỗi tĩnh
 80010ec:	4825      	ldr	r0, [pc, #148]	@ (8001184 <main+0x350>)
 80010ee:	f7ff fd37 	bl	8000b60 <LCD_SendString>
            LCD_SendCommand(0xC0); // Đặt con trỏ dòng 2
 80010f2:	20c0      	movs	r0, #192	@ 0xc0
 80010f4:	f7ff fc4a 	bl	800098c <LCD_SendCommand>
            LCD_SendString("SYS:ON Alert:-"); // Chuỗi tĩnh
 80010f8:	4823      	ldr	r0, [pc, #140]	@ (8001188 <main+0x354>)
 80010fa:	f7ff fd31 	bl	8000b60 <LCD_SendString>
            last_system_state = system_state;
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <main+0x358>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            last_alert_state = 255; // Ép cập nhật alert
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            last_ppm = 0xFFFFFFFF; // Ép cập nhật PPM
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        // Đọc và tính toán nồng độ khí
        uint16_t adc_val = ADC_Read();
 8001112:	f7ff fd6f 	bl	8000bf4 <ADC_Read>
 8001116:	4603      	mov	r3, r0
 8001118:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        float ppm = MQ2_GetPPM(adc_val);
 800111c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe47 	bl	8000db4 <MQ2_GetPPM>
 8001126:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
        uint32_t ppm_int = (uint32_t)ppm; // Chuyển đổi sang số nguyên để so sánh
 800112a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800112e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001132:	ee17 3a90 	vmov	r3, s15
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44

        // Gửi giá trị PPM qua UART
        snprintf(uart_buf, sizeof(uart_buf), "%.1f\n", ppm);
 8001138:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f107 0020 	add.w	r0, r7, #32
 8001146:	e9cd 2300 	strd	r2, r3, [sp]
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <main+0x388>)
 800114c:	2110      	movs	r1, #16
 800114e:	f000 f9e5 	bl	800151c <sniprintf>
        UART_Transmit(uart_buf);
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd98 	bl	8000c8c <UART_Transmit>

        // Xác định trạng thái cảnh báo
        if (ppm > 800) {
 800115c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001160:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80011c0 <main+0x38c>
 8001164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	dd2c      	ble.n	80011c8 <main+0x394>
            alert_state = 3; // Nguy hiểm
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <main+0x370>)
 8001170:	2203      	movs	r2, #3
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e045      	b.n	8001202 <main+0x3ce>
 8001176:	bf00      	nop
 8001178:	08001f38 	.word	0x08001f38
 800117c:	08001f50 	.word	0x08001f50
 8001180:	08001f60 	.word	0x08001f60
 8001184:	08001f6c 	.word	0x08001f6c
 8001188:	08001f78 	.word	0x08001f78
 800118c:	20000000 	.word	0x20000000
 8001190:	e000e010 	.word	0xe000e010
 8001194:	0001481f 	.word	0x0001481f
 8001198:	40020800 	.word	0x40020800
 800119c:	20000001 	.word	0x20000001
 80011a0:	20000002 	.word	0x20000002
 80011a4:	20000070 	.word	0x20000070
 80011a8:	20000071 	.word	0x20000071
 80011ac:	40020000 	.word	0x40020000
 80011b0:	08001f88 	.word	0x08001f88
 80011b4:	08001f90 	.word	0x08001f90
 80011b8:	08001fa0 	.word	0x08001fa0
 80011bc:	08001fa8 	.word	0x08001fa8
 80011c0:	44480000 	.word	0x44480000
 80011c4:	43fa0000 	.word	0x43fa0000
        } else if (ppm > 500) {
 80011c8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011cc:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80011c4 <main+0x390>
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd03      	ble.n	80011e2 <main+0x3ae>
            alert_state = 2; // Cao
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <main+0x51c>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e00f      	b.n	8001202 <main+0x3ce>
        } else if (ppm > 300) {
 80011e2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011e6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001354 <main+0x520>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd03      	ble.n	80011fc <main+0x3c8>
            alert_state = 1; // Thấp
 80011f4:	4b56      	ldr	r3, [pc, #344]	@ (8001350 <main+0x51c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e002      	b.n	8001202 <main+0x3ce>
        } else {
            alert_state = 0; // Bình thường
 80011fc:	4b54      	ldr	r3, [pc, #336]	@ (8001350 <main+0x51c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
        }

        // Cập nhật giá trị PPM trên LCD nếu thay đổi
        if (ppm_int != last_ppm) {
 8001202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001206:	429a      	cmp	r2, r3
 8001208:	d010      	beq.n	800122c <main+0x3f8>
            LCD_SendCommand(0x80 + 4); // Đặt con trỏ sau "PPM:"
 800120a:	2084      	movs	r0, #132	@ 0x84
 800120c:	f7ff fbbe 	bl	800098c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "%4lu", ppm_int); // Định dạng 4 ký tự
 8001210:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001216:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <main+0x524>)
 8001218:	2111      	movs	r1, #17
 800121a:	f000 f97f 	bl	800151c <sniprintf>
            LCD_SendString(lcd_buf);
 800121e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fc9c 	bl	8000b60 <LCD_SendString>
            last_ppm = ppm_int;
 8001228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122a:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        // Cập nhật trạng thái Alert trên LCD nếu thay đổi
        if (last_alert_state != alert_state) {
 800122c:	4b48      	ldr	r3, [pc, #288]	@ (8001350 <main+0x51c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001234:	429a      	cmp	r2, r3
 8001236:	d013      	beq.n	8001260 <main+0x42c>
            LCD_SendCommand(0xC0 + 13); // Đặt con trỏ sau "Alert:"
 8001238:	20cd      	movs	r0, #205	@ 0xcd
 800123a:	f7ff fba7 	bl	800098c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "%d", alert_state);
 800123e:	4b44      	ldr	r3, [pc, #272]	@ (8001350 <main+0x51c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001246:	4a45      	ldr	r2, [pc, #276]	@ (800135c <main+0x528>)
 8001248:	2111      	movs	r1, #17
 800124a:	f000 f967 	bl	800151c <sniprintf>
            LCD_SendString(lcd_buf);
 800124e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fc84 	bl	8000b60 <LCD_SendString>
            last_alert_state = alert_state;
 8001258:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <main+0x51c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        }

        // Điều khiển LED, Relay, Buzzer theo trạng thái
        switch (alert_state) {
 8001260:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <main+0x51c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d86f      	bhi.n	8001348 <main+0x514>
 8001268:	a201      	add	r2, pc, #4	@ (adr r2, 8001270 <main+0x43c>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	08001281 	.word	0x08001281
 8001274:	080012b1 	.word	0x080012b1
 8001278:	080012e1 	.word	0x080012e1
 800127c:	08001315 	.word	0x08001315
            case 0: // Bình thường
                LED_Set(0, 0, 1, 0); // Xanh dương
 8001280:	2300      	movs	r3, #0
 8001282:	2201      	movs	r2, #1
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fd22 	bl	8000cd0 <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 800128c:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <main+0x52c>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a33      	ldr	r2, [pc, #204]	@ (8001360 <main+0x52c>)
 8001292:	f023 0320 	bic.w	r3, r3, #32
 8001296:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd4b 	bl	8000d34 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 800129e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]
                break;
 80012ae:	e04b      	b.n	8001348 <main+0x514>
            case 1: // Thấp
                LED_Set(0, 1, 0, 0); // Vàng
 80012b0:	2300      	movs	r3, #0
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fd0a 	bl	8000cd0 <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <main+0x52c>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a27      	ldr	r2, [pc, #156]	@ (8001360 <main+0x52c>)
 80012c2:	f023 0320 	bic.w	r3, r3, #32
 80012c6:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fd33 	bl	8000d34 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 80012ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]
                break;
 80012de:	e033      	b.n	8001348 <main+0x514>
            case 2: // Cao
                TIM2->CR1 |= TIM_CR1_CEN; // Bật TIM2
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
                LED_Set(tim2_blink_state, 0, 0, 0); // Chỉ LED đỏ nhấp nháy
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <main+0x530>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	f7ff fce8 	bl	8000cd0 <LED_Set>
                GPIOA->ODR |= (1 << RELAY_PIN); // Relay ON
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <main+0x52c>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a16      	ldr	r2, [pc, #88]	@ (8001360 <main+0x52c>)
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	6153      	str	r3, [r2, #20]
                Buzzer_Set(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fd11 	bl	8000d34 <Buzzer_Set>
                break;
 8001312:	e019      	b.n	8001348 <main+0x514>
            case 3: // Nguy hiểm
                TIM2->CR1 |= TIM_CR1_CEN; // Bật TIM2
 8001314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]
                LED_Set(tim2_blink_state, 0, 0, 0); // Chỉ LED đỏ nhấp nháy
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <main+0x530>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2d8      	uxtb	r0, r3
 800132a:	2300      	movs	r3, #0
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	f7ff fcce 	bl	8000cd0 <LED_Set>
                GPIOA->ODR |= (1 << RELAY_PIN); // Relay ON
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <main+0x52c>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <main+0x52c>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6153      	str	r3, [r2, #20]
                Buzzer_Set(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fcf7 	bl	8000d34 <Buzzer_Set>
                break;
 8001346:	bf00      	nop
        }

        delay_ms(50);
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f7ff f973 	bl	8000634 <delay_ms>
    while (1) {
 800134e:	e5f3      	b.n	8000f38 <main+0x104>
 8001350:	20000070 	.word	0x20000070
 8001354:	43960000 	.word	0x43960000
 8001358:	08001fb0 	.word	0x08001fb0
 800135c:	08001fb8 	.word	0x08001fb8
 8001360:	40020000 	.word	0x40020000
 8001364:	20000071 	.word	0x20000071

08001368 <TIM2_IRQHandler>:
    }
}

// === Xử lý ngắt TIM2 ===
void TIM2_IRQHandler(void) {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) { // Kiểm tra cờ update
 800136c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d012      	beq.n	80013a0 <TIM2_IRQHandler+0x38>
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ
 800137a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6113      	str	r3, [r2, #16]
        tim2_blink_state = !tim2_blink_state; // Đảo trạng thái
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <TIM2_IRQHandler+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <TIM2_IRQHandler+0x44>)
 800139e:	701a      	strb	r2, [r3, #0]
    }
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000071 	.word	0x20000071

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f875 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f000 f8a0 	bl	8001584 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20018000 	.word	0x20018000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000074 	.word	0x20000074
 8001478:	200001c8 	.word	0x200001c8

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f000 f85f 	bl	8001590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fcaf 	bl	8000e34 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80014e4:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 80014e8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80014ec:	200001c4 	.word	0x200001c4

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000003 	.word	0x20000003
 8001518:	20000078 	.word	0x20000078

0800151c <sniprintf>:
 800151c:	b40c      	push	{r2, r3}
 800151e:	b530      	push	{r4, r5, lr}
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <sniprintf+0x64>)
 8001522:	1e0c      	subs	r4, r1, #0
 8001524:	681d      	ldr	r5, [r3, #0]
 8001526:	b09d      	sub	sp, #116	@ 0x74
 8001528:	da08      	bge.n	800153c <sniprintf+0x20>
 800152a:	238b      	movs	r3, #139	@ 0x8b
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	f04f 30ff 	mov.w	r0, #4294967295
 8001532:	b01d      	add	sp, #116	@ 0x74
 8001534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001538:	b002      	add	sp, #8
 800153a:	4770      	bx	lr
 800153c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001544:	bf14      	ite	ne
 8001546:	f104 33ff 	addne.w	r3, r4, #4294967295
 800154a:	4623      	moveq	r3, r4
 800154c:	9304      	str	r3, [sp, #16]
 800154e:	9307      	str	r3, [sp, #28]
 8001550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001554:	9002      	str	r0, [sp, #8]
 8001556:	9006      	str	r0, [sp, #24]
 8001558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800155c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800155e:	ab21      	add	r3, sp, #132	@ 0x84
 8001560:	a902      	add	r1, sp, #8
 8001562:	4628      	mov	r0, r5
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f000 f98d 	bl	8001884 <_svfiprintf_r>
 800156a:	1c43      	adds	r3, r0, #1
 800156c:	bfbc      	itt	lt
 800156e:	238b      	movlt	r3, #139	@ 0x8b
 8001570:	602b      	strlt	r3, [r5, #0]
 8001572:	2c00      	cmp	r4, #0
 8001574:	d0dd      	beq.n	8001532 <sniprintf+0x16>
 8001576:	9b02      	ldr	r3, [sp, #8]
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e7d9      	b.n	8001532 <sniprintf+0x16>
 800157e:	bf00      	nop
 8001580:	20000004 	.word	0x20000004

08001584 <__errno>:
 8001584:	4b01      	ldr	r3, [pc, #4]	@ (800158c <__errno+0x8>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000004 	.word	0x20000004

08001590 <__libc_init_array>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4d0d      	ldr	r5, [pc, #52]	@ (80015c8 <__libc_init_array+0x38>)
 8001594:	4c0d      	ldr	r4, [pc, #52]	@ (80015cc <__libc_init_array+0x3c>)
 8001596:	1b64      	subs	r4, r4, r5
 8001598:	10a4      	asrs	r4, r4, #2
 800159a:	2600      	movs	r6, #0
 800159c:	42a6      	cmp	r6, r4
 800159e:	d109      	bne.n	80015b4 <__libc_init_array+0x24>
 80015a0:	4d0b      	ldr	r5, [pc, #44]	@ (80015d0 <__libc_init_array+0x40>)
 80015a2:	4c0c      	ldr	r4, [pc, #48]	@ (80015d4 <__libc_init_array+0x44>)
 80015a4:	f000 fc66 	bl	8001e74 <_init>
 80015a8:	1b64      	subs	r4, r4, r5
 80015aa:	10a4      	asrs	r4, r4, #2
 80015ac:	2600      	movs	r6, #0
 80015ae:	42a6      	cmp	r6, r4
 80015b0:	d105      	bne.n	80015be <__libc_init_array+0x2e>
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b8:	4798      	blx	r3
 80015ba:	3601      	adds	r6, #1
 80015bc:	e7ee      	b.n	800159c <__libc_init_array+0xc>
 80015be:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c2:	4798      	blx	r3
 80015c4:	3601      	adds	r6, #1
 80015c6:	e7f2      	b.n	80015ae <__libc_init_array+0x1e>
 80015c8:	08001ff8 	.word	0x08001ff8
 80015cc:	08001ff8 	.word	0x08001ff8
 80015d0:	08001ff8 	.word	0x08001ff8
 80015d4:	08001ffc 	.word	0x08001ffc

080015d8 <__retarget_lock_acquire_recursive>:
 80015d8:	4770      	bx	lr

080015da <__retarget_lock_release_recursive>:
 80015da:	4770      	bx	lr

080015dc <_free_r>:
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4605      	mov	r5, r0
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d041      	beq.n	8001668 <_free_r+0x8c>
 80015e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015e8:	1f0c      	subs	r4, r1, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bfb8      	it	lt
 80015ee:	18e4      	addlt	r4, r4, r3
 80015f0:	f000 f8e0 	bl	80017b4 <__malloc_lock>
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <_free_r+0x90>)
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	b933      	cbnz	r3, 8001608 <_free_r+0x2c>
 80015fa:	6063      	str	r3, [r4, #4]
 80015fc:	6014      	str	r4, [r2, #0]
 80015fe:	4628      	mov	r0, r5
 8001600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001604:	f000 b8dc 	b.w	80017c0 <__malloc_unlock>
 8001608:	42a3      	cmp	r3, r4
 800160a:	d908      	bls.n	800161e <_free_r+0x42>
 800160c:	6820      	ldr	r0, [r4, #0]
 800160e:	1821      	adds	r1, r4, r0
 8001610:	428b      	cmp	r3, r1
 8001612:	bf01      	itttt	eq
 8001614:	6819      	ldreq	r1, [r3, #0]
 8001616:	685b      	ldreq	r3, [r3, #4]
 8001618:	1809      	addeq	r1, r1, r0
 800161a:	6021      	streq	r1, [r4, #0]
 800161c:	e7ed      	b.n	80015fa <_free_r+0x1e>
 800161e:	461a      	mov	r2, r3
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	b10b      	cbz	r3, 8001628 <_free_r+0x4c>
 8001624:	42a3      	cmp	r3, r4
 8001626:	d9fa      	bls.n	800161e <_free_r+0x42>
 8001628:	6811      	ldr	r1, [r2, #0]
 800162a:	1850      	adds	r0, r2, r1
 800162c:	42a0      	cmp	r0, r4
 800162e:	d10b      	bne.n	8001648 <_free_r+0x6c>
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	4401      	add	r1, r0
 8001634:	1850      	adds	r0, r2, r1
 8001636:	4283      	cmp	r3, r0
 8001638:	6011      	str	r1, [r2, #0]
 800163a:	d1e0      	bne.n	80015fe <_free_r+0x22>
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	6053      	str	r3, [r2, #4]
 8001642:	4408      	add	r0, r1
 8001644:	6010      	str	r0, [r2, #0]
 8001646:	e7da      	b.n	80015fe <_free_r+0x22>
 8001648:	d902      	bls.n	8001650 <_free_r+0x74>
 800164a:	230c      	movs	r3, #12
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	e7d6      	b.n	80015fe <_free_r+0x22>
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	1821      	adds	r1, r4, r0
 8001654:	428b      	cmp	r3, r1
 8001656:	bf04      	itt	eq
 8001658:	6819      	ldreq	r1, [r3, #0]
 800165a:	685b      	ldreq	r3, [r3, #4]
 800165c:	6063      	str	r3, [r4, #4]
 800165e:	bf04      	itt	eq
 8001660:	1809      	addeq	r1, r1, r0
 8001662:	6021      	streq	r1, [r4, #0]
 8001664:	6054      	str	r4, [r2, #4]
 8001666:	e7ca      	b.n	80015fe <_free_r+0x22>
 8001668:	bd38      	pop	{r3, r4, r5, pc}
 800166a:	bf00      	nop
 800166c:	200001c0 	.word	0x200001c0

08001670 <sbrk_aligned>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	4e0f      	ldr	r6, [pc, #60]	@ (80016b0 <sbrk_aligned+0x40>)
 8001674:	460c      	mov	r4, r1
 8001676:	6831      	ldr	r1, [r6, #0]
 8001678:	4605      	mov	r5, r0
 800167a:	b911      	cbnz	r1, 8001682 <sbrk_aligned+0x12>
 800167c:	f000 fba6 	bl	8001dcc <_sbrk_r>
 8001680:	6030      	str	r0, [r6, #0]
 8001682:	4621      	mov	r1, r4
 8001684:	4628      	mov	r0, r5
 8001686:	f000 fba1 	bl	8001dcc <_sbrk_r>
 800168a:	1c43      	adds	r3, r0, #1
 800168c:	d103      	bne.n	8001696 <sbrk_aligned+0x26>
 800168e:	f04f 34ff 	mov.w	r4, #4294967295
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	1cc4      	adds	r4, r0, #3
 8001698:	f024 0403 	bic.w	r4, r4, #3
 800169c:	42a0      	cmp	r0, r4
 800169e:	d0f8      	beq.n	8001692 <sbrk_aligned+0x22>
 80016a0:	1a21      	subs	r1, r4, r0
 80016a2:	4628      	mov	r0, r5
 80016a4:	f000 fb92 	bl	8001dcc <_sbrk_r>
 80016a8:	3001      	adds	r0, #1
 80016aa:	d1f2      	bne.n	8001692 <sbrk_aligned+0x22>
 80016ac:	e7ef      	b.n	800168e <sbrk_aligned+0x1e>
 80016ae:	bf00      	nop
 80016b0:	200001bc 	.word	0x200001bc

080016b4 <_malloc_r>:
 80016b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016b8:	1ccd      	adds	r5, r1, #3
 80016ba:	f025 0503 	bic.w	r5, r5, #3
 80016be:	3508      	adds	r5, #8
 80016c0:	2d0c      	cmp	r5, #12
 80016c2:	bf38      	it	cc
 80016c4:	250c      	movcc	r5, #12
 80016c6:	2d00      	cmp	r5, #0
 80016c8:	4606      	mov	r6, r0
 80016ca:	db01      	blt.n	80016d0 <_malloc_r+0x1c>
 80016cc:	42a9      	cmp	r1, r5
 80016ce:	d904      	bls.n	80016da <_malloc_r+0x26>
 80016d0:	230c      	movs	r3, #12
 80016d2:	6033      	str	r3, [r6, #0]
 80016d4:	2000      	movs	r0, #0
 80016d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017b0 <_malloc_r+0xfc>
 80016de:	f000 f869 	bl	80017b4 <__malloc_lock>
 80016e2:	f8d8 3000 	ldr.w	r3, [r8]
 80016e6:	461c      	mov	r4, r3
 80016e8:	bb44      	cbnz	r4, 800173c <_malloc_r+0x88>
 80016ea:	4629      	mov	r1, r5
 80016ec:	4630      	mov	r0, r6
 80016ee:	f7ff ffbf 	bl	8001670 <sbrk_aligned>
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	4604      	mov	r4, r0
 80016f6:	d158      	bne.n	80017aa <_malloc_r+0xf6>
 80016f8:	f8d8 4000 	ldr.w	r4, [r8]
 80016fc:	4627      	mov	r7, r4
 80016fe:	2f00      	cmp	r7, #0
 8001700:	d143      	bne.n	800178a <_malloc_r+0xd6>
 8001702:	2c00      	cmp	r4, #0
 8001704:	d04b      	beq.n	800179e <_malloc_r+0xea>
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	4639      	mov	r1, r7
 800170a:	4630      	mov	r0, r6
 800170c:	eb04 0903 	add.w	r9, r4, r3
 8001710:	f000 fb5c 	bl	8001dcc <_sbrk_r>
 8001714:	4581      	cmp	r9, r0
 8001716:	d142      	bne.n	800179e <_malloc_r+0xea>
 8001718:	6821      	ldr	r1, [r4, #0]
 800171a:	1a6d      	subs	r5, r5, r1
 800171c:	4629      	mov	r1, r5
 800171e:	4630      	mov	r0, r6
 8001720:	f7ff ffa6 	bl	8001670 <sbrk_aligned>
 8001724:	3001      	adds	r0, #1
 8001726:	d03a      	beq.n	800179e <_malloc_r+0xea>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	442b      	add	r3, r5
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	f8d8 3000 	ldr.w	r3, [r8]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	bb62      	cbnz	r2, 8001790 <_malloc_r+0xdc>
 8001736:	f8c8 7000 	str.w	r7, [r8]
 800173a:	e00f      	b.n	800175c <_malloc_r+0xa8>
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	1b52      	subs	r2, r2, r5
 8001740:	d420      	bmi.n	8001784 <_malloc_r+0xd0>
 8001742:	2a0b      	cmp	r2, #11
 8001744:	d917      	bls.n	8001776 <_malloc_r+0xc2>
 8001746:	1961      	adds	r1, r4, r5
 8001748:	42a3      	cmp	r3, r4
 800174a:	6025      	str	r5, [r4, #0]
 800174c:	bf18      	it	ne
 800174e:	6059      	strne	r1, [r3, #4]
 8001750:	6863      	ldr	r3, [r4, #4]
 8001752:	bf08      	it	eq
 8001754:	f8c8 1000 	streq.w	r1, [r8]
 8001758:	5162      	str	r2, [r4, r5]
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	4630      	mov	r0, r6
 800175e:	f000 f82f 	bl	80017c0 <__malloc_unlock>
 8001762:	f104 000b 	add.w	r0, r4, #11
 8001766:	1d23      	adds	r3, r4, #4
 8001768:	f020 0007 	bic.w	r0, r0, #7
 800176c:	1ac2      	subs	r2, r0, r3
 800176e:	bf1c      	itt	ne
 8001770:	1a1b      	subne	r3, r3, r0
 8001772:	50a3      	strne	r3, [r4, r2]
 8001774:	e7af      	b.n	80016d6 <_malloc_r+0x22>
 8001776:	6862      	ldr	r2, [r4, #4]
 8001778:	42a3      	cmp	r3, r4
 800177a:	bf0c      	ite	eq
 800177c:	f8c8 2000 	streq.w	r2, [r8]
 8001780:	605a      	strne	r2, [r3, #4]
 8001782:	e7eb      	b.n	800175c <_malloc_r+0xa8>
 8001784:	4623      	mov	r3, r4
 8001786:	6864      	ldr	r4, [r4, #4]
 8001788:	e7ae      	b.n	80016e8 <_malloc_r+0x34>
 800178a:	463c      	mov	r4, r7
 800178c:	687f      	ldr	r7, [r7, #4]
 800178e:	e7b6      	b.n	80016fe <_malloc_r+0x4a>
 8001790:	461a      	mov	r2, r3
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	42a3      	cmp	r3, r4
 8001796:	d1fb      	bne.n	8001790 <_malloc_r+0xdc>
 8001798:	2300      	movs	r3, #0
 800179a:	6053      	str	r3, [r2, #4]
 800179c:	e7de      	b.n	800175c <_malloc_r+0xa8>
 800179e:	230c      	movs	r3, #12
 80017a0:	6033      	str	r3, [r6, #0]
 80017a2:	4630      	mov	r0, r6
 80017a4:	f000 f80c 	bl	80017c0 <__malloc_unlock>
 80017a8:	e794      	b.n	80016d4 <_malloc_r+0x20>
 80017aa:	6005      	str	r5, [r0, #0]
 80017ac:	e7d6      	b.n	800175c <_malloc_r+0xa8>
 80017ae:	bf00      	nop
 80017b0:	200001c0 	.word	0x200001c0

080017b4 <__malloc_lock>:
 80017b4:	4801      	ldr	r0, [pc, #4]	@ (80017bc <__malloc_lock+0x8>)
 80017b6:	f7ff bf0f 	b.w	80015d8 <__retarget_lock_acquire_recursive>
 80017ba:	bf00      	nop
 80017bc:	200001b8 	.word	0x200001b8

080017c0 <__malloc_unlock>:
 80017c0:	4801      	ldr	r0, [pc, #4]	@ (80017c8 <__malloc_unlock+0x8>)
 80017c2:	f7ff bf0a 	b.w	80015da <__retarget_lock_release_recursive>
 80017c6:	bf00      	nop
 80017c8:	200001b8 	.word	0x200001b8

080017cc <__ssputs_r>:
 80017cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d0:	688e      	ldr	r6, [r1, #8]
 80017d2:	461f      	mov	r7, r3
 80017d4:	42be      	cmp	r6, r7
 80017d6:	680b      	ldr	r3, [r1, #0]
 80017d8:	4682      	mov	sl, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4690      	mov	r8, r2
 80017de:	d82d      	bhi.n	800183c <__ssputs_r+0x70>
 80017e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80017e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80017e8:	d026      	beq.n	8001838 <__ssputs_r+0x6c>
 80017ea:	6965      	ldr	r5, [r4, #20]
 80017ec:	6909      	ldr	r1, [r1, #16]
 80017ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017f2:	eba3 0901 	sub.w	r9, r3, r1
 80017f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017fa:	1c7b      	adds	r3, r7, #1
 80017fc:	444b      	add	r3, r9
 80017fe:	106d      	asrs	r5, r5, #1
 8001800:	429d      	cmp	r5, r3
 8001802:	bf38      	it	cc
 8001804:	461d      	movcc	r5, r3
 8001806:	0553      	lsls	r3, r2, #21
 8001808:	d527      	bpl.n	800185a <__ssputs_r+0x8e>
 800180a:	4629      	mov	r1, r5
 800180c:	f7ff ff52 	bl	80016b4 <_malloc_r>
 8001810:	4606      	mov	r6, r0
 8001812:	b360      	cbz	r0, 800186e <__ssputs_r+0xa2>
 8001814:	6921      	ldr	r1, [r4, #16]
 8001816:	464a      	mov	r2, r9
 8001818:	f000 fae8 	bl	8001dec <memcpy>
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001826:	81a3      	strh	r3, [r4, #12]
 8001828:	6126      	str	r6, [r4, #16]
 800182a:	6165      	str	r5, [r4, #20]
 800182c:	444e      	add	r6, r9
 800182e:	eba5 0509 	sub.w	r5, r5, r9
 8001832:	6026      	str	r6, [r4, #0]
 8001834:	60a5      	str	r5, [r4, #8]
 8001836:	463e      	mov	r6, r7
 8001838:	42be      	cmp	r6, r7
 800183a:	d900      	bls.n	800183e <__ssputs_r+0x72>
 800183c:	463e      	mov	r6, r7
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	4632      	mov	r2, r6
 8001842:	4641      	mov	r1, r8
 8001844:	f000 faa8 	bl	8001d98 <memmove>
 8001848:	68a3      	ldr	r3, [r4, #8]
 800184a:	1b9b      	subs	r3, r3, r6
 800184c:	60a3      	str	r3, [r4, #8]
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	4433      	add	r3, r6
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	2000      	movs	r0, #0
 8001856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800185a:	462a      	mov	r2, r5
 800185c:	f000 fad4 	bl	8001e08 <_realloc_r>
 8001860:	4606      	mov	r6, r0
 8001862:	2800      	cmp	r0, #0
 8001864:	d1e0      	bne.n	8001828 <__ssputs_r+0x5c>
 8001866:	6921      	ldr	r1, [r4, #16]
 8001868:	4650      	mov	r0, sl
 800186a:	f7ff feb7 	bl	80015dc <_free_r>
 800186e:	230c      	movs	r3, #12
 8001870:	f8ca 3000 	str.w	r3, [sl]
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800187a:	81a3      	strh	r3, [r4, #12]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	e7e9      	b.n	8001856 <__ssputs_r+0x8a>
	...

08001884 <_svfiprintf_r>:
 8001884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001888:	4698      	mov	r8, r3
 800188a:	898b      	ldrh	r3, [r1, #12]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	b09d      	sub	sp, #116	@ 0x74
 8001890:	4607      	mov	r7, r0
 8001892:	460d      	mov	r5, r1
 8001894:	4614      	mov	r4, r2
 8001896:	d510      	bpl.n	80018ba <_svfiprintf_r+0x36>
 8001898:	690b      	ldr	r3, [r1, #16]
 800189a:	b973      	cbnz	r3, 80018ba <_svfiprintf_r+0x36>
 800189c:	2140      	movs	r1, #64	@ 0x40
 800189e:	f7ff ff09 	bl	80016b4 <_malloc_r>
 80018a2:	6028      	str	r0, [r5, #0]
 80018a4:	6128      	str	r0, [r5, #16]
 80018a6:	b930      	cbnz	r0, 80018b6 <_svfiprintf_r+0x32>
 80018a8:	230c      	movs	r3, #12
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	b01d      	add	sp, #116	@ 0x74
 80018b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b6:	2340      	movs	r3, #64	@ 0x40
 80018b8:	616b      	str	r3, [r5, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80018be:	2320      	movs	r3, #32
 80018c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80018c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80018c8:	2330      	movs	r3, #48	@ 0x30
 80018ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001a68 <_svfiprintf_r+0x1e4>
 80018ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018d2:	f04f 0901 	mov.w	r9, #1
 80018d6:	4623      	mov	r3, r4
 80018d8:	469a      	mov	sl, r3
 80018da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018de:	b10a      	cbz	r2, 80018e4 <_svfiprintf_r+0x60>
 80018e0:	2a25      	cmp	r2, #37	@ 0x25
 80018e2:	d1f9      	bne.n	80018d8 <_svfiprintf_r+0x54>
 80018e4:	ebba 0b04 	subs.w	fp, sl, r4
 80018e8:	d00b      	beq.n	8001902 <_svfiprintf_r+0x7e>
 80018ea:	465b      	mov	r3, fp
 80018ec:	4622      	mov	r2, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	4638      	mov	r0, r7
 80018f2:	f7ff ff6b 	bl	80017cc <__ssputs_r>
 80018f6:	3001      	adds	r0, #1
 80018f8:	f000 80a7 	beq.w	8001a4a <_svfiprintf_r+0x1c6>
 80018fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018fe:	445a      	add	r2, fp
 8001900:	9209      	str	r2, [sp, #36]	@ 0x24
 8001902:	f89a 3000 	ldrb.w	r3, [sl]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809f 	beq.w	8001a4a <_svfiprintf_r+0x1c6>
 800190c:	2300      	movs	r3, #0
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001916:	f10a 0a01 	add.w	sl, sl, #1
 800191a:	9304      	str	r3, [sp, #16]
 800191c:	9307      	str	r3, [sp, #28]
 800191e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001922:	931a      	str	r3, [sp, #104]	@ 0x68
 8001924:	4654      	mov	r4, sl
 8001926:	2205      	movs	r2, #5
 8001928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800192c:	484e      	ldr	r0, [pc, #312]	@ (8001a68 <_svfiprintf_r+0x1e4>)
 800192e:	f7fe fc57 	bl	80001e0 <memchr>
 8001932:	9a04      	ldr	r2, [sp, #16]
 8001934:	b9d8      	cbnz	r0, 800196e <_svfiprintf_r+0xea>
 8001936:	06d0      	lsls	r0, r2, #27
 8001938:	bf44      	itt	mi
 800193a:	2320      	movmi	r3, #32
 800193c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001940:	0711      	lsls	r1, r2, #28
 8001942:	bf44      	itt	mi
 8001944:	232b      	movmi	r3, #43	@ 0x2b
 8001946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800194a:	f89a 3000 	ldrb.w	r3, [sl]
 800194e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001950:	d015      	beq.n	800197e <_svfiprintf_r+0xfa>
 8001952:	9a07      	ldr	r2, [sp, #28]
 8001954:	4654      	mov	r4, sl
 8001956:	2000      	movs	r0, #0
 8001958:	f04f 0c0a 	mov.w	ip, #10
 800195c:	4621      	mov	r1, r4
 800195e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001962:	3b30      	subs	r3, #48	@ 0x30
 8001964:	2b09      	cmp	r3, #9
 8001966:	d94b      	bls.n	8001a00 <_svfiprintf_r+0x17c>
 8001968:	b1b0      	cbz	r0, 8001998 <_svfiprintf_r+0x114>
 800196a:	9207      	str	r2, [sp, #28]
 800196c:	e014      	b.n	8001998 <_svfiprintf_r+0x114>
 800196e:	eba0 0308 	sub.w	r3, r0, r8
 8001972:	fa09 f303 	lsl.w	r3, r9, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	9304      	str	r3, [sp, #16]
 800197a:	46a2      	mov	sl, r4
 800197c:	e7d2      	b.n	8001924 <_svfiprintf_r+0xa0>
 800197e:	9b03      	ldr	r3, [sp, #12]
 8001980:	1d19      	adds	r1, r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	9103      	str	r1, [sp, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	bfbb      	ittet	lt
 800198a:	425b      	neglt	r3, r3
 800198c:	f042 0202 	orrlt.w	r2, r2, #2
 8001990:	9307      	strge	r3, [sp, #28]
 8001992:	9307      	strlt	r3, [sp, #28]
 8001994:	bfb8      	it	lt
 8001996:	9204      	strlt	r2, [sp, #16]
 8001998:	7823      	ldrb	r3, [r4, #0]
 800199a:	2b2e      	cmp	r3, #46	@ 0x2e
 800199c:	d10a      	bne.n	80019b4 <_svfiprintf_r+0x130>
 800199e:	7863      	ldrb	r3, [r4, #1]
 80019a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019a2:	d132      	bne.n	8001a0a <_svfiprintf_r+0x186>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	1d1a      	adds	r2, r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80019b0:	3402      	adds	r4, #2
 80019b2:	9305      	str	r3, [sp, #20]
 80019b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001a78 <_svfiprintf_r+0x1f4>
 80019b8:	7821      	ldrb	r1, [r4, #0]
 80019ba:	2203      	movs	r2, #3
 80019bc:	4650      	mov	r0, sl
 80019be:	f7fe fc0f 	bl	80001e0 <memchr>
 80019c2:	b138      	cbz	r0, 80019d4 <_svfiprintf_r+0x150>
 80019c4:	9b04      	ldr	r3, [sp, #16]
 80019c6:	eba0 000a 	sub.w	r0, r0, sl
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	4082      	lsls	r2, r0
 80019ce:	4313      	orrs	r3, r2
 80019d0:	3401      	adds	r4, #1
 80019d2:	9304      	str	r3, [sp, #16]
 80019d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019d8:	4824      	ldr	r0, [pc, #144]	@ (8001a6c <_svfiprintf_r+0x1e8>)
 80019da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019de:	2206      	movs	r2, #6
 80019e0:	f7fe fbfe 	bl	80001e0 <memchr>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d036      	beq.n	8001a56 <_svfiprintf_r+0x1d2>
 80019e8:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <_svfiprintf_r+0x1ec>)
 80019ea:	bb1b      	cbnz	r3, 8001a34 <_svfiprintf_r+0x1b0>
 80019ec:	9b03      	ldr	r3, [sp, #12]
 80019ee:	3307      	adds	r3, #7
 80019f0:	f023 0307 	bic.w	r3, r3, #7
 80019f4:	3308      	adds	r3, #8
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019fa:	4433      	add	r3, r6
 80019fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80019fe:	e76a      	b.n	80018d6 <_svfiprintf_r+0x52>
 8001a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a04:	460c      	mov	r4, r1
 8001a06:	2001      	movs	r0, #1
 8001a08:	e7a8      	b.n	800195c <_svfiprintf_r+0xd8>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	3401      	adds	r4, #1
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 0c0a 	mov.w	ip, #10
 8001a16:	4620      	mov	r0, r4
 8001a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a1c:	3a30      	subs	r2, #48	@ 0x30
 8001a1e:	2a09      	cmp	r2, #9
 8001a20:	d903      	bls.n	8001a2a <_svfiprintf_r+0x1a6>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0c6      	beq.n	80019b4 <_svfiprintf_r+0x130>
 8001a26:	9105      	str	r1, [sp, #20]
 8001a28:	e7c4      	b.n	80019b4 <_svfiprintf_r+0x130>
 8001a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a2e:	4604      	mov	r4, r0
 8001a30:	2301      	movs	r3, #1
 8001a32:	e7f0      	b.n	8001a16 <_svfiprintf_r+0x192>
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462a      	mov	r2, r5
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <_svfiprintf_r+0x1f0>)
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	4638      	mov	r0, r7
 8001a40:	f3af 8000 	nop.w
 8001a44:	1c42      	adds	r2, r0, #1
 8001a46:	4606      	mov	r6, r0
 8001a48:	d1d6      	bne.n	80019f8 <_svfiprintf_r+0x174>
 8001a4a:	89ab      	ldrh	r3, [r5, #12]
 8001a4c:	065b      	lsls	r3, r3, #25
 8001a4e:	f53f af2d 	bmi.w	80018ac <_svfiprintf_r+0x28>
 8001a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a54:	e72c      	b.n	80018b0 <_svfiprintf_r+0x2c>
 8001a56:	ab03      	add	r3, sp, #12
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	462a      	mov	r2, r5
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <_svfiprintf_r+0x1f0>)
 8001a5e:	a904      	add	r1, sp, #16
 8001a60:	4638      	mov	r0, r7
 8001a62:	f000 f879 	bl	8001b58 <_printf_i>
 8001a66:	e7ed      	b.n	8001a44 <_svfiprintf_r+0x1c0>
 8001a68:	08001fbb 	.word	0x08001fbb
 8001a6c:	08001fc5 	.word	0x08001fc5
 8001a70:	00000000 	.word	0x00000000
 8001a74:	080017cd 	.word	0x080017cd
 8001a78:	08001fc1 	.word	0x08001fc1

08001a7c <_printf_common>:
 8001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a80:	4616      	mov	r6, r2
 8001a82:	4698      	mov	r8, r3
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	690b      	ldr	r3, [r1, #16]
 8001a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bfb8      	it	lt
 8001a90:	4613      	movlt	r3, r2
 8001a92:	6033      	str	r3, [r6, #0]
 8001a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a98:	4607      	mov	r7, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	b10a      	cbz	r2, 8001aa2 <_printf_common+0x26>
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6033      	str	r3, [r6, #0]
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0699      	lsls	r1, r3, #26
 8001aa6:	bf42      	ittt	mi
 8001aa8:	6833      	ldrmi	r3, [r6, #0]
 8001aaa:	3302      	addmi	r3, #2
 8001aac:	6033      	strmi	r3, [r6, #0]
 8001aae:	6825      	ldr	r5, [r4, #0]
 8001ab0:	f015 0506 	ands.w	r5, r5, #6
 8001ab4:	d106      	bne.n	8001ac4 <_printf_common+0x48>
 8001ab6:	f104 0a19 	add.w	sl, r4, #25
 8001aba:	68e3      	ldr	r3, [r4, #12]
 8001abc:	6832      	ldr	r2, [r6, #0]
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	42ab      	cmp	r3, r5
 8001ac2:	dc26      	bgt.n	8001b12 <_printf_common+0x96>
 8001ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ac8:	6822      	ldr	r2, [r4, #0]
 8001aca:	3b00      	subs	r3, #0
 8001acc:	bf18      	it	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	0692      	lsls	r2, r2, #26
 8001ad2:	d42b      	bmi.n	8001b2c <_printf_common+0xb0>
 8001ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ad8:	4641      	mov	r1, r8
 8001ada:	4638      	mov	r0, r7
 8001adc:	47c8      	blx	r9
 8001ade:	3001      	adds	r0, #1
 8001ae0:	d01e      	beq.n	8001b20 <_printf_common+0xa4>
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	6922      	ldr	r2, [r4, #16]
 8001ae6:	f003 0306 	and.w	r3, r3, #6
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf02      	ittt	eq
 8001aee:	68e5      	ldreq	r5, [r4, #12]
 8001af0:	6833      	ldreq	r3, [r6, #0]
 8001af2:	1aed      	subeq	r5, r5, r3
 8001af4:	68a3      	ldr	r3, [r4, #8]
 8001af6:	bf0c      	ite	eq
 8001af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001afc:	2500      	movne	r5, #0
 8001afe:	4293      	cmp	r3, r2
 8001b00:	bfc4      	itt	gt
 8001b02:	1a9b      	subgt	r3, r3, r2
 8001b04:	18ed      	addgt	r5, r5, r3
 8001b06:	2600      	movs	r6, #0
 8001b08:	341a      	adds	r4, #26
 8001b0a:	42b5      	cmp	r5, r6
 8001b0c:	d11a      	bne.n	8001b44 <_printf_common+0xc8>
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e008      	b.n	8001b24 <_printf_common+0xa8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	4652      	mov	r2, sl
 8001b16:	4641      	mov	r1, r8
 8001b18:	4638      	mov	r0, r7
 8001b1a:	47c8      	blx	r9
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d103      	bne.n	8001b28 <_printf_common+0xac>
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b28:	3501      	adds	r5, #1
 8001b2a:	e7c6      	b.n	8001aba <_printf_common+0x3e>
 8001b2c:	18e1      	adds	r1, r4, r3
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	2030      	movs	r0, #48	@ 0x30
 8001b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b36:	4422      	add	r2, r4
 8001b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b40:	3302      	adds	r3, #2
 8001b42:	e7c7      	b.n	8001ad4 <_printf_common+0x58>
 8001b44:	2301      	movs	r3, #1
 8001b46:	4622      	mov	r2, r4
 8001b48:	4641      	mov	r1, r8
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	47c8      	blx	r9
 8001b4e:	3001      	adds	r0, #1
 8001b50:	d0e6      	beq.n	8001b20 <_printf_common+0xa4>
 8001b52:	3601      	adds	r6, #1
 8001b54:	e7d9      	b.n	8001b0a <_printf_common+0x8e>
	...

08001b58 <_printf_i>:
 8001b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b5c:	7e0f      	ldrb	r7, [r1, #24]
 8001b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b60:	2f78      	cmp	r7, #120	@ 0x78
 8001b62:	4691      	mov	r9, r2
 8001b64:	4680      	mov	r8, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	469a      	mov	sl, r3
 8001b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b6e:	d807      	bhi.n	8001b80 <_printf_i+0x28>
 8001b70:	2f62      	cmp	r7, #98	@ 0x62
 8001b72:	d80a      	bhi.n	8001b8a <_printf_i+0x32>
 8001b74:	2f00      	cmp	r7, #0
 8001b76:	f000 80d2 	beq.w	8001d1e <_printf_i+0x1c6>
 8001b7a:	2f58      	cmp	r7, #88	@ 0x58
 8001b7c:	f000 80b9 	beq.w	8001cf2 <_printf_i+0x19a>
 8001b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b88:	e03a      	b.n	8001c00 <_printf_i+0xa8>
 8001b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b8e:	2b15      	cmp	r3, #21
 8001b90:	d8f6      	bhi.n	8001b80 <_printf_i+0x28>
 8001b92:	a101      	add	r1, pc, #4	@ (adr r1, 8001b98 <_printf_i+0x40>)
 8001b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b98:	08001bf1 	.word	0x08001bf1
 8001b9c:	08001c05 	.word	0x08001c05
 8001ba0:	08001b81 	.word	0x08001b81
 8001ba4:	08001b81 	.word	0x08001b81
 8001ba8:	08001b81 	.word	0x08001b81
 8001bac:	08001b81 	.word	0x08001b81
 8001bb0:	08001c05 	.word	0x08001c05
 8001bb4:	08001b81 	.word	0x08001b81
 8001bb8:	08001b81 	.word	0x08001b81
 8001bbc:	08001b81 	.word	0x08001b81
 8001bc0:	08001b81 	.word	0x08001b81
 8001bc4:	08001d05 	.word	0x08001d05
 8001bc8:	08001c2f 	.word	0x08001c2f
 8001bcc:	08001cbf 	.word	0x08001cbf
 8001bd0:	08001b81 	.word	0x08001b81
 8001bd4:	08001b81 	.word	0x08001b81
 8001bd8:	08001d27 	.word	0x08001d27
 8001bdc:	08001b81 	.word	0x08001b81
 8001be0:	08001c2f 	.word	0x08001c2f
 8001be4:	08001b81 	.word	0x08001b81
 8001be8:	08001b81 	.word	0x08001b81
 8001bec:	08001cc7 	.word	0x08001cc7
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6032      	str	r2, [r6, #0]
 8001bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c00:	2301      	movs	r3, #1
 8001c02:	e09d      	b.n	8001d40 <_printf_i+0x1e8>
 8001c04:	6833      	ldr	r3, [r6, #0]
 8001c06:	6820      	ldr	r0, [r4, #0]
 8001c08:	1d19      	adds	r1, r3, #4
 8001c0a:	6031      	str	r1, [r6, #0]
 8001c0c:	0606      	lsls	r6, r0, #24
 8001c0e:	d501      	bpl.n	8001c14 <_printf_i+0xbc>
 8001c10:	681d      	ldr	r5, [r3, #0]
 8001c12:	e003      	b.n	8001c1c <_printf_i+0xc4>
 8001c14:	0645      	lsls	r5, r0, #25
 8001c16:	d5fb      	bpl.n	8001c10 <_printf_i+0xb8>
 8001c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c1c:	2d00      	cmp	r5, #0
 8001c1e:	da03      	bge.n	8001c28 <_printf_i+0xd0>
 8001c20:	232d      	movs	r3, #45	@ 0x2d
 8001c22:	426d      	negs	r5, r5
 8001c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c28:	4859      	ldr	r0, [pc, #356]	@ (8001d90 <_printf_i+0x238>)
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	e011      	b.n	8001c52 <_printf_i+0xfa>
 8001c2e:	6821      	ldr	r1, [r4, #0]
 8001c30:	6833      	ldr	r3, [r6, #0]
 8001c32:	0608      	lsls	r0, r1, #24
 8001c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c38:	d402      	bmi.n	8001c40 <_printf_i+0xe8>
 8001c3a:	0649      	lsls	r1, r1, #25
 8001c3c:	bf48      	it	mi
 8001c3e:	b2ad      	uxthmi	r5, r5
 8001c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c42:	4853      	ldr	r0, [pc, #332]	@ (8001d90 <_printf_i+0x238>)
 8001c44:	6033      	str	r3, [r6, #0]
 8001c46:	bf14      	ite	ne
 8001c48:	230a      	movne	r3, #10
 8001c4a:	2308      	moveq	r3, #8
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c52:	6866      	ldr	r6, [r4, #4]
 8001c54:	60a6      	str	r6, [r4, #8]
 8001c56:	2e00      	cmp	r6, #0
 8001c58:	bfa2      	ittt	ge
 8001c5a:	6821      	ldrge	r1, [r4, #0]
 8001c5c:	f021 0104 	bicge.w	r1, r1, #4
 8001c60:	6021      	strge	r1, [r4, #0]
 8001c62:	b90d      	cbnz	r5, 8001c68 <_printf_i+0x110>
 8001c64:	2e00      	cmp	r6, #0
 8001c66:	d04b      	beq.n	8001d00 <_printf_i+0x1a8>
 8001c68:	4616      	mov	r6, r2
 8001c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8001c72:	5dc7      	ldrb	r7, [r0, r7]
 8001c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c78:	462f      	mov	r7, r5
 8001c7a:	42bb      	cmp	r3, r7
 8001c7c:	460d      	mov	r5, r1
 8001c7e:	d9f4      	bls.n	8001c6a <_printf_i+0x112>
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d10b      	bne.n	8001c9c <_printf_i+0x144>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	07df      	lsls	r7, r3, #31
 8001c88:	d508      	bpl.n	8001c9c <_printf_i+0x144>
 8001c8a:	6923      	ldr	r3, [r4, #16]
 8001c8c:	6861      	ldr	r1, [r4, #4]
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	bfde      	ittt	le
 8001c92:	2330      	movle	r3, #48	@ 0x30
 8001c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c9c:	1b92      	subs	r2, r2, r6
 8001c9e:	6122      	str	r2, [r4, #16]
 8001ca0:	f8cd a000 	str.w	sl, [sp]
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	aa03      	add	r2, sp, #12
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4640      	mov	r0, r8
 8001cac:	f7ff fee6 	bl	8001a7c <_printf_common>
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	d14a      	bne.n	8001d4a <_printf_i+0x1f2>
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	b004      	add	sp, #16
 8001cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	6023      	str	r3, [r4, #0]
 8001cc6:	4833      	ldr	r0, [pc, #204]	@ (8001d94 <_printf_i+0x23c>)
 8001cc8:	2778      	movs	r7, #120	@ 0x78
 8001cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	6831      	ldr	r1, [r6, #0]
 8001cd2:	061f      	lsls	r7, r3, #24
 8001cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8001cd8:	d402      	bmi.n	8001ce0 <_printf_i+0x188>
 8001cda:	065f      	lsls	r7, r3, #25
 8001cdc:	bf48      	it	mi
 8001cde:	b2ad      	uxthmi	r5, r5
 8001ce0:	6031      	str	r1, [r6, #0]
 8001ce2:	07d9      	lsls	r1, r3, #31
 8001ce4:	bf44      	itt	mi
 8001ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8001cea:	6023      	strmi	r3, [r4, #0]
 8001cec:	b11d      	cbz	r5, 8001cf6 <_printf_i+0x19e>
 8001cee:	2310      	movs	r3, #16
 8001cf0:	e7ac      	b.n	8001c4c <_printf_i+0xf4>
 8001cf2:	4827      	ldr	r0, [pc, #156]	@ (8001d90 <_printf_i+0x238>)
 8001cf4:	e7e9      	b.n	8001cca <_printf_i+0x172>
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	f023 0320 	bic.w	r3, r3, #32
 8001cfc:	6023      	str	r3, [r4, #0]
 8001cfe:	e7f6      	b.n	8001cee <_printf_i+0x196>
 8001d00:	4616      	mov	r6, r2
 8001d02:	e7bd      	b.n	8001c80 <_printf_i+0x128>
 8001d04:	6833      	ldr	r3, [r6, #0]
 8001d06:	6825      	ldr	r5, [r4, #0]
 8001d08:	6961      	ldr	r1, [r4, #20]
 8001d0a:	1d18      	adds	r0, r3, #4
 8001d0c:	6030      	str	r0, [r6, #0]
 8001d0e:	062e      	lsls	r6, r5, #24
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	d501      	bpl.n	8001d18 <_printf_i+0x1c0>
 8001d14:	6019      	str	r1, [r3, #0]
 8001d16:	e002      	b.n	8001d1e <_printf_i+0x1c6>
 8001d18:	0668      	lsls	r0, r5, #25
 8001d1a:	d5fb      	bpl.n	8001d14 <_printf_i+0x1bc>
 8001d1c:	8019      	strh	r1, [r3, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6123      	str	r3, [r4, #16]
 8001d22:	4616      	mov	r6, r2
 8001d24:	e7bc      	b.n	8001ca0 <_printf_i+0x148>
 8001d26:	6833      	ldr	r3, [r6, #0]
 8001d28:	1d1a      	adds	r2, r3, #4
 8001d2a:	6032      	str	r2, [r6, #0]
 8001d2c:	681e      	ldr	r6, [r3, #0]
 8001d2e:	6862      	ldr	r2, [r4, #4]
 8001d30:	2100      	movs	r1, #0
 8001d32:	4630      	mov	r0, r6
 8001d34:	f7fe fa54 	bl	80001e0 <memchr>
 8001d38:	b108      	cbz	r0, 8001d3e <_printf_i+0x1e6>
 8001d3a:	1b80      	subs	r0, r0, r6
 8001d3c:	6060      	str	r0, [r4, #4]
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	6123      	str	r3, [r4, #16]
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d48:	e7aa      	b.n	8001ca0 <_printf_i+0x148>
 8001d4a:	6923      	ldr	r3, [r4, #16]
 8001d4c:	4632      	mov	r2, r6
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4640      	mov	r0, r8
 8001d52:	47d0      	blx	sl
 8001d54:	3001      	adds	r0, #1
 8001d56:	d0ad      	beq.n	8001cb4 <_printf_i+0x15c>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	079b      	lsls	r3, r3, #30
 8001d5c:	d413      	bmi.n	8001d86 <_printf_i+0x22e>
 8001d5e:	68e0      	ldr	r0, [r4, #12]
 8001d60:	9b03      	ldr	r3, [sp, #12]
 8001d62:	4298      	cmp	r0, r3
 8001d64:	bfb8      	it	lt
 8001d66:	4618      	movlt	r0, r3
 8001d68:	e7a6      	b.n	8001cb8 <_printf_i+0x160>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4632      	mov	r2, r6
 8001d6e:	4649      	mov	r1, r9
 8001d70:	4640      	mov	r0, r8
 8001d72:	47d0      	blx	sl
 8001d74:	3001      	adds	r0, #1
 8001d76:	d09d      	beq.n	8001cb4 <_printf_i+0x15c>
 8001d78:	3501      	adds	r5, #1
 8001d7a:	68e3      	ldr	r3, [r4, #12]
 8001d7c:	9903      	ldr	r1, [sp, #12]
 8001d7e:	1a5b      	subs	r3, r3, r1
 8001d80:	42ab      	cmp	r3, r5
 8001d82:	dcf2      	bgt.n	8001d6a <_printf_i+0x212>
 8001d84:	e7eb      	b.n	8001d5e <_printf_i+0x206>
 8001d86:	2500      	movs	r5, #0
 8001d88:	f104 0619 	add.w	r6, r4, #25
 8001d8c:	e7f5      	b.n	8001d7a <_printf_i+0x222>
 8001d8e:	bf00      	nop
 8001d90:	08001fcc 	.word	0x08001fcc
 8001d94:	08001fdd 	.word	0x08001fdd

08001d98 <memmove>:
 8001d98:	4288      	cmp	r0, r1
 8001d9a:	b510      	push	{r4, lr}
 8001d9c:	eb01 0402 	add.w	r4, r1, r2
 8001da0:	d902      	bls.n	8001da8 <memmove+0x10>
 8001da2:	4284      	cmp	r4, r0
 8001da4:	4623      	mov	r3, r4
 8001da6:	d807      	bhi.n	8001db8 <memmove+0x20>
 8001da8:	1e43      	subs	r3, r0, #1
 8001daa:	42a1      	cmp	r1, r4
 8001dac:	d008      	beq.n	8001dc0 <memmove+0x28>
 8001dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001db6:	e7f8      	b.n	8001daa <memmove+0x12>
 8001db8:	4402      	add	r2, r0
 8001dba:	4601      	mov	r1, r0
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	d100      	bne.n	8001dc2 <memmove+0x2a>
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001dca:	e7f7      	b.n	8001dbc <memmove+0x24>

08001dcc <_sbrk_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4d06      	ldr	r5, [pc, #24]	@ (8001de8 <_sbrk_r+0x1c>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	602b      	str	r3, [r5, #0]
 8001dd8:	f7ff fb1a 	bl	8001410 <_sbrk>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_sbrk_r+0x1a>
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_sbrk_r+0x1a>
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	200001b4 	.word	0x200001b4

08001dec <memcpy>:
 8001dec:	440a      	add	r2, r1
 8001dee:	4291      	cmp	r1, r2
 8001df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001df4:	d100      	bne.n	8001df8 <memcpy+0xc>
 8001df6:	4770      	bx	lr
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e02:	4291      	cmp	r1, r2
 8001e04:	d1f9      	bne.n	8001dfa <memcpy+0xe>
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <_realloc_r>:
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	4680      	mov	r8, r0
 8001e0e:	4615      	mov	r5, r2
 8001e10:	460c      	mov	r4, r1
 8001e12:	b921      	cbnz	r1, 8001e1e <_realloc_r+0x16>
 8001e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e18:	4611      	mov	r1, r2
 8001e1a:	f7ff bc4b 	b.w	80016b4 <_malloc_r>
 8001e1e:	b92a      	cbnz	r2, 8001e2c <_realloc_r+0x24>
 8001e20:	f7ff fbdc 	bl	80015dc <_free_r>
 8001e24:	2400      	movs	r4, #0
 8001e26:	4620      	mov	r0, r4
 8001e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e2c:	f000 f81a 	bl	8001e64 <_malloc_usable_size_r>
 8001e30:	4285      	cmp	r5, r0
 8001e32:	4606      	mov	r6, r0
 8001e34:	d802      	bhi.n	8001e3c <_realloc_r+0x34>
 8001e36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001e3a:	d8f4      	bhi.n	8001e26 <_realloc_r+0x1e>
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f7ff fc38 	bl	80016b4 <_malloc_r>
 8001e44:	4607      	mov	r7, r0
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d0ec      	beq.n	8001e24 <_realloc_r+0x1c>
 8001e4a:	42b5      	cmp	r5, r6
 8001e4c:	462a      	mov	r2, r5
 8001e4e:	4621      	mov	r1, r4
 8001e50:	bf28      	it	cs
 8001e52:	4632      	movcs	r2, r6
 8001e54:	f7ff ffca 	bl	8001dec <memcpy>
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	f7ff fbbe 	bl	80015dc <_free_r>
 8001e60:	463c      	mov	r4, r7
 8001e62:	e7e0      	b.n	8001e26 <_realloc_r+0x1e>

08001e64 <_malloc_usable_size_r>:
 8001e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e68:	1f18      	subs	r0, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfbc      	itt	lt
 8001e6e:	580b      	ldrlt	r3, [r1, r0]
 8001e70:	18c0      	addlt	r0, r0, r3
 8001e72:	4770      	bx	lr

08001e74 <_init>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr

08001e80 <_fini>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr
