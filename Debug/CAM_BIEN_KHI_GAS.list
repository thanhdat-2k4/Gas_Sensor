
CAM_BIEN_KHI_GAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08004b08  08004b08  00005b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  000071cc  2**0
                  CONTENTS
  4 .ARM          00000008  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d8  080050d8  000071cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080050e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001cc  080052ac  000071cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080052ac  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e60  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000756  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  000097b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019b  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156bc  00000000  00000000  00009b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e34  00000000  00000000  0001f24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854ae  00000000  00000000  00022083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000a7574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000a8e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004af0 	.word	0x08004af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	08004af0 	.word	0x08004af0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <delay_ms>:

// === Khai báo hàm trước khi sử dụng ===
void UART_Transmit(char *data);

// === Hàm delay sử dụng SysTick ===
void delay_ms(uint32_t ms) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    uint32_t start_tick = tick_count;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <delay_ms+0x30>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
    while (tick_count - start_tick < ms) __NOP();
 8000c02:	e000      	b.n	8000c06 <delay_ms+0x12>
 8000c04:	bf00      	nop
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <delay_ms+0x30>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <delay_ms+0x10>
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200001ec 	.word	0x200001ec

08000c28 <delay_us>:

void delay_us(uint32_t us) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < us * 8; i++) __NOP();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e003      	b.n	8000c3e <delay_us+0x16>
 8000c36:	bf00      	nop
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3f6      	bcc.n	8000c36 <delay_us+0xe>
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <GPIO_Config>:

// === Cấu hình GPIO ===
void GPIO_Config(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA, GPIOB, GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <GPIO_Config+0xb8>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	4a2b      	ldr	r2, [pc, #172]	@ (8000d10 <GPIO_Config+0xb8>)
 8000c62:	f043 0307 	orr.w	r3, r3, #7
 8000c66:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA0 (MQ-2) - Analog
    GPIOA->MODER |= (3 << (MQ2_CHANNEL * 2));
 8000c68:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a29      	ldr	r2, [pc, #164]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c6e:	f043 0303 	orr.w	r3, r3, #3
 8000c72:	6013      	str	r3, [r2, #0]

    // PA5 (Relay), PA6 (Buzzer), PA7 (LED Blue) - Output
    GPIOA->MODER &= ~((3 << (RELAY_PIN * 2)) | (3 << (BUZZER_PIN * 2)) | (3 << (LED_BLUE_PIN * 2)));
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c7a:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000c7e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((1 << (RELAY_PIN * 2)) | (1 << (BUZZER_PIN * 2)) | (1 << (LED_BLUE_PIN * 2)));
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c86:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000c8a:	6013      	str	r3, [r2, #0]
    GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a20      	ldr	r2, [pc, #128]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c92:	f023 0320 	bic.w	r3, r3, #32
 8000c96:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~(1 << BUZZER_PIN); // Buzzer OFF
 8000c98:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d14 <GPIO_Config+0xbc>)
 8000c9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ca2:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~(1 << LED_BLUE_PIN); // Blue LED OFF
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <GPIO_Config+0xbc>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <GPIO_Config+0xbc>)
 8000caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000cae:	6153      	str	r3, [r2, #20]

    // PB0 (Yellow), PB1 (Red), PB10 (Green) - Output
    GPIOB->MODER &= ~((3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)) | (3 << (LED_GREEN_PIN * 2)));
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cb6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000cba:	f023 030f 	bic.w	r3, r3, #15
 8000cbe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((1 << (LED_YELLOW_PIN * 2)) | (1 << (LED_RED_PIN * 2)) | (1 << (LED_GREEN_PIN * 2)));
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000cca:	f043 0305 	orr.w	r3, r3, #5
 8000cce:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~((1 << LED_YELLOW_PIN) | (1 << LED_RED_PIN) | (1 << LED_GREEN_PIN)); // LEDs OFF
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <GPIO_Config+0xc0>)
 8000cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cda:	f023 0303 	bic.w	r3, r3, #3
 8000cde:	6153      	str	r3, [r2, #20]

    // PC12, PC13 (SW1, SW2) - Input Pull-up
    GPIOC->MODER &= ~((3 << (SW1_PIN * 2)) | (3 << (SW2_PIN * 2)));
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <GPIO_Config+0xc4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <GPIO_Config+0xc4>)
 8000ce6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000cea:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((3 << (SW1_PIN * 2)) | (3 << (SW2_PIN * 2)));
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <GPIO_Config+0xc4>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <GPIO_Config+0xc4>)
 8000cf2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000cf6:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= ((1 << (SW1_PIN * 2)) | (1 << (SW2_PIN * 2)));
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <GPIO_Config+0xc4>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <GPIO_Config+0xc4>)
 8000cfe:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800

08000d20 <I2C_Config>:

// === Cấu hình I2C1 (PB8 - SCL, PB9 - SDA) ===
void I2C_Config(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
    // Bật clock cho I2C1 và GPIOB
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <I2C_Config+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	4a1f      	ldr	r2, [pc, #124]	@ (8000da8 <I2C_Config+0x88>)
 8000d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <I2C_Config+0x88>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <I2C_Config+0x88>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	@ 0x30

    // PB8 (SCL), PB9 (SDA) - Alternate function, open-drain
    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <I2C_Config+0x8c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	@ (8000dac <I2C_Config+0x8c>)
 8000d42:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000d46:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (8 * 2)) | (2 << (9 * 2)));
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <I2C_Config+0x8c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <I2C_Config+0x8c>)
 8000d4e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000d52:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 8) | (1 << 9); // Open-drain
 8000d54:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <I2C_Config+0x8c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <I2C_Config+0x8c>)
 8000d5a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000d5e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |= ((1 << (8 * 2)) | (1 << (9 * 2))); // Pull-up
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <I2C_Config+0x8c>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <I2C_Config+0x8c>)
 8000d66:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000d6a:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= ((4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4))); // AF4 cho I2C1
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <I2C_Config+0x8c>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d70:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <I2C_Config+0x8c>)
 8000d72:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000d76:	6253      	str	r3, [r2, #36]	@ 0x24

    // Cấu hình I2C1
    I2C1->CR1 = 0; // Reset
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <I2C_Config+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 84; // APB1 clock 84MHz
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <I2C_Config+0x90>)
 8000d80:	2254      	movs	r2, #84	@ 0x54
 8000d82:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 420; // 100kHz
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <I2C_Config+0x90>)
 8000d86:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000d8a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 85; // TRISE
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <I2C_Config+0x90>)
 8000d8e:	2255      	movs	r2, #85	@ 0x55
 8000d90:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE; // Bật I2C
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <I2C_Config+0x90>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <I2C_Config+0x90>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40005400 	.word	0x40005400

08000db4 <I2C_WriteByte>:

uint8_t I2C_WriteByte(uint8_t addr, uint8_t data, const char *context) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	@ 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	603a      	str	r2, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	71bb      	strb	r3, [r7, #6]
    uint32_t timeout = 100000;
 8000dc4:	4b56      	ldr	r3, [pc, #344]	@ (8000f20 <I2C_WriteByte+0x16c>)
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char debug_buf[32];
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000dc8:	e010      	b.n	8000dec <I2C_WriteByte+0x38>
        if (timeout == 0) {
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10d      	bne.n	8000dec <I2C_WriteByte+0x38>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Busy\r\n", context);
 8000dd0:	f107 000c 	add.w	r0, r7, #12
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	4a53      	ldr	r2, [pc, #332]	@ (8000f24 <I2C_WriteByte+0x170>)
 8000dd8:	2120      	movs	r1, #32
 8000dda:	f001 fd47 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fa30 	bl	8001248 <UART_Transmit>
            return 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e094      	b.n	8000f16 <I2C_WriteByte+0x162>
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
 8000dec:	4b4e      	ldr	r3, [pc, #312]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <I2C_WriteByte+0x4e>
 8000df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e3      	bne.n	8000dca <I2C_WriteByte+0x16>
        }
    }
    I2C1->CR1 |= I2C_CR1_START; // Phát start
 8000e02:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a48      	ldr	r2, [pc, #288]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0c:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000e0e:	e010      	b.n	8000e32 <I2C_WriteByte+0x7e>
        if (timeout == 0) {
 8000e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10d      	bne.n	8000e32 <I2C_WriteByte+0x7e>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Start timeout\r\n", context);
 8000e16:	f107 000c 	add.w	r0, r7, #12
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	4a43      	ldr	r2, [pc, #268]	@ (8000f2c <I2C_WriteByte+0x178>)
 8000e1e:	2120      	movs	r1, #32
 8000e20:	f001 fd24 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fa0d 	bl	8001248 <UART_Transmit>
            return 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e071      	b.n	8000f16 <I2C_WriteByte+0x162>
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {
 8000e32:	4b3d      	ldr	r3, [pc, #244]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <I2C_WriteByte+0x94>
 8000e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e3      	bne.n	8000e10 <I2C_WriteByte+0x5c>
        }
    }
    I2C1->DR = (addr << 1); // Gửi địa chỉ
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4a37      	ldr	r2, [pc, #220]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000e50:	e010      	b.n	8000e74 <I2C_WriteByte+0xc0>
        if (timeout == 0) {
 8000e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10d      	bne.n	8000e74 <I2C_WriteByte+0xc0>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C Addr timeout\r\n", context);
 8000e58:	f107 000c 	add.w	r0, r7, #12
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4a34      	ldr	r2, [pc, #208]	@ (8000f30 <I2C_WriteByte+0x17c>)
 8000e60:	2120      	movs	r1, #32
 8000e62:	f001 fd03 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f9ec 	bl	8001248 <UART_Transmit>
            return 3;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e050      	b.n	8000f16 <I2C_WriteByte+0x162>
    while (!(I2C1->SR1 & I2C_SR1_ADDR) && timeout--) {
 8000e74:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <I2C_WriteByte+0xd6>
 8000e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e3      	bne.n	8000e52 <I2C_WriteByte+0x9e>
        }
    }
    (void)I2C1->SR2; // Xóa cờ ADDR
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000e8e:	e010      	b.n	8000eb2 <I2C_WriteByte+0xfe>
        if (timeout == 0) {
 8000e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10d      	bne.n	8000eb2 <I2C_WriteByte+0xfe>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C TXE timeout\r\n", context);
 8000e96:	f107 000c 	add.w	r0, r7, #12
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4a25      	ldr	r2, [pc, #148]	@ (8000f34 <I2C_WriteByte+0x180>)
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	f001 fce4 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9cd 	bl	8001248 <UART_Transmit>
            return 4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e031      	b.n	8000f16 <I2C_WriteByte+0x162>
    while (!(I2C1->SR1 & I2C_SR1_TXE) && timeout--) {
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <I2C_WriteByte+0x114>
 8000ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e3      	bne.n	8000e90 <I2C_WriteByte+0xdc>
        }
    }
    I2C1->DR = data; // Gửi dữ liệu
 8000ec8:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 8000ece:	e010      	b.n	8000ef2 <I2C_WriteByte+0x13e>
        if (timeout == 0) {
 8000ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <I2C_WriteByte+0x13e>
            snprintf(debug_buf, sizeof(debug_buf), "%s I2C BTF timeout\r\n", context);
 8000ed6:	f107 000c 	add.w	r0, r7, #12
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	4a16      	ldr	r2, [pc, #88]	@ (8000f38 <I2C_WriteByte+0x184>)
 8000ede:	2120      	movs	r1, #32
 8000ee0:	f001 fcc4 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f9ad 	bl	8001248 <UART_Transmit>
            return 5;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e011      	b.n	8000f16 <I2C_WriteByte+0x162>
    while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d104      	bne.n	8000f08 <I2C_WriteByte+0x154>
 8000efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1e3      	bne.n	8000ed0 <I2C_WriteByte+0x11c>
        }
    }
    I2C1->CR1 |= I2C_CR1_STOP; // Phát stop
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <I2C_WriteByte+0x174>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f12:	6013      	str	r3, [r2, #0]
    return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3730      	adds	r7, #48	@ 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	000186a0 	.word	0x000186a0
 8000f24:	08004b08 	.word	0x08004b08
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	08004b18 	.word	0x08004b18
 8000f30:	08004b30 	.word	0x08004b30
 8000f34:	08004b48 	.word	0x08004b48
 8000f38:	08004b60 	.word	0x08004b60

08000f3c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    uint8_t data_u = (cmd & 0xF0);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	74fb      	strb	r3, [r7, #19]
    uint8_t data_l = ((cmd << 4) & 0xF0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = { data_u | 0x0C, data_u | 0x08, data_l | 0x0C, data_l | 0x08 };
 8000f54:	7cfb      	ldrb	r3, [r7, #19]
 8000f56:	f043 030c 	orr.w	r3, r3, #12
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	733b      	strb	r3, [r7, #12]
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	737b      	strb	r3, [r7, #13]
 8000f68:	7cbb      	ldrb	r3, [r7, #18]
 8000f6a:	f043 030c 	orr.w	r3, r3, #12
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	73bb      	strb	r3, [r7, #14]
 8000f72:	7cbb      	ldrb	r3, [r7, #18]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00f      	b.n	8000fa2 <LCD_SendCommand+0x66>
        I2C_WriteByte(LCD_I2C_ADDR, data_t[i], "CMD");
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <LCD_SendCommand+0x78>)
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2027      	movs	r0, #39	@ 0x27
 8000f92:	f7ff ff0f 	bl	8000db4 <I2C_WriteByte>
        delay_us(50);
 8000f96:	2032      	movs	r0, #50	@ 0x32
 8000f98:	f7ff fe46 	bl	8000c28 <delay_us>
    for (int i = 0; i < 4; i++) {
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	ddec      	ble.n	8000f82 <LCD_SendCommand+0x46>
    }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08004b78 	.word	0x08004b78

08000fb8 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    uint8_t data_u = (data & 0xF0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f023 030f 	bic.w	r3, r3, #15
 8000fc8:	74fb      	strb	r3, [r7, #19]
    uint8_t data_l = ((data << 4) & 0xF0);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = { data_u | 0x0D, data_u | 0x09, data_l | 0x0D, data_l | 0x09 };
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	f043 030d 	orr.w	r3, r3, #13
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	733b      	strb	r3, [r7, #12]
 8000fda:	7cfb      	ldrb	r3, [r7, #19]
 8000fdc:	f043 0309 	orr.w	r3, r3, #9
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	737b      	strb	r3, [r7, #13]
 8000fe4:	7cbb      	ldrb	r3, [r7, #18]
 8000fe6:	f043 030d 	orr.w	r3, r3, #13
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	7cbb      	ldrb	r3, [r7, #18]
 8000ff0:	f043 0309 	orr.w	r3, r3, #9
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00f      	b.n	800101e <LCD_SendData+0x66>
        I2C_WriteByte(LCD_I2C_ADDR, data_t[i], "DATA");
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <LCD_SendData+0x78>)
 800100a:	4619      	mov	r1, r3
 800100c:	2027      	movs	r0, #39	@ 0x27
 800100e:	f7ff fed1 	bl	8000db4 <I2C_WriteByte>
        delay_us(50);
 8001012:	2032      	movs	r0, #50	@ 0x32
 8001014:	f7ff fe08 	bl	8000c28 <delay_us>
    for (int i = 0; i < 4; i++) {
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b03      	cmp	r3, #3
 8001022:	ddec      	ble.n	8000ffe <LCD_SendData+0x46>
    }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08004b7c 	.word	0x08004b7c

08001034 <LCD_Init>:

uint8_t LCD_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
    char debug_buf[32];
    uint8_t retry = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while (retry--) {
 8001040:	e048      	b.n	80010d4 <LCD_Init+0xa0>
        delay_ms(50);
 8001042:	2032      	movs	r0, #50	@ 0x32
 8001044:	f7ff fdd6 	bl	8000bf4 <delay_ms>
        if (I2C_WriteByte(LCD_I2C_ADDR, 0x00, "INIT") == 0) {
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <LCD_Init+0xcc>)
 800104a:	2100      	movs	r1, #0
 800104c:	2027      	movs	r0, #39	@ 0x27
 800104e:	f7ff feb1 	bl	8000db4 <I2C_WriteByte>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d12f      	bne.n	80010b8 <LCD_Init+0x84>
            LCD_SendCommand(0x33); // Khởi tạo 4-bit
 8001058:	2033      	movs	r0, #51	@ 0x33
 800105a:	f7ff ff6f 	bl	8000f3c <LCD_SendCommand>
            delay_ms(5);
 800105e:	2005      	movs	r0, #5
 8001060:	f7ff fdc8 	bl	8000bf4 <delay_ms>
            LCD_SendCommand(0x32);
 8001064:	2032      	movs	r0, #50	@ 0x32
 8001066:	f7ff ff69 	bl	8000f3c <LCD_SendCommand>
            delay_us(50);
 800106a:	2032      	movs	r0, #50	@ 0x32
 800106c:	f7ff fddc 	bl	8000c28 <delay_us>
            LCD_SendCommand(0x28); // 4-bit, 2 dòng
 8001070:	2028      	movs	r0, #40	@ 0x28
 8001072:	f7ff ff63 	bl	8000f3c <LCD_SendCommand>
            delay_us(50);
 8001076:	2032      	movs	r0, #50	@ 0x32
 8001078:	f7ff fdd6 	bl	8000c28 <delay_us>
            LCD_SendCommand(0x0C); // Bật hiển thị, không con trỏ
 800107c:	200c      	movs	r0, #12
 800107e:	f7ff ff5d 	bl	8000f3c <LCD_SendCommand>
            delay_us(50);
 8001082:	2032      	movs	r0, #50	@ 0x32
 8001084:	f7ff fdd0 	bl	8000c28 <delay_us>
            LCD_SendCommand(0x06); // Chế độ nhập
 8001088:	2006      	movs	r0, #6
 800108a:	f7ff ff57 	bl	8000f3c <LCD_SendCommand>
            delay_us(50);
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f7ff fdca 	bl	8000c28 <delay_us>
            LCD_SendCommand(0x01); // Xóa màn hình
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff51 	bl	8000f3c <LCD_SendCommand>
            delay_ms(2);
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff fdaa 	bl	8000bf4 <delay_ms>
            snprintf(debug_buf, sizeof(debug_buf), "LCD Init OK\r\n");
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <LCD_Init+0xd0>)
 80010a4:	2120      	movs	r1, #32
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fbe0 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f8ca 	bl	8001248 <UART_Transmit>
            return 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e01f      	b.n	80010f8 <LCD_Init+0xc4>
        }
        snprintf(debug_buf, sizeof(debug_buf), "LCD Init Retry %d\r\n", retry);
 80010b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010bc:	1d38      	adds	r0, r7, #4
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <LCD_Init+0xd4>)
 80010c0:	2120      	movs	r1, #32
 80010c2:	f001 fbd3 	bl	800286c <sniprintf>
        UART_Transmit(debug_buf);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f8bd 	bl	8001248 <UART_Transmit>
        delay_ms(50);
 80010ce:	2032      	movs	r0, #50	@ 0x32
 80010d0:	f7ff fd90 	bl	8000bf4 <delay_ms>
    while (retry--) {
 80010d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010d8:	1e5a      	subs	r2, r3, #1
 80010da:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1af      	bne.n	8001042 <LCD_Init+0xe>
    }
    snprintf(debug_buf, sizeof(debug_buf), "LCD Init Failed\r\n");
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4a09      	ldr	r2, [pc, #36]	@ (800110c <LCD_Init+0xd8>)
 80010e6:	2120      	movs	r1, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fbbf 	bl	800286c <sniprintf>
    UART_Transmit(debug_buf);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f8a9 	bl	8001248 <UART_Transmit>
    return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08004b84 	.word	0x08004b84
 8001104:	08004b8c 	.word	0x08004b8c
 8001108:	08004b9c 	.word	0x08004b9c
 800110c:	08004bb0 	.word	0x08004bb0

08001110 <LCD_SendString>:

void LCD_SendString(char *str) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    char debug_buf[32];
    snprintf(debug_buf, sizeof(debug_buf), "LCD Send: %s\r\n", str);
 8001118:	f107 0008 	add.w	r0, r7, #8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <LCD_SendString+0x48>)
 8001120:	2120      	movs	r1, #32
 8001122:	f001 fba3 	bl	800286c <sniprintf>
    UART_Transmit(debug_buf);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f88c 	bl	8001248 <UART_Transmit>
    while (*str && *str != '\0') LCD_SendData(*str++);
 8001130:	e006      	b.n	8001140 <LCD_SendString+0x30>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff3c 	bl	8000fb8 <LCD_SendData>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <LCD_SendString+0x40>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f0      	bne.n	8001132 <LCD_SendString+0x22>
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	@ 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	08004bc4 	.word	0x08004bc4

0800115c <ADC_Config>:

// === Cấu hình ADC1 cho PA0 ===
void ADC_Config(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    // Bật clock cho ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <ADC_Config+0x40>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <ADC_Config+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Cấu hình ADC
    ADC1->CR2 = 0;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <ADC_Config+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = MQ2_CHANNEL; // Kênh 0
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <ADC_Config+0x44>)
 8001174:	2200      	movs	r2, #0
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << (MQ2_CHANNEL * 3)); // 480 chu kỳ
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <ADC_Config+0x44>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <ADC_Config+0x44>)
 800117e:	f043 0307 	orr.w	r3, r3, #7
 8001182:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON; // Bật ADC
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <ADC_Config+0x44>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <ADC_Config+0x44>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6093      	str	r3, [r2, #8]
    delay_us(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f7ff fd49 	bl	8000c28 <delay_us>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40012000 	.word	0x40012000

080011a4 <ADC_Read>:

uint16_t ADC_Read(void) {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART; // Bắt đầu chuyển đổi
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <ADC_Read+0x30>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <ADC_Read+0x30>)
 80011ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80011b2:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC)); // Chờ hoàn tất
 80011b4:	bf00      	nop
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <ADC_Read+0x30>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <ADC_Read+0x12>
    return ADC1->DR;
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <ADC_Read+0x30>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	b29b      	uxth	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40012000 	.word	0x40012000

080011d8 <UART_Config>:

// === Cấu hình UART2 (PA2 - TX, PA3 - RX) ===
void UART_Config(void) {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    // Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <UART_Config+0x64>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a16      	ldr	r2, [pc, #88]	@ (800123c <UART_Config+0x64>)
 80011e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <UART_Config+0x64>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a13      	ldr	r2, [pc, #76]	@ (800123c <UART_Config+0x64>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA2 (TX), PA3 (RX) - Alternate function
    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <UART_Config+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <UART_Config+0x68>)
 80011fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80011fe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2 << (2 * 2)) | (2 << (3 * 2)));
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <UART_Config+0x68>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <UART_Config+0x68>)
 8001206:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800120a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= ((7 << (2 * 4)) | (7 << (3 * 4))); // AF7
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <UART_Config+0x68>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <UART_Config+0x68>)
 8001212:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001216:	6213      	str	r3, [r2, #32]
    // Baud rate 115200
    USART2->BRR = 84000000 / 115200; // Clock 84MHz
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <UART_Config+0x6c>)
 800121a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800121e:	609a      	str	r2, [r3, #8]
    // Bật UART, TX, RX
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <UART_Config+0x6c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <UART_Config+0x6c>)
 8001226:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800122a:	f043 030c 	orr.w	r3, r3, #12
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40004400 	.word	0x40004400

08001248 <UART_Transmit>:

void UART_Transmit(char *data) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    while (*data && *data != '\0') {
 8001250:	e00c      	b.n	800126c <UART_Transmit+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Chờ TXE
 8001252:	bf00      	nop
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <UART_Transmit+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f9      	beq.n	8001254 <UART_Transmit+0xc>
        USART2->DR = *data++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <UART_Transmit+0x40>)
 800126a:	605a      	str	r2, [r3, #4]
    while (*data && *data != '\0') {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <UART_Transmit+0x34>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ea      	bne.n	8001252 <UART_Transmit+0xa>
    }
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40004400 	.word	0x40004400

0800128c <LED_Set>:

// === Điều khiển LED ===
void LED_Set(uint8_t r, uint8_t y, uint8_t b, uint8_t g) {
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b09f      	sub	sp, #124	@ 0x7c
 8001290:	af08      	add	r7, sp, #32
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	4603      	mov	r3, r0
 80012a0:	71bb      	strb	r3, [r7, #6]
 80012a2:	460b      	mov	r3, r1
 80012a4:	717b      	strb	r3, [r7, #5]
 80012a6:	4613      	mov	r3, r2
 80012a8:	713b      	strb	r3, [r7, #4]
    if (LED_CATHODE_COMMON) {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << LED_BLUE_PIN)) | (b << LED_BLUE_PIN);
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <LED_Set+0xb0>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	4921      	ldr	r1, [pc, #132]	@ (800133c <LED_Set+0xb0>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	614b      	str	r3, [r1, #20]
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <LED_Set+0xb4>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012c4:	f023 0303 	bic.w	r3, r3, #3
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	0052      	lsls	r2, r2, #1
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 80012cc:	431a      	orrs	r2, r3
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	793b      	ldrb	r3, [r7, #4]
 80012d4:	029b      	lsls	r3, r3, #10
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 80012d6:	491a      	ldr	r1, [pc, #104]	@ (8001340 <LED_Set+0xb4>)
                     (r << LED_RED_PIN) | (y << LED_YELLOW_PIN) | (g << LED_GREEN_PIN);
 80012d8:	4313      	orrs	r3, r2
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
 80012da:	614b      	str	r3, [r1, #20]
        GPIOA->ODR = (GPIOA->ODR & ~(1 << LED_BLUE_PIN)) | ((b ? 0 : 1) << LED_BLUE_PIN);
        GPIOB->ODR = (GPIOB->ODR & ~((1 << LED_RED_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_GREEN_PIN))) |
                     ((r ? 0 : 1) << LED_RED_PIN) | ((y ? 0 : 1) << LED_YELLOW_PIN) | ((g ? 0 : 1) << LED_GREEN_PIN);
    }
    char debug_buf[80];
    snprintf(debug_buf, sizeof(debug_buf), "LED Set: R=%u, Y=%u, B=%u, G=%u, ODR: PA7=%lu, PB0=%lu, PB1=%lu, PB10=%lu\r\n",
 80012dc:	f897 e007 	ldrb.w	lr, [r7, #7]
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	797a      	ldrb	r2, [r7, #5]
 80012e4:	7939      	ldrb	r1, [r7, #4]
             r, y, b, g,
             (GPIOA->ODR >> LED_BLUE_PIN) & 1,
 80012e6:	4815      	ldr	r0, [pc, #84]	@ (800133c <LED_Set+0xb0>)
 80012e8:	6940      	ldr	r0, [r0, #20]
 80012ea:	09c0      	lsrs	r0, r0, #7
    snprintf(debug_buf, sizeof(debug_buf), "LED Set: R=%u, Y=%u, B=%u, G=%u, ODR: PA7=%lu, PB0=%lu, PB1=%lu, PB10=%lu\r\n",
 80012ec:	f000 0001 	and.w	r0, r0, #1
             (GPIOB->ODR >> LED_YELLOW_PIN) & 1,
 80012f0:	4c13      	ldr	r4, [pc, #76]	@ (8001340 <LED_Set+0xb4>)
 80012f2:	6964      	ldr	r4, [r4, #20]
    snprintf(debug_buf, sizeof(debug_buf), "LED Set: R=%u, Y=%u, B=%u, G=%u, ODR: PA7=%lu, PB0=%lu, PB1=%lu, PB10=%lu\r\n",
 80012f4:	f004 0401 	and.w	r4, r4, #1
             (GPIOB->ODR >> LED_RED_PIN) & 1,
 80012f8:	4d11      	ldr	r5, [pc, #68]	@ (8001340 <LED_Set+0xb4>)
 80012fa:	696d      	ldr	r5, [r5, #20]
 80012fc:	086d      	lsrs	r5, r5, #1
    snprintf(debug_buf, sizeof(debug_buf), "LED Set: R=%u, Y=%u, B=%u, G=%u, ODR: PA7=%lu, PB0=%lu, PB1=%lu, PB10=%lu\r\n",
 80012fe:	f005 0501 	and.w	r5, r5, #1
             (GPIOB->ODR >> LED_GREEN_PIN) & 1);
 8001302:	4e0f      	ldr	r6, [pc, #60]	@ (8001340 <LED_Set+0xb4>)
 8001304:	6976      	ldr	r6, [r6, #20]
 8001306:	0ab6      	lsrs	r6, r6, #10
    snprintf(debug_buf, sizeof(debug_buf), "LED Set: R=%u, Y=%u, B=%u, G=%u, ODR: PA7=%lu, PB0=%lu, PB1=%lu, PB10=%lu\r\n",
 8001308:	f006 0601 	and.w	r6, r6, #1
 800130c:	f107 0c08 	add.w	ip, r7, #8
 8001310:	9606      	str	r6, [sp, #24]
 8001312:	9505      	str	r5, [sp, #20]
 8001314:	9404      	str	r4, [sp, #16]
 8001316:	9003      	str	r0, [sp, #12]
 8001318:	9102      	str	r1, [sp, #8]
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4673      	mov	r3, lr
 8001320:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <LED_Set+0xb8>)
 8001322:	2150      	movs	r1, #80	@ 0x50
 8001324:	4660      	mov	r0, ip
 8001326:	f001 faa1 	bl	800286c <sniprintf>
    UART_Transmit(debug_buf);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff8a 	bl	8001248 <UART_Transmit>
}
 8001334:	bf00      	nop
 8001336:	375c      	adds	r7, #92	@ 0x5c
 8001338:	46bd      	mov	sp, r7
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	08004bd4 	.word	0x08004bd4

08001348 <Buzzer_Set>:

// === Điều khiển Buzzer ===
void Buzzer_Set(uint8_t state) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	@ 0x30
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    if (BUZZER_ACTIVE_HIGH) {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << BUZZER_PIN)) | (state << BUZZER_PIN);
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <Buzzer_Set+0x4c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <Buzzer_Set+0x4c>)
 8001360:	4313      	orrs	r3, r2
 8001362:	614b      	str	r3, [r1, #20]
    } else {
        GPIOA->ODR = (GPIOA->ODR & ~(1 << BUZZER_PIN)) | ((state ? 0 : 1) << BUZZER_PIN);
    }
    char debug_buf[32];
    snprintf(debug_buf, sizeof(debug_buf), "Buzzer: %u, PA6=%lu\r\n", state, (GPIOA->ODR >> BUZZER_PIN) & 1);
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <Buzzer_Set+0x4c>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	099b      	lsrs	r3, r3, #6
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	f107 0008 	add.w	r0, r7, #8
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4613      	mov	r3, r2
 8001378:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <Buzzer_Set+0x50>)
 800137a:	2120      	movs	r1, #32
 800137c:	f001 fa76 	bl	800286c <sniprintf>
    UART_Transmit(debug_buf);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <UART_Transmit>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020000 	.word	0x40020000
 8001398:	08004c20 	.word	0x08004c20

0800139c <TIM2_Config>:

// === Cấu hình TIM2 (nhấp nháy, tần số thay đổi) ===
void TIM2_Config(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    // Bật clock cho TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <TIM2_Config+0x50>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <TIM2_Config+0x50>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6413      	str	r3, [r2, #64]	@ 0x40
    // Prescaler = 8400 - 1, ARR sẽ được cập nhật động
    TIM2->PSC = 8399;
 80013ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999; // Mặc định 1Hz (500ms chu kỳ)
 80013b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013be:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE; // Bật ngắt update
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN; // Bật timer
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 80013e0:	201c      	movs	r0, #28
 80013e2:	f7ff fbe9 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <TIM2_UpdateFrequency>:

// === Cập nhật tần số TIM2 dựa trên PPM ===
void TIM2_UpdateFrequency(float ppm) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	@ 0x40
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Tần số: 2Hz (PPM=800) đến 10Hz (PPM=2000)
    float freq;
    if (ppm >= 2000) {
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80014b8 <TIM2_UpdateFrequency+0xc8>
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	db02      	blt.n	8001412 <TIM2_UpdateFrequency+0x22>
        freq = 10.0f; // 10Hz
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <TIM2_UpdateFrequency+0xcc>)
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001410:	e020      	b.n	8001454 <TIM2_UpdateFrequency+0x64>
    } else if (ppm <= 800) {
 8001412:	edd7 7a01 	vldr	s15, [r7, #4]
 8001416:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80014c0 <TIM2_UpdateFrequency+0xd0>
 800141a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d803      	bhi.n	800142c <TIM2_UpdateFrequency+0x3c>
        freq = 2.0f; // 2Hz
 8001424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142a:	e013      	b.n	8001454 <TIM2_UpdateFrequency+0x64>
    } else {
        // Ánh xạ tuyến tính: 800->2Hz, 2000->10Hz
        freq = 2.0f + (ppm - 800.0f) * (10.0f - 2.0f) / (2000.0f - 800.0f);
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001430:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80014c0 <TIM2_UpdateFrequency+0xd0>
 8001434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001438:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800143c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001440:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014c4 <TIM2_UpdateFrequency+0xd4>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800144c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001450:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }
    // Tính ARR: t = (ARR + 1) * (PSC + 1) / 84MHz
    // Chu kỳ t = 1 / (2 * freq) (vì nhấp nháy cần bật/tắt)
    uint32_t arr = (uint32_t)((84000000.0f / (2.0f * freq * 8400.0f)) - 1);
 8001454:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001458:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800145c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80014c8 <TIM2_UpdateFrequency+0xd8>
 8001460:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001464:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80014cc <TIM2_UpdateFrequency+0xdc>
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001478:	ee17 3a90 	vmov	r3, s15
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TIM2->ARR = arr;
 800147e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001484:	62d3      	str	r3, [r2, #44]	@ 0x2c
    char debug_buf[32];
    snprintf(debug_buf, sizeof(debug_buf), "TIM2: Freq=%.2fHz, ARR=%lu\r\n", freq, arr);
 8001486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001488:	f7ff f866 	bl	8000558 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	f107 0008 	add.w	r0, r7, #8
 8001494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001496:	9102      	str	r1, [sp, #8]
 8001498:	e9cd 2300 	strd	r2, r3, [sp]
 800149c:	4a0c      	ldr	r2, [pc, #48]	@ (80014d0 <TIM2_UpdateFrequency+0xe0>)
 800149e:	2120      	movs	r1, #32
 80014a0:	f001 f9e4 	bl	800286c <sniprintf>
    UART_Transmit(debug_buf);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fecd 	bl	8001248 <UART_Transmit>
}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	@ 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	44fa0000 	.word	0x44fa0000
 80014bc:	41200000 	.word	0x41200000
 80014c0:	44480000 	.word	0x44480000
 80014c4:	44960000 	.word	0x44960000
 80014c8:	46034000 	.word	0x46034000
 80014cc:	4ca037a0 	.word	0x4ca037a0
 80014d0:	08004c38 	.word	0x08004c38

080014d4 <TIM2_IRQHandler>:

// === Xử lý ngắt TIM2 ===
void TIM2_IRQHandler(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80014da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01e      	beq.n	8001526 <TIM2_IRQHandler+0x52>
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6113      	str	r3, [r2, #16]
        tim2_blink_state = !tim2_blink_state; // Đảo trạng thái
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <TIM2_IRQHandler+0x5c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <TIM2_IRQHandler+0x5c>)
 800150c:	701a      	strb	r2, [r3, #0]
        char debug_buf[32];
        snprintf(debug_buf, sizeof(debug_buf), "TIM2: Blink=%u\r\n", tim2_blink_state);
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <TIM2_IRQHandler+0x5c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4638      	mov	r0, r7
 8001516:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <TIM2_IRQHandler+0x60>)
 8001518:	2120      	movs	r1, #32
 800151a:	f001 f9a7 	bl	800286c <sniprintf>
        UART_Transmit(debug_buf);
 800151e:	463b      	mov	r3, r7
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe91 	bl	8001248 <UART_Transmit>
    }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001f0 	.word	0x200001f0
 8001534:	08004c58 	.word	0x08004c58

08001538 <MQ2_GetPPM>:

// === Tính PPM cho MQ-2 ===
float MQ2_GetPPM(uint16_t adc_value) {
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
    float voltage = (adc_value / 4096.0f) * 3.3f; // Điện áp 3.3V
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80015ac <MQ2_GetPPM+0x74>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80015b0 <MQ2_GetPPM+0x78>
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]
    float k = 500.0f; // Ánh xạ 0-3.3V -> 0-990ppm
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MQ2_GetPPM+0x7c>)
 8001562:	60fb      	str	r3, [r7, #12]
    float c = 0.0f;
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
    float ppm = k * voltage + c;
 800156a:	ed97 7a03 	vldr	s14, [r7, #12]
 800156e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	ed97 7a02 	vldr	s14, [r7, #8]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (ppm < 0) ppm = 0;
 8001582:	edd7 7a05 	vldr	s15, [r7, #20]
 8001586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d502      	bpl.n	8001596 <MQ2_GetPPM+0x5e>
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
    return ppm;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
}
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	45800000 	.word	0x45800000
 80015b0:	40533333 	.word	0x40533333
 80015b4:	43fa0000 	.word	0x43fa0000

080015b8 <SysTick_Initialize>:

// === Cấu hình SysTick (1ms) ===
void SysTick_Initialize(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    SysTick->LOAD = 84000000 / 1000 - 1; // 1ms (84MHz)
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <SysTick_Initialize+0x24>)
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <SysTick_Initialize+0x28>)
 80015c0:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SysTick_Initialize+0x24>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <SysTick_Initialize+0x24>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(SysTick_IRQn);
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295
 80015d2:	f7ff faf1 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010
 80015e0:	0001481f 	.word	0x0001481f

080015e4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
    tick_count++;
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <SysTick_Handler+0x18>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a03      	ldr	r2, [pc, #12]	@ (80015fc <SysTick_Handler+0x18>)
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	200001ec 	.word	0x200001ec

08001600 <main>:

// === Main ===
int main(void) {
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b0af      	sub	sp, #188	@ 0xbc
 8001604:	af06      	add	r7, sp, #24
    // Cấu hình
    GPIO_Config();
 8001606:	f7ff fb27 	bl	8000c58 <GPIO_Config>
    ADC_Config();
 800160a:	f7ff fda7 	bl	800115c <ADC_Config>
    I2C_Config();
 800160e:	f7ff fb87 	bl	8000d20 <I2C_Config>
    UART_Config();
 8001612:	f7ff fde1 	bl	80011d8 <UART_Config>
    TIM2_Config();
 8001616:	f7ff fec1 	bl	800139c <TIM2_Config>
    SysTick_Initialize();
 800161a:	f7ff ffcd 	bl	80015b8 <SysTick_Initialize>

    // Khởi tạo LCD
    if (LCD_Init()) {
 800161e:	f7ff fd09 	bl	8001034 <LCD_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <main+0x3c>
        char debug_buf[32];
        snprintf(debug_buf, sizeof(debug_buf), "Try LCD_I2C_ADDR 0x3F\r\n");
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4aa7      	ldr	r2, [pc, #668]	@ (80018c8 <main+0x2c8>)
 800162c:	2120      	movs	r1, #32
 800162e:	4618      	mov	r0, r3
 8001630:	f001 f91c 	bl	800286c <sniprintf>
        UART_Transmit(debug_buf);
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe06 	bl	8001248 <UART_Transmit>
    }

    // Test LED
    LED_Set(1, 0, 0, 0); // Đỏ
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff fe22 	bl	800128c <LED_Set>
    delay_ms(100);
 8001648:	2064      	movs	r0, #100	@ 0x64
 800164a:	f7ff fad3 	bl	8000bf4 <delay_ms>
    LED_Set(0, 0, 0, 1); // Xanh lá
 800164e:	2301      	movs	r3, #1
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fe19 	bl	800128c <LED_Set>
    delay_ms(100);
 800165a:	2064      	movs	r0, #100	@ 0x64
 800165c:	f7ff faca 	bl	8000bf4 <delay_ms>
    LED_Set(0, 1, 0, 0); // Vàng
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	2101      	movs	r1, #1
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fe10 	bl	800128c <LED_Set>
    delay_ms(100);
 800166c:	2064      	movs	r0, #100	@ 0x64
 800166e:	f7ff fac1 	bl	8000bf4 <delay_ms>
    LED_Set(0, 0, 1, 0); // Xanh dương
 8001672:	2300      	movs	r3, #0
 8001674:	2201      	movs	r2, #1
 8001676:	2100      	movs	r1, #0
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fe07 	bl	800128c <LED_Set>
    delay_ms(100);
 800167e:	2064      	movs	r0, #100	@ 0x64
 8001680:	f7ff fab8 	bl	8000bf4 <delay_ms>
    LED_Set(0, 0, 0, 0); // Tắt
 8001684:	2300      	movs	r3, #0
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fdfe 	bl	800128c <LED_Set>

    // Hiển thị khởi động LCD
    LCD_SendCommand(0x01); // Xóa màn
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fc53 	bl	8000f3c <LCD_SendCommand>
    LCD_SendCommand(0x80); // Dòng 1
 8001696:	2080      	movs	r0, #128	@ 0x80
 8001698:	f7ff fc50 	bl	8000f3c <LCD_SendCommand>
    LCD_SendString("Gas Detector");
 800169c:	488b      	ldr	r0, [pc, #556]	@ (80018cc <main+0x2cc>)
 800169e:	f7ff fd37 	bl	8001110 <LCD_SendString>
    LCD_SendCommand(0xC0); // Dòng 2
 80016a2:	20c0      	movs	r0, #192	@ 0xc0
 80016a4:	f7ff fc4a 	bl	8000f3c <LCD_SendCommand>
    LCD_SendString("Starting...");
 80016a8:	4889      	ldr	r0, [pc, #548]	@ (80018d0 <main+0x2d0>)
 80016aa:	f7ff fd31 	bl	8001110 <LCD_SendString>
    delay_ms(1000);
 80016ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b2:	f7ff fa9f 	bl	8000bf4 <delay_ms>

    // Hiển thị giao diện chính
    LCD_SendCommand(0x01); // Xóa màn
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fc40 	bl	8000f3c <LCD_SendCommand>
    LCD_SendCommand(0x80); // Dòng 1
 80016bc:	2080      	movs	r0, #128	@ 0x80
 80016be:	f7ff fc3d 	bl	8000f3c <LCD_SendCommand>
    LCD_SendString("PPM:----");
 80016c2:	4884      	ldr	r0, [pc, #528]	@ (80018d4 <main+0x2d4>)
 80016c4:	f7ff fd24 	bl	8001110 <LCD_SendString>
    LCD_SendCommand(0xC0); // Dòng 2
 80016c8:	20c0      	movs	r0, #192	@ 0xc0
 80016ca:	f7ff fc37 	bl	8000f3c <LCD_SendCommand>
    LCD_SendString("SYS:ON Alert:-");
 80016ce:	4882      	ldr	r0, [pc, #520]	@ (80018d8 <main+0x2d8>)
 80016d0:	f7ff fd1e 	bl	8001110 <LCD_SendString>
    delay_ms(50);
 80016d4:	2032      	movs	r0, #50	@ 0x32
 80016d6:	f7ff fa8d 	bl	8000bf4 <delay_ms>

    char lcd_buf[17];
    char debug_buf[80];
    uint8_t last_system_state = system_state;
 80016da:	4b80      	ldr	r3, [pc, #512]	@ (80018dc <main+0x2dc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    uint8_t last_alert_state = 255; // Ép cập nhật lần đầu
 80016e2:	23ff      	movs	r3, #255	@ 0xff
 80016e4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    uint32_t last_ppm = 0xFFFFFFFF; // Ép cập nhật lần đầu
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint32_t last_transmit = 0; // Thời gian gửi UART
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    while (1) {
        // Đọc trạng thái nút nhấn
        static uint8_t last_sw1 = 1, last_sw2 = 1;
        uint8_t sw1 = (GPIOC->IDR & (1 << SW1_PIN)) ? 1 : 0;
 80016f6:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <main+0x2e0>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        uint8_t sw2 = (GPIOC->IDR & (1 << SW2_PIN)) ? 1 : 0;
 800170c:	4b74      	ldr	r3, [pc, #464]	@ (80018e0 <main+0x2e0>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92

        // SW1: Bật/tắt hệ thống
        if (last_sw1 && !sw1) {
 8001722:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <main+0x2e4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01a      	beq.n	8001760 <main+0x160>
 800172a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <main+0x160>
            system_state = !system_state;
 8001732:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <main+0x2dc>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf0c      	ite	eq
 800173a:	2301      	moveq	r3, #1
 800173c:	2300      	movne	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <main+0x2dc>)
 8001744:	701a      	strb	r2, [r3, #0]
            snprintf(debug_buf, sizeof(debug_buf), "SW1 Pressed: System State=%u\r\n", system_state);
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <main+0x2dc>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800174e:	4a66      	ldr	r2, [pc, #408]	@ (80018e8 <main+0x2e8>)
 8001750:	2150      	movs	r1, #80	@ 0x50
 8001752:	f001 f88b 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fd74 	bl	8001248 <UART_Transmit>
        }
        last_sw1 = sw1;
 8001760:	4a60      	ldr	r2, [pc, #384]	@ (80018e4 <main+0x2e4>)
 8001762:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001766:	7013      	strb	r3, [r2, #0]

        // SW2: Reset hệ thống
        if (last_sw2 && !sw2) {
 8001768:	4b60      	ldr	r3, [pc, #384]	@ (80018ec <main+0x2ec>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05c      	beq.n	800182a <main+0x22a>
 8001770:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001774:	2b00      	cmp	r3, #0
 8001776:	d158      	bne.n	800182a <main+0x22a>
            system_state = 1;
 8001778:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <main+0x2dc>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
            alert_state = 0;
 800177e:	4b5c      	ldr	r3, [pc, #368]	@ (80018f0 <main+0x2f0>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
            tim2_blink_state = 0;
 8001784:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <main+0x2f4>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
            LED_Set(0, 0, 0, 0); // Tắt LED
 800178a:	2300      	movs	r3, #0
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fd7b 	bl	800128c <LED_Set>
            GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8001796:	4b58      	ldr	r3, [pc, #352]	@ (80018f8 <main+0x2f8>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a57      	ldr	r2, [pc, #348]	@ (80018f8 <main+0x2f8>)
 800179c:	f023 0320 	bic.w	r3, r3, #32
 80017a0:	6153      	str	r3, [r2, #20]
            Buzzer_Set(0); // Buzzer OFF
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fdd0 	bl	8001348 <Buzzer_Set>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 80017a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6013      	str	r3, [r2, #0]
            LCD_SendCommand(0x01); // Xóa màn
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fbbf 	bl	8000f3c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Dòng 1
 80017be:	2080      	movs	r0, #128	@ 0x80
 80017c0:	f7ff fbbc 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("Gas Detector");
 80017c4:	4841      	ldr	r0, [pc, #260]	@ (80018cc <main+0x2cc>)
 80017c6:	f7ff fca3 	bl	8001110 <LCD_SendString>
            LCD_SendCommand(0xC0); // Dòng 2
 80017ca:	20c0      	movs	r0, #192	@ 0xc0
 80017cc:	f7ff fbb6 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("Starting...");
 80017d0:	483f      	ldr	r0, [pc, #252]	@ (80018d0 <main+0x2d0>)
 80017d2:	f7ff fc9d 	bl	8001110 <LCD_SendString>
            snprintf(debug_buf, sizeof(debug_buf), "SW2 Pressed: System Reset\r\n");
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	4a48      	ldr	r2, [pc, #288]	@ (80018fc <main+0x2fc>)
 80017dc:	2150      	movs	r1, #80	@ 0x50
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f844 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 80017e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fd2d 	bl	8001248 <UART_Transmit>
            delay_ms(1000);
 80017ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f2:	f7ff f9ff 	bl	8000bf4 <delay_ms>
            LCD_SendCommand(0x01); // Xóa màn
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fba0 	bl	8000f3c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Dòng 1
 80017fc:	2080      	movs	r0, #128	@ 0x80
 80017fe:	f7ff fb9d 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("PPM:----");
 8001802:	4834      	ldr	r0, [pc, #208]	@ (80018d4 <main+0x2d4>)
 8001804:	f7ff fc84 	bl	8001110 <LCD_SendString>
            LCD_SendCommand(0xC0); // Dòng 2
 8001808:	20c0      	movs	r0, #192	@ 0xc0
 800180a:	f7ff fb97 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("SYS:ON Alert:-");
 800180e:	4832      	ldr	r0, [pc, #200]	@ (80018d8 <main+0x2d8>)
 8001810:	f7ff fc7e 	bl	8001110 <LCD_SendString>
            last_system_state = system_state;
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <main+0x2dc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            last_alert_state = 255;
 800181c:	23ff      	movs	r3, #255	@ 0xff
 800181e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            last_ppm = 0xFFFFFFFF;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }
        last_sw2 = sw2;
 800182a:	4a30      	ldr	r2, [pc, #192]	@ (80018ec <main+0x2ec>)
 800182c:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001830:	7013      	strb	r3, [r2, #0]

        // Hệ thống tắt
        if (!system_state) {
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <main+0x2dc>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d168      	bne.n	800190c <main+0x30c>
            if (last_system_state != system_state) {
 800183a:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <main+0x2dc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001842:	429a      	cmp	r2, r3
 8001844:	d03c      	beq.n	80018c0 <main+0x2c0>
                LED_Set(0, 0, 0, 1); // Xanh lá
 8001846:	2301      	movs	r3, #1
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fd1d 	bl	800128c <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <main+0x2f8>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <main+0x2f8>)
 8001858:	f023 0320 	bic.w	r3, r3, #32
 800185c:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fd72 	bl	8001348 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 8001864:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]
                LCD_SendCommand(0x01); // Xóa màn
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fb61 	bl	8000f3c <LCD_SendCommand>
                LCD_SendCommand(0x80); // Dòng 1
 800187a:	2080      	movs	r0, #128	@ 0x80
 800187c:	f7ff fb5e 	bl	8000f3c <LCD_SendCommand>
                LCD_SendString("SYS:OFF");
 8001880:	481f      	ldr	r0, [pc, #124]	@ (8001900 <main+0x300>)
 8001882:	f7ff fc45 	bl	8001110 <LCD_SendString>
                LCD_SendCommand(0xC0); // Dòng 2
 8001886:	20c0      	movs	r0, #192	@ 0xc0
 8001888:	f7ff fb58 	bl	8000f3c <LCD_SendCommand>
                LCD_SendString("PPM:--- Alert:0");
 800188c:	481d      	ldr	r0, [pc, #116]	@ (8001904 <main+0x304>)
 800188e:	f7ff fc3f 	bl	8001110 <LCD_SendString>
                snprintf(debug_buf, sizeof(debug_buf), "System: OFF, PPM: ---\r\n");
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <main+0x308>)
 8001898:	2150      	movs	r1, #80	@ 0x50
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ffe6 	bl	800286c <sniprintf>
                UART_Transmit(debug_buf);
 80018a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fccf 	bl	8001248 <UART_Transmit>
                last_system_state = system_state;
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <main+0x2dc>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
                last_alert_state = 255;
 80018b2:	23ff      	movs	r3, #255	@ 0xff
 80018b4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
                last_ppm = 0xFFFFFFFF;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            }
            delay_ms(50);
 80018c0:	2032      	movs	r0, #50	@ 0x32
 80018c2:	f7ff f997 	bl	8000bf4 <delay_ms>
            continue;
 80018c6:	e16d      	b.n	8001ba4 <main+0x5a4>
 80018c8:	08004c6c 	.word	0x08004c6c
 80018cc:	08004c84 	.word	0x08004c84
 80018d0:	08004c94 	.word	0x08004c94
 80018d4:	08004ca0 	.word	0x08004ca0
 80018d8:	08004cac 	.word	0x08004cac
 80018dc:	20000000 	.word	0x20000000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000001 	.word	0x20000001
 80018e8:	08004cbc 	.word	0x08004cbc
 80018ec:	20000002 	.word	0x20000002
 80018f0:	200001e8 	.word	0x200001e8
 80018f4:	200001f0 	.word	0x200001f0
 80018f8:	40020000 	.word	0x40020000
 80018fc:	08004cdc 	.word	0x08004cdc
 8001900:	08004cf8 	.word	0x08004cf8
 8001904:	08004d00 	.word	0x08004d00
 8001908:	08004d10 	.word	0x08004d10
        }

        // Cập nhật trạng thái hệ thống
        if (last_system_state != system_state) {
 800190c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ba8 <main+0x5a8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001914:	429a      	cmp	r2, r3
 8001916:	d019      	beq.n	800194c <main+0x34c>
            LCD_SendCommand(0x01); // Xóa màn
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fb0f 	bl	8000f3c <LCD_SendCommand>
            LCD_SendCommand(0x80); // Dòng 1
 800191e:	2080      	movs	r0, #128	@ 0x80
 8001920:	f7ff fb0c 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("PPM:----");
 8001924:	48a1      	ldr	r0, [pc, #644]	@ (8001bac <main+0x5ac>)
 8001926:	f7ff fbf3 	bl	8001110 <LCD_SendString>
            LCD_SendCommand(0xC0); // Dòng 2
 800192a:	20c0      	movs	r0, #192	@ 0xc0
 800192c:	f7ff fb06 	bl	8000f3c <LCD_SendCommand>
            LCD_SendString("SYS:ON Alert:-");
 8001930:	489f      	ldr	r0, [pc, #636]	@ (8001bb0 <main+0x5b0>)
 8001932:	f7ff fbed 	bl	8001110 <LCD_SendString>
            last_system_state = system_state;
 8001936:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba8 <main+0x5a8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            last_alert_state = 255;
 800193e:	23ff      	movs	r3, #255	@ 0xff
 8001940:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            last_ppm = 0xFFFFFFFF;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }

        // Đọc và tính PPM
        uint16_t adc_val = ADC_Read();
 800194c:	f7ff fc2a 	bl	80011a4 <ADC_Read>
 8001950:	4603      	mov	r3, r0
 8001952:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
        float ppm = MQ2_GetPPM(adc_val);
 8001956:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fdec 	bl	8001538 <MQ2_GetPPM>
 8001960:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
        uint32_t ppm_int = (uint32_t)ppm;
 8001964:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196c:	ee17 3a90 	vmov	r3, s15
 8001970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        // Gửi dữ liệu qua UART mỗi 500ms
        if (tick_count - last_transmit >= 500) {
 8001974:	4b8f      	ldr	r3, [pc, #572]	@ (8001bb4 <main+0x5b4>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001982:	d332      	bcc.n	80019ea <main+0x3ea>
            snprintf(debug_buf, sizeof(debug_buf), "ADC: %u, V: %.2f, PPM: %.0f, Alert: %d\r\n",
 8001984:	f8b7 6090 	ldrh.w	r6, [r7, #144]	@ 0x90
                     adc_val, (adc_val / 4096.0f) * 3.3f, ppm, alert_state);
 8001988:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001bb8 <main+0x5b8>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001bbc <main+0x5bc>
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
            snprintf(debug_buf, sizeof(debug_buf), "ADC: %u, V: %.2f, PPM: %.0f, Alert: %d\r\n",
 80019a4:	ee17 0a90 	vmov	r0, s15
 80019a8:	f7fe fdd6 	bl	8000558 <__aeabi_f2d>
 80019ac:	4604      	mov	r4, r0
 80019ae:	460d      	mov	r5, r1
 80019b0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4980      	ldr	r1, [pc, #512]	@ (8001bc0 <main+0x5c0>)
 80019be:	7809      	ldrb	r1, [r1, #0]
 80019c0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019c4:	9104      	str	r1, [sp, #16]
 80019c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019ca:	e9cd 4500 	strd	r4, r5, [sp]
 80019ce:	4633      	mov	r3, r6
 80019d0:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc4 <main+0x5c4>)
 80019d2:	2150      	movs	r1, #80	@ 0x50
 80019d4:	f000 ff4a 	bl	800286c <sniprintf>
            UART_Transmit(debug_buf);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fc33 	bl	8001248 <UART_Transmit>
            last_transmit = tick_count;
 80019e2:	4b74      	ldr	r3, [pc, #464]	@ (8001bb4 <main+0x5b4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        // Xác định trạng thái cảnh báo
        if (ppm > 980) alert_state = 3; // Nguy hiểm
 80019ea:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80019ee:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001bc8 <main+0x5c8>
 80019f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd03      	ble.n	8001a04 <main+0x404>
 80019fc:	4b70      	ldr	r3, [pc, #448]	@ (8001bc0 <main+0x5c0>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e01c      	b.n	8001a3e <main+0x43e>
        else if (ppm > 500) alert_state = 2; // Cao
 8001a04:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001a08:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001bcc <main+0x5cc>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	dd03      	ble.n	8001a1e <main+0x41e>
 8001a16:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <main+0x5c0>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e00f      	b.n	8001a3e <main+0x43e>
        else if (ppm > 300) alert_state = 1; // Thấp
 8001a1e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001a22:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001bd0 <main+0x5d0>
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dd03      	ble.n	8001a38 <main+0x438>
 8001a30:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <main+0x5c0>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e002      	b.n	8001a3e <main+0x43e>
        else alert_state = 0; // Bình thường
 8001a38:	4b61      	ldr	r3, [pc, #388]	@ (8001bc0 <main+0x5c0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

        // Cập nhật PPM trên LCD
        if (ppm_int != last_ppm) {
 8001a3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d013      	beq.n	8001a72 <main+0x472>
            LCD_SendCommand(0x80 + 4); // Sau "PPM:"
 8001a4a:	2084      	movs	r0, #132	@ 0x84
 8001a4c:	f7ff fa76 	bl	8000f3c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "%4lu", ppm_int);
 8001a50:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a58:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd4 <main+0x5d4>)
 8001a5a:	2111      	movs	r1, #17
 8001a5c:	f000 ff06 	bl	800286c <sniprintf>
            LCD_SendString(lcd_buf);
 8001a60:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb53 	bl	8001110 <LCD_SendString>
            last_ppm = ppm_int;
 8001a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }

        // Cập nhật Alert trên LCD
        if (last_alert_state != alert_state) {
 8001a72:	4b53      	ldr	r3, [pc, #332]	@ (8001bc0 <main+0x5c0>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d013      	beq.n	8001aa6 <main+0x4a6>
            LCD_SendCommand(0xC0 + 13); // Sau "Alert:"
 8001a7e:	20cd      	movs	r0, #205	@ 0xcd
 8001a80:	f7ff fa5c 	bl	8000f3c <LCD_SendCommand>
            snprintf(lcd_buf, sizeof(lcd_buf), "%d", alert_state);
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <main+0x5c0>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001a8c:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <main+0x5d8>)
 8001a8e:	2111      	movs	r1, #17
 8001a90:	f000 feec 	bl	800286c <sniprintf>
            LCD_SendString(lcd_buf);
 8001a94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb39 	bl	8001110 <LCD_SendString>
            last_alert_state = alert_state;
 8001a9e:	4b48      	ldr	r3, [pc, #288]	@ (8001bc0 <main+0x5c0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
        }

        // Điều khiển LED, Relay, Buzzer
        switch (alert_state) {
 8001aa6:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <main+0x5c0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d877      	bhi.n	8001b9e <main+0x59e>
 8001aae:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <main+0x4b4>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001af5 	.word	0x08001af5
 8001abc:	08001b25 	.word	0x08001b25
 8001ac0:	08001b63 	.word	0x08001b63
            case 0: // Bình thường
                LED_Set(0, 0, 1, 0); // Xanh dương
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fbde 	bl	800128c <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8001ad0:	4b42      	ldr	r3, [pc, #264]	@ (8001bdc <main+0x5dc>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4a41      	ldr	r2, [pc, #260]	@ (8001bdc <main+0x5dc>)
 8001ad6:	f023 0320 	bic.w	r3, r3, #32
 8001ada:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fc33 	bl	8001348 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 8001ae2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
                break;
 8001af2:	e054      	b.n	8001b9e <main+0x59e>
            case 1: // Thấp
                LED_Set(0, 1, 0, 0); // Vàng
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	2101      	movs	r1, #1
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fbc6 	bl	800128c <LED_Set>
                GPIOA->ODR &= ~(1 << RELAY_PIN); // Relay OFF
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <main+0x5dc>)
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	4a35      	ldr	r2, [pc, #212]	@ (8001bdc <main+0x5dc>)
 8001b06:	f023 0320 	bic.w	r3, r3, #32
 8001b0a:	6153      	str	r3, [r2, #20]
                Buzzer_Set(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fc1b 	bl	8001348 <Buzzer_Set>
                TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt TIM2
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
                break;
 8001b22:	e03c      	b.n	8001b9e <main+0x59e>
            case 2: // Cao (500 < PPM ≤ 800)
                TIM2->CR1 |= TIM_CR1_CEN; // Bật TIM2
 8001b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
                TIM2->ARR = 999; // 1Hz (500ms chu kỳ)
 8001b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
                LED_Set(tim2_blink_state, 0, 0, 0); // Đỏ nhấp nháy
 8001b3e:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <main+0x5e0>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2d8      	uxtb	r0, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f7ff fb9f 	bl	800128c <LED_Set>
                GPIOA->ODR |= (1 << RELAY_PIN); // Relay ON
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <main+0x5dc>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <main+0x5dc>)
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	6153      	str	r3, [r2, #20]
                Buzzer_Set(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff fbf4 	bl	8001348 <Buzzer_Set>
                break;
 8001b60:	e01d      	b.n	8001b9e <main+0x59e>
            case 3: // Nguy hiểm (PPM > 800)
                TIM2->CR1 |= TIM_CR1_CEN; // Bật TIM2
 8001b62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]
                TIM2_UpdateFrequency(ppm); // Cập nhật tần số dựa trên PPM
 8001b72:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 8001b76:	f7ff fc3b 	bl	80013f0 <TIM2_UpdateFrequency>
                LED_Set(tim2_blink_state, 0, 0, 0); // Đỏ nhấp nháy
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <main+0x5e0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2d8      	uxtb	r0, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	f7ff fb81 	bl	800128c <LED_Set>
                GPIOA->ODR |= (1 << RELAY_PIN); // Relay ON
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <main+0x5dc>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <main+0x5dc>)
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	6153      	str	r3, [r2, #20]
                Buzzer_Set(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fbd6 	bl	8001348 <Buzzer_Set>
                break;
 8001b9c:	bf00      	nop
        }

        delay_ms(50);
 8001b9e:	2032      	movs	r0, #50	@ 0x32
 8001ba0:	f7ff f828 	bl	8000bf4 <delay_ms>
    while (1) {
 8001ba4:	e5a7      	b.n	80016f6 <main+0xf6>
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	08004ca0 	.word	0x08004ca0
 8001bb0:	08004cac 	.word	0x08004cac
 8001bb4:	200001ec 	.word	0x200001ec
 8001bb8:	45800000 	.word	0x45800000
 8001bbc:	40533333 	.word	0x40533333
 8001bc0:	200001e8 	.word	0x200001e8
 8001bc4:	08004d28 	.word	0x08004d28
 8001bc8:	44750000 	.word	0x44750000
 8001bcc:	43fa0000 	.word	0x43fa0000
 8001bd0:	43960000 	.word	0x43960000
 8001bd4:	08004d54 	.word	0x08004d54
 8001bd8:	08004d5c 	.word	0x08004d5c
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	200001f0 	.word	0x200001f0

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_kill>:

int _kill(int pid, int sig)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c50:	f000 fed6 	bl	8002a00 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2216      	movs	r2, #22
 8001c58:	601a      	str	r2, [r3, #0]
  return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_exit>:

void _exit (int status)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffe7 	bl	8001c46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
  }

  return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
  }
  return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f000 fe3a 	bl	8002a00 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20018000 	.word	0x20018000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	200001f4 	.word	0x200001f4
 8001dc0:	20000348 	.word	0x20000348

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f000 fdf9 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff fbf1 	bl	8001600 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001e2c:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 8001e30:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001e34:	20000344 	.word	0x20000344

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>

08001e3a <__cvt>:
 8001e3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e3e:	ec57 6b10 	vmov	r6, r7, d0
 8001e42:	2f00      	cmp	r7, #0
 8001e44:	460c      	mov	r4, r1
 8001e46:	4619      	mov	r1, r3
 8001e48:	463b      	mov	r3, r7
 8001e4a:	bfbb      	ittet	lt
 8001e4c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001e50:	461f      	movlt	r7, r3
 8001e52:	2300      	movge	r3, #0
 8001e54:	232d      	movlt	r3, #45	@ 0x2d
 8001e56:	700b      	strb	r3, [r1, #0]
 8001e58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001e5a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001e5e:	4691      	mov	r9, r2
 8001e60:	f023 0820 	bic.w	r8, r3, #32
 8001e64:	bfbc      	itt	lt
 8001e66:	4632      	movlt	r2, r6
 8001e68:	4616      	movlt	r6, r2
 8001e6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001e6e:	d005      	beq.n	8001e7c <__cvt+0x42>
 8001e70:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001e74:	d100      	bne.n	8001e78 <__cvt+0x3e>
 8001e76:	3401      	adds	r4, #1
 8001e78:	2102      	movs	r1, #2
 8001e7a:	e000      	b.n	8001e7e <__cvt+0x44>
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	ab03      	add	r3, sp, #12
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	ab02      	add	r3, sp, #8
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	ec47 6b10 	vmov	d0, r6, r7
 8001e8a:	4653      	mov	r3, sl
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	f000 fe6f 	bl	8002b70 <_dtoa_r>
 8001e92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001e96:	4605      	mov	r5, r0
 8001e98:	d119      	bne.n	8001ece <__cvt+0x94>
 8001e9a:	f019 0f01 	tst.w	r9, #1
 8001e9e:	d00e      	beq.n	8001ebe <__cvt+0x84>
 8001ea0:	eb00 0904 	add.w	r9, r0, r4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	4639      	mov	r1, r7
 8001eac:	f7fe fe14 	bl	8000ad8 <__aeabi_dcmpeq>
 8001eb0:	b108      	cbz	r0, 8001eb6 <__cvt+0x7c>
 8001eb2:	f8cd 900c 	str.w	r9, [sp, #12]
 8001eb6:	2230      	movs	r2, #48	@ 0x30
 8001eb8:	9b03      	ldr	r3, [sp, #12]
 8001eba:	454b      	cmp	r3, r9
 8001ebc:	d31e      	bcc.n	8001efc <__cvt+0xc2>
 8001ebe:	9b03      	ldr	r3, [sp, #12]
 8001ec0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001ec2:	1b5b      	subs	r3, r3, r5
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	b004      	add	sp, #16
 8001eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ece:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001ed2:	eb00 0904 	add.w	r9, r0, r4
 8001ed6:	d1e5      	bne.n	8001ea4 <__cvt+0x6a>
 8001ed8:	7803      	ldrb	r3, [r0, #0]
 8001eda:	2b30      	cmp	r3, #48	@ 0x30
 8001edc:	d10a      	bne.n	8001ef4 <__cvt+0xba>
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	4639      	mov	r1, r7
 8001ee6:	f7fe fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8001eea:	b918      	cbnz	r0, 8001ef4 <__cvt+0xba>
 8001eec:	f1c4 0401 	rsb	r4, r4, #1
 8001ef0:	f8ca 4000 	str.w	r4, [sl]
 8001ef4:	f8da 3000 	ldr.w	r3, [sl]
 8001ef8:	4499      	add	r9, r3
 8001efa:	e7d3      	b.n	8001ea4 <__cvt+0x6a>
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	9103      	str	r1, [sp, #12]
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e7d9      	b.n	8001eb8 <__cvt+0x7e>

08001f04 <__exponent>:
 8001f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f06:	2900      	cmp	r1, #0
 8001f08:	bfba      	itte	lt
 8001f0a:	4249      	neglt	r1, r1
 8001f0c:	232d      	movlt	r3, #45	@ 0x2d
 8001f0e:	232b      	movge	r3, #43	@ 0x2b
 8001f10:	2909      	cmp	r1, #9
 8001f12:	7002      	strb	r2, [r0, #0]
 8001f14:	7043      	strb	r3, [r0, #1]
 8001f16:	dd29      	ble.n	8001f6c <__exponent+0x68>
 8001f18:	f10d 0307 	add.w	r3, sp, #7
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	270a      	movs	r7, #10
 8001f20:	461a      	mov	r2, r3
 8001f22:	fbb1 f6f7 	udiv	r6, r1, r7
 8001f26:	fb07 1416 	mls	r4, r7, r6, r1
 8001f2a:	3430      	adds	r4, #48	@ 0x30
 8001f2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001f30:	460c      	mov	r4, r1
 8001f32:	2c63      	cmp	r4, #99	@ 0x63
 8001f34:	f103 33ff 	add.w	r3, r3, #4294967295
 8001f38:	4631      	mov	r1, r6
 8001f3a:	dcf1      	bgt.n	8001f20 <__exponent+0x1c>
 8001f3c:	3130      	adds	r1, #48	@ 0x30
 8001f3e:	1e94      	subs	r4, r2, #2
 8001f40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001f44:	1c41      	adds	r1, r0, #1
 8001f46:	4623      	mov	r3, r4
 8001f48:	42ab      	cmp	r3, r5
 8001f4a:	d30a      	bcc.n	8001f62 <__exponent+0x5e>
 8001f4c:	f10d 0309 	add.w	r3, sp, #9
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	42ac      	cmp	r4, r5
 8001f54:	bf88      	it	hi
 8001f56:	2300      	movhi	r3, #0
 8001f58:	3302      	adds	r3, #2
 8001f5a:	4403      	add	r3, r0
 8001f5c:	1a18      	subs	r0, r3, r0
 8001f5e:	b003      	add	sp, #12
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001f66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001f6a:	e7ed      	b.n	8001f48 <__exponent+0x44>
 8001f6c:	2330      	movs	r3, #48	@ 0x30
 8001f6e:	3130      	adds	r1, #48	@ 0x30
 8001f70:	7083      	strb	r3, [r0, #2]
 8001f72:	70c1      	strb	r1, [r0, #3]
 8001f74:	1d03      	adds	r3, r0, #4
 8001f76:	e7f1      	b.n	8001f5c <__exponent+0x58>

08001f78 <_printf_float>:
 8001f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7c:	b08d      	sub	sp, #52	@ 0x34
 8001f7e:	460c      	mov	r4, r1
 8001f80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001f84:	4616      	mov	r6, r2
 8001f86:	461f      	mov	r7, r3
 8001f88:	4605      	mov	r5, r0
 8001f8a:	f000 fcef 	bl	800296c <_localeconv_r>
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f974 	bl	8000280 <strlen>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8001f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8001fa0:	9005      	str	r0, [sp, #20]
 8001fa2:	3307      	adds	r3, #7
 8001fa4:	f023 0307 	bic.w	r3, r3, #7
 8001fa8:	f103 0208 	add.w	r2, r3, #8
 8001fac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001fb0:	f8d4 b000 	ldr.w	fp, [r4]
 8001fb4:	f8c8 2000 	str.w	r2, [r8]
 8001fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001fbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001fc0:	9307      	str	r3, [sp, #28]
 8001fc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8001fc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001fce:	4b9c      	ldr	r3, [pc, #624]	@ (8002240 <_printf_float+0x2c8>)
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	f7fe fdb2 	bl	8000b3c <__aeabi_dcmpun>
 8001fd8:	bb70      	cbnz	r0, 8002038 <_printf_float+0xc0>
 8001fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001fde:	4b98      	ldr	r3, [pc, #608]	@ (8002240 <_printf_float+0x2c8>)
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	f7fe fd8c 	bl	8000b00 <__aeabi_dcmple>
 8001fe8:	bb30      	cbnz	r0, 8002038 <_printf_float+0xc0>
 8001fea:	2200      	movs	r2, #0
 8001fec:	2300      	movs	r3, #0
 8001fee:	4640      	mov	r0, r8
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	f7fe fd7b 	bl	8000aec <__aeabi_dcmplt>
 8001ff6:	b110      	cbz	r0, 8001ffe <_printf_float+0x86>
 8001ff8:	232d      	movs	r3, #45	@ 0x2d
 8001ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ffe:	4a91      	ldr	r2, [pc, #580]	@ (8002244 <_printf_float+0x2cc>)
 8002000:	4b91      	ldr	r3, [pc, #580]	@ (8002248 <_printf_float+0x2d0>)
 8002002:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002006:	bf94      	ite	ls
 8002008:	4690      	movls	r8, r2
 800200a:	4698      	movhi	r8, r3
 800200c:	2303      	movs	r3, #3
 800200e:	6123      	str	r3, [r4, #16]
 8002010:	f02b 0304 	bic.w	r3, fp, #4
 8002014:	6023      	str	r3, [r4, #0]
 8002016:	f04f 0900 	mov.w	r9, #0
 800201a:	9700      	str	r7, [sp, #0]
 800201c:	4633      	mov	r3, r6
 800201e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002020:	4621      	mov	r1, r4
 8002022:	4628      	mov	r0, r5
 8002024:	f000 f9d2 	bl	80023cc <_printf_common>
 8002028:	3001      	adds	r0, #1
 800202a:	f040 808d 	bne.w	8002148 <_printf_float+0x1d0>
 800202e:	f04f 30ff 	mov.w	r0, #4294967295
 8002032:	b00d      	add	sp, #52	@ 0x34
 8002034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002038:	4642      	mov	r2, r8
 800203a:	464b      	mov	r3, r9
 800203c:	4640      	mov	r0, r8
 800203e:	4649      	mov	r1, r9
 8002040:	f7fe fd7c 	bl	8000b3c <__aeabi_dcmpun>
 8002044:	b140      	cbz	r0, 8002058 <_printf_float+0xe0>
 8002046:	464b      	mov	r3, r9
 8002048:	2b00      	cmp	r3, #0
 800204a:	bfbc      	itt	lt
 800204c:	232d      	movlt	r3, #45	@ 0x2d
 800204e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002052:	4a7e      	ldr	r2, [pc, #504]	@ (800224c <_printf_float+0x2d4>)
 8002054:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <_printf_float+0x2d8>)
 8002056:	e7d4      	b.n	8002002 <_printf_float+0x8a>
 8002058:	6863      	ldr	r3, [r4, #4]
 800205a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800205e:	9206      	str	r2, [sp, #24]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	d13b      	bne.n	80020dc <_printf_float+0x164>
 8002064:	2306      	movs	r3, #6
 8002066:	6063      	str	r3, [r4, #4]
 8002068:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800206c:	2300      	movs	r3, #0
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	ab0a      	add	r3, sp, #40	@ 0x28
 8002074:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002078:	ab09      	add	r3, sp, #36	@ 0x24
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	6861      	ldr	r1, [r4, #4]
 800207e:	ec49 8b10 	vmov	d0, r8, r9
 8002082:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002086:	4628      	mov	r0, r5
 8002088:	f7ff fed7 	bl	8001e3a <__cvt>
 800208c:	9b06      	ldr	r3, [sp, #24]
 800208e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002090:	2b47      	cmp	r3, #71	@ 0x47
 8002092:	4680      	mov	r8, r0
 8002094:	d129      	bne.n	80020ea <_printf_float+0x172>
 8002096:	1cc8      	adds	r0, r1, #3
 8002098:	db02      	blt.n	80020a0 <_printf_float+0x128>
 800209a:	6863      	ldr	r3, [r4, #4]
 800209c:	4299      	cmp	r1, r3
 800209e:	dd41      	ble.n	8002124 <_printf_float+0x1ac>
 80020a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80020a4:	fa5f fa8a 	uxtb.w	sl, sl
 80020a8:	3901      	subs	r1, #1
 80020aa:	4652      	mov	r2, sl
 80020ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80020b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80020b2:	f7ff ff27 	bl	8001f04 <__exponent>
 80020b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80020b8:	1813      	adds	r3, r2, r0
 80020ba:	2a01      	cmp	r2, #1
 80020bc:	4681      	mov	r9, r0
 80020be:	6123      	str	r3, [r4, #16]
 80020c0:	dc02      	bgt.n	80020c8 <_printf_float+0x150>
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	07d2      	lsls	r2, r2, #31
 80020c6:	d501      	bpl.n	80020cc <_printf_float+0x154>
 80020c8:	3301      	adds	r3, #1
 80020ca:	6123      	str	r3, [r4, #16]
 80020cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0a2      	beq.n	800201a <_printf_float+0xa2>
 80020d4:	232d      	movs	r3, #45	@ 0x2d
 80020d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020da:	e79e      	b.n	800201a <_printf_float+0xa2>
 80020dc:	9a06      	ldr	r2, [sp, #24]
 80020de:	2a47      	cmp	r2, #71	@ 0x47
 80020e0:	d1c2      	bne.n	8002068 <_printf_float+0xf0>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1c0      	bne.n	8002068 <_printf_float+0xf0>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e7bd      	b.n	8002066 <_printf_float+0xee>
 80020ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80020ee:	d9db      	bls.n	80020a8 <_printf_float+0x130>
 80020f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80020f4:	d118      	bne.n	8002128 <_printf_float+0x1b0>
 80020f6:	2900      	cmp	r1, #0
 80020f8:	6863      	ldr	r3, [r4, #4]
 80020fa:	dd0b      	ble.n	8002114 <_printf_float+0x19c>
 80020fc:	6121      	str	r1, [r4, #16]
 80020fe:	b913      	cbnz	r3, 8002106 <_printf_float+0x18e>
 8002100:	6822      	ldr	r2, [r4, #0]
 8002102:	07d0      	lsls	r0, r2, #31
 8002104:	d502      	bpl.n	800210c <_printf_float+0x194>
 8002106:	3301      	adds	r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	6123      	str	r3, [r4, #16]
 800210c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800210e:	f04f 0900 	mov.w	r9, #0
 8002112:	e7db      	b.n	80020cc <_printf_float+0x154>
 8002114:	b913      	cbnz	r3, 800211c <_printf_float+0x1a4>
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	07d2      	lsls	r2, r2, #31
 800211a:	d501      	bpl.n	8002120 <_printf_float+0x1a8>
 800211c:	3302      	adds	r3, #2
 800211e:	e7f4      	b.n	800210a <_printf_float+0x192>
 8002120:	2301      	movs	r3, #1
 8002122:	e7f2      	b.n	800210a <_printf_float+0x192>
 8002124:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800212a:	4299      	cmp	r1, r3
 800212c:	db05      	blt.n	800213a <_printf_float+0x1c2>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	6121      	str	r1, [r4, #16]
 8002132:	07d8      	lsls	r0, r3, #31
 8002134:	d5ea      	bpl.n	800210c <_printf_float+0x194>
 8002136:	1c4b      	adds	r3, r1, #1
 8002138:	e7e7      	b.n	800210a <_printf_float+0x192>
 800213a:	2900      	cmp	r1, #0
 800213c:	bfd4      	ite	le
 800213e:	f1c1 0202 	rsble	r2, r1, #2
 8002142:	2201      	movgt	r2, #1
 8002144:	4413      	add	r3, r2
 8002146:	e7e0      	b.n	800210a <_printf_float+0x192>
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	055a      	lsls	r2, r3, #21
 800214c:	d407      	bmi.n	800215e <_printf_float+0x1e6>
 800214e:	6923      	ldr	r3, [r4, #16]
 8002150:	4642      	mov	r2, r8
 8002152:	4631      	mov	r1, r6
 8002154:	4628      	mov	r0, r5
 8002156:	47b8      	blx	r7
 8002158:	3001      	adds	r0, #1
 800215a:	d12b      	bne.n	80021b4 <_printf_float+0x23c>
 800215c:	e767      	b.n	800202e <_printf_float+0xb6>
 800215e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002162:	f240 80dd 	bls.w	8002320 <_printf_float+0x3a8>
 8002166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800216a:	2200      	movs	r2, #0
 800216c:	2300      	movs	r3, #0
 800216e:	f7fe fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002172:	2800      	cmp	r0, #0
 8002174:	d033      	beq.n	80021de <_printf_float+0x266>
 8002176:	4a37      	ldr	r2, [pc, #220]	@ (8002254 <_printf_float+0x2dc>)
 8002178:	2301      	movs	r3, #1
 800217a:	4631      	mov	r1, r6
 800217c:	4628      	mov	r0, r5
 800217e:	47b8      	blx	r7
 8002180:	3001      	adds	r0, #1
 8002182:	f43f af54 	beq.w	800202e <_printf_float+0xb6>
 8002186:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800218a:	4543      	cmp	r3, r8
 800218c:	db02      	blt.n	8002194 <_printf_float+0x21c>
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	07d8      	lsls	r0, r3, #31
 8002192:	d50f      	bpl.n	80021b4 <_printf_float+0x23c>
 8002194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002198:	4631      	mov	r1, r6
 800219a:	4628      	mov	r0, r5
 800219c:	47b8      	blx	r7
 800219e:	3001      	adds	r0, #1
 80021a0:	f43f af45 	beq.w	800202e <_printf_float+0xb6>
 80021a4:	f04f 0900 	mov.w	r9, #0
 80021a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80021ac:	f104 0a1a 	add.w	sl, r4, #26
 80021b0:	45c8      	cmp	r8, r9
 80021b2:	dc09      	bgt.n	80021c8 <_printf_float+0x250>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	079b      	lsls	r3, r3, #30
 80021b8:	f100 8103 	bmi.w	80023c2 <_printf_float+0x44a>
 80021bc:	68e0      	ldr	r0, [r4, #12]
 80021be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80021c0:	4298      	cmp	r0, r3
 80021c2:	bfb8      	it	lt
 80021c4:	4618      	movlt	r0, r3
 80021c6:	e734      	b.n	8002032 <_printf_float+0xba>
 80021c8:	2301      	movs	r3, #1
 80021ca:	4652      	mov	r2, sl
 80021cc:	4631      	mov	r1, r6
 80021ce:	4628      	mov	r0, r5
 80021d0:	47b8      	blx	r7
 80021d2:	3001      	adds	r0, #1
 80021d4:	f43f af2b 	beq.w	800202e <_printf_float+0xb6>
 80021d8:	f109 0901 	add.w	r9, r9, #1
 80021dc:	e7e8      	b.n	80021b0 <_printf_float+0x238>
 80021de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dc39      	bgt.n	8002258 <_printf_float+0x2e0>
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <_printf_float+0x2dc>)
 80021e6:	2301      	movs	r3, #1
 80021e8:	4631      	mov	r1, r6
 80021ea:	4628      	mov	r0, r5
 80021ec:	47b8      	blx	r7
 80021ee:	3001      	adds	r0, #1
 80021f0:	f43f af1d 	beq.w	800202e <_printf_float+0xb6>
 80021f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80021f8:	ea59 0303 	orrs.w	r3, r9, r3
 80021fc:	d102      	bne.n	8002204 <_printf_float+0x28c>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	07d9      	lsls	r1, r3, #31
 8002202:	d5d7      	bpl.n	80021b4 <_printf_float+0x23c>
 8002204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002208:	4631      	mov	r1, r6
 800220a:	4628      	mov	r0, r5
 800220c:	47b8      	blx	r7
 800220e:	3001      	adds	r0, #1
 8002210:	f43f af0d 	beq.w	800202e <_printf_float+0xb6>
 8002214:	f04f 0a00 	mov.w	sl, #0
 8002218:	f104 0b1a 	add.w	fp, r4, #26
 800221c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800221e:	425b      	negs	r3, r3
 8002220:	4553      	cmp	r3, sl
 8002222:	dc01      	bgt.n	8002228 <_printf_float+0x2b0>
 8002224:	464b      	mov	r3, r9
 8002226:	e793      	b.n	8002150 <_printf_float+0x1d8>
 8002228:	2301      	movs	r3, #1
 800222a:	465a      	mov	r2, fp
 800222c:	4631      	mov	r1, r6
 800222e:	4628      	mov	r0, r5
 8002230:	47b8      	blx	r7
 8002232:	3001      	adds	r0, #1
 8002234:	f43f aefb 	beq.w	800202e <_printf_float+0xb6>
 8002238:	f10a 0a01 	add.w	sl, sl, #1
 800223c:	e7ee      	b.n	800221c <_printf_float+0x2a4>
 800223e:	bf00      	nop
 8002240:	7fefffff 	.word	0x7fefffff
 8002244:	08004d5f 	.word	0x08004d5f
 8002248:	08004d63 	.word	0x08004d63
 800224c:	08004d67 	.word	0x08004d67
 8002250:	08004d6b 	.word	0x08004d6b
 8002254:	08004d6f 	.word	0x08004d6f
 8002258:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800225a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800225e:	4553      	cmp	r3, sl
 8002260:	bfa8      	it	ge
 8002262:	4653      	movge	r3, sl
 8002264:	2b00      	cmp	r3, #0
 8002266:	4699      	mov	r9, r3
 8002268:	dc36      	bgt.n	80022d8 <_printf_float+0x360>
 800226a:	f04f 0b00 	mov.w	fp, #0
 800226e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002272:	f104 021a 	add.w	r2, r4, #26
 8002276:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002278:	9306      	str	r3, [sp, #24]
 800227a:	eba3 0309 	sub.w	r3, r3, r9
 800227e:	455b      	cmp	r3, fp
 8002280:	dc31      	bgt.n	80022e6 <_printf_float+0x36e>
 8002282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002284:	459a      	cmp	sl, r3
 8002286:	dc3a      	bgt.n	80022fe <_printf_float+0x386>
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	07da      	lsls	r2, r3, #31
 800228c:	d437      	bmi.n	80022fe <_printf_float+0x386>
 800228e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002290:	ebaa 0903 	sub.w	r9, sl, r3
 8002294:	9b06      	ldr	r3, [sp, #24]
 8002296:	ebaa 0303 	sub.w	r3, sl, r3
 800229a:	4599      	cmp	r9, r3
 800229c:	bfa8      	it	ge
 800229e:	4699      	movge	r9, r3
 80022a0:	f1b9 0f00 	cmp.w	r9, #0
 80022a4:	dc33      	bgt.n	800230e <_printf_float+0x396>
 80022a6:	f04f 0800 	mov.w	r8, #0
 80022aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022ae:	f104 0b1a 	add.w	fp, r4, #26
 80022b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022b4:	ebaa 0303 	sub.w	r3, sl, r3
 80022b8:	eba3 0309 	sub.w	r3, r3, r9
 80022bc:	4543      	cmp	r3, r8
 80022be:	f77f af79 	ble.w	80021b4 <_printf_float+0x23c>
 80022c2:	2301      	movs	r3, #1
 80022c4:	465a      	mov	r2, fp
 80022c6:	4631      	mov	r1, r6
 80022c8:	4628      	mov	r0, r5
 80022ca:	47b8      	blx	r7
 80022cc:	3001      	adds	r0, #1
 80022ce:	f43f aeae 	beq.w	800202e <_printf_float+0xb6>
 80022d2:	f108 0801 	add.w	r8, r8, #1
 80022d6:	e7ec      	b.n	80022b2 <_printf_float+0x33a>
 80022d8:	4642      	mov	r2, r8
 80022da:	4631      	mov	r1, r6
 80022dc:	4628      	mov	r0, r5
 80022de:	47b8      	blx	r7
 80022e0:	3001      	adds	r0, #1
 80022e2:	d1c2      	bne.n	800226a <_printf_float+0x2f2>
 80022e4:	e6a3      	b.n	800202e <_printf_float+0xb6>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4631      	mov	r1, r6
 80022ea:	4628      	mov	r0, r5
 80022ec:	9206      	str	r2, [sp, #24]
 80022ee:	47b8      	blx	r7
 80022f0:	3001      	adds	r0, #1
 80022f2:	f43f ae9c 	beq.w	800202e <_printf_float+0xb6>
 80022f6:	9a06      	ldr	r2, [sp, #24]
 80022f8:	f10b 0b01 	add.w	fp, fp, #1
 80022fc:	e7bb      	b.n	8002276 <_printf_float+0x2fe>
 80022fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002302:	4631      	mov	r1, r6
 8002304:	4628      	mov	r0, r5
 8002306:	47b8      	blx	r7
 8002308:	3001      	adds	r0, #1
 800230a:	d1c0      	bne.n	800228e <_printf_float+0x316>
 800230c:	e68f      	b.n	800202e <_printf_float+0xb6>
 800230e:	9a06      	ldr	r2, [sp, #24]
 8002310:	464b      	mov	r3, r9
 8002312:	4442      	add	r2, r8
 8002314:	4631      	mov	r1, r6
 8002316:	4628      	mov	r0, r5
 8002318:	47b8      	blx	r7
 800231a:	3001      	adds	r0, #1
 800231c:	d1c3      	bne.n	80022a6 <_printf_float+0x32e>
 800231e:	e686      	b.n	800202e <_printf_float+0xb6>
 8002320:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002324:	f1ba 0f01 	cmp.w	sl, #1
 8002328:	dc01      	bgt.n	800232e <_printf_float+0x3b6>
 800232a:	07db      	lsls	r3, r3, #31
 800232c:	d536      	bpl.n	800239c <_printf_float+0x424>
 800232e:	2301      	movs	r3, #1
 8002330:	4642      	mov	r2, r8
 8002332:	4631      	mov	r1, r6
 8002334:	4628      	mov	r0, r5
 8002336:	47b8      	blx	r7
 8002338:	3001      	adds	r0, #1
 800233a:	f43f ae78 	beq.w	800202e <_printf_float+0xb6>
 800233e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002342:	4631      	mov	r1, r6
 8002344:	4628      	mov	r0, r5
 8002346:	47b8      	blx	r7
 8002348:	3001      	adds	r0, #1
 800234a:	f43f ae70 	beq.w	800202e <_printf_float+0xb6>
 800234e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002352:	2200      	movs	r2, #0
 8002354:	2300      	movs	r3, #0
 8002356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800235a:	f7fe fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800235e:	b9c0      	cbnz	r0, 8002392 <_printf_float+0x41a>
 8002360:	4653      	mov	r3, sl
 8002362:	f108 0201 	add.w	r2, r8, #1
 8002366:	4631      	mov	r1, r6
 8002368:	4628      	mov	r0, r5
 800236a:	47b8      	blx	r7
 800236c:	3001      	adds	r0, #1
 800236e:	d10c      	bne.n	800238a <_printf_float+0x412>
 8002370:	e65d      	b.n	800202e <_printf_float+0xb6>
 8002372:	2301      	movs	r3, #1
 8002374:	465a      	mov	r2, fp
 8002376:	4631      	mov	r1, r6
 8002378:	4628      	mov	r0, r5
 800237a:	47b8      	blx	r7
 800237c:	3001      	adds	r0, #1
 800237e:	f43f ae56 	beq.w	800202e <_printf_float+0xb6>
 8002382:	f108 0801 	add.w	r8, r8, #1
 8002386:	45d0      	cmp	r8, sl
 8002388:	dbf3      	blt.n	8002372 <_printf_float+0x3fa>
 800238a:	464b      	mov	r3, r9
 800238c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002390:	e6df      	b.n	8002152 <_printf_float+0x1da>
 8002392:	f04f 0800 	mov.w	r8, #0
 8002396:	f104 0b1a 	add.w	fp, r4, #26
 800239a:	e7f4      	b.n	8002386 <_printf_float+0x40e>
 800239c:	2301      	movs	r3, #1
 800239e:	4642      	mov	r2, r8
 80023a0:	e7e1      	b.n	8002366 <_printf_float+0x3ee>
 80023a2:	2301      	movs	r3, #1
 80023a4:	464a      	mov	r2, r9
 80023a6:	4631      	mov	r1, r6
 80023a8:	4628      	mov	r0, r5
 80023aa:	47b8      	blx	r7
 80023ac:	3001      	adds	r0, #1
 80023ae:	f43f ae3e 	beq.w	800202e <_printf_float+0xb6>
 80023b2:	f108 0801 	add.w	r8, r8, #1
 80023b6:	68e3      	ldr	r3, [r4, #12]
 80023b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80023ba:	1a5b      	subs	r3, r3, r1
 80023bc:	4543      	cmp	r3, r8
 80023be:	dcf0      	bgt.n	80023a2 <_printf_float+0x42a>
 80023c0:	e6fc      	b.n	80021bc <_printf_float+0x244>
 80023c2:	f04f 0800 	mov.w	r8, #0
 80023c6:	f104 0919 	add.w	r9, r4, #25
 80023ca:	e7f4      	b.n	80023b6 <_printf_float+0x43e>

080023cc <_printf_common>:
 80023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d0:	4616      	mov	r6, r2
 80023d2:	4698      	mov	r8, r3
 80023d4:	688a      	ldr	r2, [r1, #8]
 80023d6:	690b      	ldr	r3, [r1, #16]
 80023d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023dc:	4293      	cmp	r3, r2
 80023de:	bfb8      	it	lt
 80023e0:	4613      	movlt	r3, r2
 80023e2:	6033      	str	r3, [r6, #0]
 80023e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023e8:	4607      	mov	r7, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	b10a      	cbz	r2, 80023f2 <_printf_common+0x26>
 80023ee:	3301      	adds	r3, #1
 80023f0:	6033      	str	r3, [r6, #0]
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	0699      	lsls	r1, r3, #26
 80023f6:	bf42      	ittt	mi
 80023f8:	6833      	ldrmi	r3, [r6, #0]
 80023fa:	3302      	addmi	r3, #2
 80023fc:	6033      	strmi	r3, [r6, #0]
 80023fe:	6825      	ldr	r5, [r4, #0]
 8002400:	f015 0506 	ands.w	r5, r5, #6
 8002404:	d106      	bne.n	8002414 <_printf_common+0x48>
 8002406:	f104 0a19 	add.w	sl, r4, #25
 800240a:	68e3      	ldr	r3, [r4, #12]
 800240c:	6832      	ldr	r2, [r6, #0]
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	42ab      	cmp	r3, r5
 8002412:	dc26      	bgt.n	8002462 <_printf_common+0x96>
 8002414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	3b00      	subs	r3, #0
 800241c:	bf18      	it	ne
 800241e:	2301      	movne	r3, #1
 8002420:	0692      	lsls	r2, r2, #26
 8002422:	d42b      	bmi.n	800247c <_printf_common+0xb0>
 8002424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002428:	4641      	mov	r1, r8
 800242a:	4638      	mov	r0, r7
 800242c:	47c8      	blx	r9
 800242e:	3001      	adds	r0, #1
 8002430:	d01e      	beq.n	8002470 <_printf_common+0xa4>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	6922      	ldr	r2, [r4, #16]
 8002436:	f003 0306 	and.w	r3, r3, #6
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf02      	ittt	eq
 800243e:	68e5      	ldreq	r5, [r4, #12]
 8002440:	6833      	ldreq	r3, [r6, #0]
 8002442:	1aed      	subeq	r5, r5, r3
 8002444:	68a3      	ldr	r3, [r4, #8]
 8002446:	bf0c      	ite	eq
 8002448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800244c:	2500      	movne	r5, #0
 800244e:	4293      	cmp	r3, r2
 8002450:	bfc4      	itt	gt
 8002452:	1a9b      	subgt	r3, r3, r2
 8002454:	18ed      	addgt	r5, r5, r3
 8002456:	2600      	movs	r6, #0
 8002458:	341a      	adds	r4, #26
 800245a:	42b5      	cmp	r5, r6
 800245c:	d11a      	bne.n	8002494 <_printf_common+0xc8>
 800245e:	2000      	movs	r0, #0
 8002460:	e008      	b.n	8002474 <_printf_common+0xa8>
 8002462:	2301      	movs	r3, #1
 8002464:	4652      	mov	r2, sl
 8002466:	4641      	mov	r1, r8
 8002468:	4638      	mov	r0, r7
 800246a:	47c8      	blx	r9
 800246c:	3001      	adds	r0, #1
 800246e:	d103      	bne.n	8002478 <_printf_common+0xac>
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002478:	3501      	adds	r5, #1
 800247a:	e7c6      	b.n	800240a <_printf_common+0x3e>
 800247c:	18e1      	adds	r1, r4, r3
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	2030      	movs	r0, #48	@ 0x30
 8002482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002486:	4422      	add	r2, r4
 8002488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800248c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002490:	3302      	adds	r3, #2
 8002492:	e7c7      	b.n	8002424 <_printf_common+0x58>
 8002494:	2301      	movs	r3, #1
 8002496:	4622      	mov	r2, r4
 8002498:	4641      	mov	r1, r8
 800249a:	4638      	mov	r0, r7
 800249c:	47c8      	blx	r9
 800249e:	3001      	adds	r0, #1
 80024a0:	d0e6      	beq.n	8002470 <_printf_common+0xa4>
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7d9      	b.n	800245a <_printf_common+0x8e>
	...

080024a8 <_printf_i>:
 80024a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024ac:	7e0f      	ldrb	r7, [r1, #24]
 80024ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024b0:	2f78      	cmp	r7, #120	@ 0x78
 80024b2:	4691      	mov	r9, r2
 80024b4:	4680      	mov	r8, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	469a      	mov	sl, r3
 80024ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024be:	d807      	bhi.n	80024d0 <_printf_i+0x28>
 80024c0:	2f62      	cmp	r7, #98	@ 0x62
 80024c2:	d80a      	bhi.n	80024da <_printf_i+0x32>
 80024c4:	2f00      	cmp	r7, #0
 80024c6:	f000 80d2 	beq.w	800266e <_printf_i+0x1c6>
 80024ca:	2f58      	cmp	r7, #88	@ 0x58
 80024cc:	f000 80b9 	beq.w	8002642 <_printf_i+0x19a>
 80024d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024d8:	e03a      	b.n	8002550 <_printf_i+0xa8>
 80024da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024de:	2b15      	cmp	r3, #21
 80024e0:	d8f6      	bhi.n	80024d0 <_printf_i+0x28>
 80024e2:	a101      	add	r1, pc, #4	@ (adr r1, 80024e8 <_printf_i+0x40>)
 80024e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024e8:	08002541 	.word	0x08002541
 80024ec:	08002555 	.word	0x08002555
 80024f0:	080024d1 	.word	0x080024d1
 80024f4:	080024d1 	.word	0x080024d1
 80024f8:	080024d1 	.word	0x080024d1
 80024fc:	080024d1 	.word	0x080024d1
 8002500:	08002555 	.word	0x08002555
 8002504:	080024d1 	.word	0x080024d1
 8002508:	080024d1 	.word	0x080024d1
 800250c:	080024d1 	.word	0x080024d1
 8002510:	080024d1 	.word	0x080024d1
 8002514:	08002655 	.word	0x08002655
 8002518:	0800257f 	.word	0x0800257f
 800251c:	0800260f 	.word	0x0800260f
 8002520:	080024d1 	.word	0x080024d1
 8002524:	080024d1 	.word	0x080024d1
 8002528:	08002677 	.word	0x08002677
 800252c:	080024d1 	.word	0x080024d1
 8002530:	0800257f 	.word	0x0800257f
 8002534:	080024d1 	.word	0x080024d1
 8002538:	080024d1 	.word	0x080024d1
 800253c:	08002617 	.word	0x08002617
 8002540:	6833      	ldr	r3, [r6, #0]
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6032      	str	r2, [r6, #0]
 8002548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800254c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002550:	2301      	movs	r3, #1
 8002552:	e09d      	b.n	8002690 <_printf_i+0x1e8>
 8002554:	6833      	ldr	r3, [r6, #0]
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	1d19      	adds	r1, r3, #4
 800255a:	6031      	str	r1, [r6, #0]
 800255c:	0606      	lsls	r6, r0, #24
 800255e:	d501      	bpl.n	8002564 <_printf_i+0xbc>
 8002560:	681d      	ldr	r5, [r3, #0]
 8002562:	e003      	b.n	800256c <_printf_i+0xc4>
 8002564:	0645      	lsls	r5, r0, #25
 8002566:	d5fb      	bpl.n	8002560 <_printf_i+0xb8>
 8002568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800256c:	2d00      	cmp	r5, #0
 800256e:	da03      	bge.n	8002578 <_printf_i+0xd0>
 8002570:	232d      	movs	r3, #45	@ 0x2d
 8002572:	426d      	negs	r5, r5
 8002574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002578:	4859      	ldr	r0, [pc, #356]	@ (80026e0 <_printf_i+0x238>)
 800257a:	230a      	movs	r3, #10
 800257c:	e011      	b.n	80025a2 <_printf_i+0xfa>
 800257e:	6821      	ldr	r1, [r4, #0]
 8002580:	6833      	ldr	r3, [r6, #0]
 8002582:	0608      	lsls	r0, r1, #24
 8002584:	f853 5b04 	ldr.w	r5, [r3], #4
 8002588:	d402      	bmi.n	8002590 <_printf_i+0xe8>
 800258a:	0649      	lsls	r1, r1, #25
 800258c:	bf48      	it	mi
 800258e:	b2ad      	uxthmi	r5, r5
 8002590:	2f6f      	cmp	r7, #111	@ 0x6f
 8002592:	4853      	ldr	r0, [pc, #332]	@ (80026e0 <_printf_i+0x238>)
 8002594:	6033      	str	r3, [r6, #0]
 8002596:	bf14      	ite	ne
 8002598:	230a      	movne	r3, #10
 800259a:	2308      	moveq	r3, #8
 800259c:	2100      	movs	r1, #0
 800259e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025a2:	6866      	ldr	r6, [r4, #4]
 80025a4:	60a6      	str	r6, [r4, #8]
 80025a6:	2e00      	cmp	r6, #0
 80025a8:	bfa2      	ittt	ge
 80025aa:	6821      	ldrge	r1, [r4, #0]
 80025ac:	f021 0104 	bicge.w	r1, r1, #4
 80025b0:	6021      	strge	r1, [r4, #0]
 80025b2:	b90d      	cbnz	r5, 80025b8 <_printf_i+0x110>
 80025b4:	2e00      	cmp	r6, #0
 80025b6:	d04b      	beq.n	8002650 <_printf_i+0x1a8>
 80025b8:	4616      	mov	r6, r2
 80025ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80025be:	fb03 5711 	mls	r7, r3, r1, r5
 80025c2:	5dc7      	ldrb	r7, [r0, r7]
 80025c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025c8:	462f      	mov	r7, r5
 80025ca:	42bb      	cmp	r3, r7
 80025cc:	460d      	mov	r5, r1
 80025ce:	d9f4      	bls.n	80025ba <_printf_i+0x112>
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d10b      	bne.n	80025ec <_printf_i+0x144>
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	07df      	lsls	r7, r3, #31
 80025d8:	d508      	bpl.n	80025ec <_printf_i+0x144>
 80025da:	6923      	ldr	r3, [r4, #16]
 80025dc:	6861      	ldr	r1, [r4, #4]
 80025de:	4299      	cmp	r1, r3
 80025e0:	bfde      	ittt	le
 80025e2:	2330      	movle	r3, #48	@ 0x30
 80025e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025ec:	1b92      	subs	r2, r2, r6
 80025ee:	6122      	str	r2, [r4, #16]
 80025f0:	f8cd a000 	str.w	sl, [sp]
 80025f4:	464b      	mov	r3, r9
 80025f6:	aa03      	add	r2, sp, #12
 80025f8:	4621      	mov	r1, r4
 80025fa:	4640      	mov	r0, r8
 80025fc:	f7ff fee6 	bl	80023cc <_printf_common>
 8002600:	3001      	adds	r0, #1
 8002602:	d14a      	bne.n	800269a <_printf_i+0x1f2>
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	b004      	add	sp, #16
 800260a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	6023      	str	r3, [r4, #0]
 8002616:	4833      	ldr	r0, [pc, #204]	@ (80026e4 <_printf_i+0x23c>)
 8002618:	2778      	movs	r7, #120	@ 0x78
 800261a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	6831      	ldr	r1, [r6, #0]
 8002622:	061f      	lsls	r7, r3, #24
 8002624:	f851 5b04 	ldr.w	r5, [r1], #4
 8002628:	d402      	bmi.n	8002630 <_printf_i+0x188>
 800262a:	065f      	lsls	r7, r3, #25
 800262c:	bf48      	it	mi
 800262e:	b2ad      	uxthmi	r5, r5
 8002630:	6031      	str	r1, [r6, #0]
 8002632:	07d9      	lsls	r1, r3, #31
 8002634:	bf44      	itt	mi
 8002636:	f043 0320 	orrmi.w	r3, r3, #32
 800263a:	6023      	strmi	r3, [r4, #0]
 800263c:	b11d      	cbz	r5, 8002646 <_printf_i+0x19e>
 800263e:	2310      	movs	r3, #16
 8002640:	e7ac      	b.n	800259c <_printf_i+0xf4>
 8002642:	4827      	ldr	r0, [pc, #156]	@ (80026e0 <_printf_i+0x238>)
 8002644:	e7e9      	b.n	800261a <_printf_i+0x172>
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f023 0320 	bic.w	r3, r3, #32
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	e7f6      	b.n	800263e <_printf_i+0x196>
 8002650:	4616      	mov	r6, r2
 8002652:	e7bd      	b.n	80025d0 <_printf_i+0x128>
 8002654:	6833      	ldr	r3, [r6, #0]
 8002656:	6825      	ldr	r5, [r4, #0]
 8002658:	6961      	ldr	r1, [r4, #20]
 800265a:	1d18      	adds	r0, r3, #4
 800265c:	6030      	str	r0, [r6, #0]
 800265e:	062e      	lsls	r6, r5, #24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	d501      	bpl.n	8002668 <_printf_i+0x1c0>
 8002664:	6019      	str	r1, [r3, #0]
 8002666:	e002      	b.n	800266e <_printf_i+0x1c6>
 8002668:	0668      	lsls	r0, r5, #25
 800266a:	d5fb      	bpl.n	8002664 <_printf_i+0x1bc>
 800266c:	8019      	strh	r1, [r3, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	6123      	str	r3, [r4, #16]
 8002672:	4616      	mov	r6, r2
 8002674:	e7bc      	b.n	80025f0 <_printf_i+0x148>
 8002676:	6833      	ldr	r3, [r6, #0]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	6032      	str	r2, [r6, #0]
 800267c:	681e      	ldr	r6, [r3, #0]
 800267e:	6862      	ldr	r2, [r4, #4]
 8002680:	2100      	movs	r1, #0
 8002682:	4630      	mov	r0, r6
 8002684:	f7fd fdac 	bl	80001e0 <memchr>
 8002688:	b108      	cbz	r0, 800268e <_printf_i+0x1e6>
 800268a:	1b80      	subs	r0, r0, r6
 800268c:	6060      	str	r0, [r4, #4]
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	6123      	str	r3, [r4, #16]
 8002692:	2300      	movs	r3, #0
 8002694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002698:	e7aa      	b.n	80025f0 <_printf_i+0x148>
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	4632      	mov	r2, r6
 800269e:	4649      	mov	r1, r9
 80026a0:	4640      	mov	r0, r8
 80026a2:	47d0      	blx	sl
 80026a4:	3001      	adds	r0, #1
 80026a6:	d0ad      	beq.n	8002604 <_printf_i+0x15c>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	079b      	lsls	r3, r3, #30
 80026ac:	d413      	bmi.n	80026d6 <_printf_i+0x22e>
 80026ae:	68e0      	ldr	r0, [r4, #12]
 80026b0:	9b03      	ldr	r3, [sp, #12]
 80026b2:	4298      	cmp	r0, r3
 80026b4:	bfb8      	it	lt
 80026b6:	4618      	movlt	r0, r3
 80026b8:	e7a6      	b.n	8002608 <_printf_i+0x160>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4632      	mov	r2, r6
 80026be:	4649      	mov	r1, r9
 80026c0:	4640      	mov	r0, r8
 80026c2:	47d0      	blx	sl
 80026c4:	3001      	adds	r0, #1
 80026c6:	d09d      	beq.n	8002604 <_printf_i+0x15c>
 80026c8:	3501      	adds	r5, #1
 80026ca:	68e3      	ldr	r3, [r4, #12]
 80026cc:	9903      	ldr	r1, [sp, #12]
 80026ce:	1a5b      	subs	r3, r3, r1
 80026d0:	42ab      	cmp	r3, r5
 80026d2:	dcf2      	bgt.n	80026ba <_printf_i+0x212>
 80026d4:	e7eb      	b.n	80026ae <_printf_i+0x206>
 80026d6:	2500      	movs	r5, #0
 80026d8:	f104 0619 	add.w	r6, r4, #25
 80026dc:	e7f5      	b.n	80026ca <_printf_i+0x222>
 80026de:	bf00      	nop
 80026e0:	08004d71 	.word	0x08004d71
 80026e4:	08004d82 	.word	0x08004d82

080026e8 <std>:
 80026e8:	2300      	movs	r3, #0
 80026ea:	b510      	push	{r4, lr}
 80026ec:	4604      	mov	r4, r0
 80026ee:	e9c0 3300 	strd	r3, r3, [r0]
 80026f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026f6:	6083      	str	r3, [r0, #8]
 80026f8:	8181      	strh	r1, [r0, #12]
 80026fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80026fc:	81c2      	strh	r2, [r0, #14]
 80026fe:	6183      	str	r3, [r0, #24]
 8002700:	4619      	mov	r1, r3
 8002702:	2208      	movs	r2, #8
 8002704:	305c      	adds	r0, #92	@ 0x5c
 8002706:	f000 f928 	bl	800295a <memset>
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <std+0x58>)
 800270c:	6263      	str	r3, [r4, #36]	@ 0x24
 800270e:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <std+0x5c>)
 8002710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <std+0x60>)
 8002714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <std+0x64>)
 8002718:	6323      	str	r3, [r4, #48]	@ 0x30
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <std+0x68>)
 800271c:	6224      	str	r4, [r4, #32]
 800271e:	429c      	cmp	r4, r3
 8002720:	d006      	beq.n	8002730 <std+0x48>
 8002722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002726:	4294      	cmp	r4, r2
 8002728:	d002      	beq.n	8002730 <std+0x48>
 800272a:	33d0      	adds	r3, #208	@ 0xd0
 800272c:	429c      	cmp	r4, r3
 800272e:	d105      	bne.n	800273c <std+0x54>
 8002730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002738:	f000 b98c 	b.w	8002a54 <__retarget_lock_init_recursive>
 800273c:	bd10      	pop	{r4, pc}
 800273e:	bf00      	nop
 8002740:	080028d5 	.word	0x080028d5
 8002744:	080028f7 	.word	0x080028f7
 8002748:	0800292f 	.word	0x0800292f
 800274c:	08002953 	.word	0x08002953
 8002750:	200001f8 	.word	0x200001f8

08002754 <stdio_exit_handler>:
 8002754:	4a02      	ldr	r2, [pc, #8]	@ (8002760 <stdio_exit_handler+0xc>)
 8002756:	4903      	ldr	r1, [pc, #12]	@ (8002764 <stdio_exit_handler+0x10>)
 8002758:	4803      	ldr	r0, [pc, #12]	@ (8002768 <stdio_exit_handler+0x14>)
 800275a:	f000 b869 	b.w	8002830 <_fwalk_sglue>
 800275e:	bf00      	nop
 8002760:	20000004 	.word	0x20000004
 8002764:	080043b5 	.word	0x080043b5
 8002768:	20000014 	.word	0x20000014

0800276c <cleanup_stdio>:
 800276c:	6841      	ldr	r1, [r0, #4]
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <cleanup_stdio+0x34>)
 8002770:	4299      	cmp	r1, r3
 8002772:	b510      	push	{r4, lr}
 8002774:	4604      	mov	r4, r0
 8002776:	d001      	beq.n	800277c <cleanup_stdio+0x10>
 8002778:	f001 fe1c 	bl	80043b4 <_fflush_r>
 800277c:	68a1      	ldr	r1, [r4, #8]
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <cleanup_stdio+0x38>)
 8002780:	4299      	cmp	r1, r3
 8002782:	d002      	beq.n	800278a <cleanup_stdio+0x1e>
 8002784:	4620      	mov	r0, r4
 8002786:	f001 fe15 	bl	80043b4 <_fflush_r>
 800278a:	68e1      	ldr	r1, [r4, #12]
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <cleanup_stdio+0x3c>)
 800278e:	4299      	cmp	r1, r3
 8002790:	d004      	beq.n	800279c <cleanup_stdio+0x30>
 8002792:	4620      	mov	r0, r4
 8002794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002798:	f001 be0c 	b.w	80043b4 <_fflush_r>
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop
 80027a0:	200001f8 	.word	0x200001f8
 80027a4:	20000260 	.word	0x20000260
 80027a8:	200002c8 	.word	0x200002c8

080027ac <global_stdio_init.part.0>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <global_stdio_init.part.0+0x30>)
 80027b0:	4c0b      	ldr	r4, [pc, #44]	@ (80027e0 <global_stdio_init.part.0+0x34>)
 80027b2:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <global_stdio_init.part.0+0x38>)
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4620      	mov	r0, r4
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	f7ff ff94 	bl	80026e8 <std>
 80027c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027c4:	2201      	movs	r2, #1
 80027c6:	2109      	movs	r1, #9
 80027c8:	f7ff ff8e 	bl	80026e8 <std>
 80027cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027d0:	2202      	movs	r2, #2
 80027d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d6:	2112      	movs	r1, #18
 80027d8:	f7ff bf86 	b.w	80026e8 <std>
 80027dc:	20000330 	.word	0x20000330
 80027e0:	200001f8 	.word	0x200001f8
 80027e4:	08002755 	.word	0x08002755

080027e8 <__sfp_lock_acquire>:
 80027e8:	4801      	ldr	r0, [pc, #4]	@ (80027f0 <__sfp_lock_acquire+0x8>)
 80027ea:	f000 b934 	b.w	8002a56 <__retarget_lock_acquire_recursive>
 80027ee:	bf00      	nop
 80027f0:	20000339 	.word	0x20000339

080027f4 <__sfp_lock_release>:
 80027f4:	4801      	ldr	r0, [pc, #4]	@ (80027fc <__sfp_lock_release+0x8>)
 80027f6:	f000 b92f 	b.w	8002a58 <__retarget_lock_release_recursive>
 80027fa:	bf00      	nop
 80027fc:	20000339 	.word	0x20000339

08002800 <__sinit>:
 8002800:	b510      	push	{r4, lr}
 8002802:	4604      	mov	r4, r0
 8002804:	f7ff fff0 	bl	80027e8 <__sfp_lock_acquire>
 8002808:	6a23      	ldr	r3, [r4, #32]
 800280a:	b11b      	cbz	r3, 8002814 <__sinit+0x14>
 800280c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002810:	f7ff bff0 	b.w	80027f4 <__sfp_lock_release>
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <__sinit+0x28>)
 8002816:	6223      	str	r3, [r4, #32]
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <__sinit+0x2c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f5      	bne.n	800280c <__sinit+0xc>
 8002820:	f7ff ffc4 	bl	80027ac <global_stdio_init.part.0>
 8002824:	e7f2      	b.n	800280c <__sinit+0xc>
 8002826:	bf00      	nop
 8002828:	0800276d 	.word	0x0800276d
 800282c:	20000330 	.word	0x20000330

08002830 <_fwalk_sglue>:
 8002830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002834:	4607      	mov	r7, r0
 8002836:	4688      	mov	r8, r1
 8002838:	4614      	mov	r4, r2
 800283a:	2600      	movs	r6, #0
 800283c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002840:	f1b9 0901 	subs.w	r9, r9, #1
 8002844:	d505      	bpl.n	8002852 <_fwalk_sglue+0x22>
 8002846:	6824      	ldr	r4, [r4, #0]
 8002848:	2c00      	cmp	r4, #0
 800284a:	d1f7      	bne.n	800283c <_fwalk_sglue+0xc>
 800284c:	4630      	mov	r0, r6
 800284e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002852:	89ab      	ldrh	r3, [r5, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d907      	bls.n	8002868 <_fwalk_sglue+0x38>
 8002858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800285c:	3301      	adds	r3, #1
 800285e:	d003      	beq.n	8002868 <_fwalk_sglue+0x38>
 8002860:	4629      	mov	r1, r5
 8002862:	4638      	mov	r0, r7
 8002864:	47c0      	blx	r8
 8002866:	4306      	orrs	r6, r0
 8002868:	3568      	adds	r5, #104	@ 0x68
 800286a:	e7e9      	b.n	8002840 <_fwalk_sglue+0x10>

0800286c <sniprintf>:
 800286c:	b40c      	push	{r2, r3}
 800286e:	b530      	push	{r4, r5, lr}
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <sniprintf+0x64>)
 8002872:	1e0c      	subs	r4, r1, #0
 8002874:	681d      	ldr	r5, [r3, #0]
 8002876:	b09d      	sub	sp, #116	@ 0x74
 8002878:	da08      	bge.n	800288c <sniprintf+0x20>
 800287a:	238b      	movs	r3, #139	@ 0x8b
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	b01d      	add	sp, #116	@ 0x74
 8002884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002888:	b002      	add	sp, #8
 800288a:	4770      	bx	lr
 800288c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002894:	bf14      	ite	ne
 8002896:	f104 33ff 	addne.w	r3, r4, #4294967295
 800289a:	4623      	moveq	r3, r4
 800289c:	9304      	str	r3, [sp, #16]
 800289e:	9307      	str	r3, [sp, #28]
 80028a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a4:	9002      	str	r0, [sp, #8]
 80028a6:	9006      	str	r0, [sp, #24]
 80028a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80028ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80028ae:	ab21      	add	r3, sp, #132	@ 0x84
 80028b0:	a902      	add	r1, sp, #8
 80028b2:	4628      	mov	r0, r5
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f001 fbfd 	bl	80040b4 <_svfiprintf_r>
 80028ba:	1c43      	adds	r3, r0, #1
 80028bc:	bfbc      	itt	lt
 80028be:	238b      	movlt	r3, #139	@ 0x8b
 80028c0:	602b      	strlt	r3, [r5, #0]
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d0dd      	beq.n	8002882 <sniprintf+0x16>
 80028c6:	9b02      	ldr	r3, [sp, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	e7d9      	b.n	8002882 <sniprintf+0x16>
 80028ce:	bf00      	nop
 80028d0:	20000010 	.word	0x20000010

080028d4 <__sread>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	460c      	mov	r4, r1
 80028d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028dc:	f000 f86c 	bl	80029b8 <_read_r>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	bfab      	itete	ge
 80028e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80028e6:	89a3      	ldrhlt	r3, [r4, #12]
 80028e8:	181b      	addge	r3, r3, r0
 80028ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80028ee:	bfac      	ite	ge
 80028f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80028f2:	81a3      	strhlt	r3, [r4, #12]
 80028f4:	bd10      	pop	{r4, pc}

080028f6 <__swrite>:
 80028f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fa:	461f      	mov	r7, r3
 80028fc:	898b      	ldrh	r3, [r1, #12]
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	4605      	mov	r5, r0
 8002902:	460c      	mov	r4, r1
 8002904:	4616      	mov	r6, r2
 8002906:	d505      	bpl.n	8002914 <__swrite+0x1e>
 8002908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290c:	2302      	movs	r3, #2
 800290e:	2200      	movs	r2, #0
 8002910:	f000 f840 	bl	8002994 <_lseek_r>
 8002914:	89a3      	ldrh	r3, [r4, #12]
 8002916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800291a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	4632      	mov	r2, r6
 8002922:	463b      	mov	r3, r7
 8002924:	4628      	mov	r0, r5
 8002926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800292a:	f000 b857 	b.w	80029dc <_write_r>

0800292e <__sseek>:
 800292e:	b510      	push	{r4, lr}
 8002930:	460c      	mov	r4, r1
 8002932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002936:	f000 f82d 	bl	8002994 <_lseek_r>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	bf15      	itete	ne
 8002940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800294a:	81a3      	strheq	r3, [r4, #12]
 800294c:	bf18      	it	ne
 800294e:	81a3      	strhne	r3, [r4, #12]
 8002950:	bd10      	pop	{r4, pc}

08002952 <__sclose>:
 8002952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002956:	f000 b80d 	b.w	8002974 <_close_r>

0800295a <memset>:
 800295a:	4402      	add	r2, r0
 800295c:	4603      	mov	r3, r0
 800295e:	4293      	cmp	r3, r2
 8002960:	d100      	bne.n	8002964 <memset+0xa>
 8002962:	4770      	bx	lr
 8002964:	f803 1b01 	strb.w	r1, [r3], #1
 8002968:	e7f9      	b.n	800295e <memset+0x4>
	...

0800296c <_localeconv_r>:
 800296c:	4800      	ldr	r0, [pc, #0]	@ (8002970 <_localeconv_r+0x4>)
 800296e:	4770      	bx	lr
 8002970:	20000150 	.word	0x20000150

08002974 <_close_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4d06      	ldr	r5, [pc, #24]	@ (8002990 <_close_r+0x1c>)
 8002978:	2300      	movs	r3, #0
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f7ff f9b5 	bl	8001cee <_close>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_close_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_close_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	20000334 	.word	0x20000334

08002994 <_lseek_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d07      	ldr	r5, [pc, #28]	@ (80029b4 <_lseek_r+0x20>)
 8002998:	4604      	mov	r4, r0
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff f9ca 	bl	8001d3c <_lseek>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_lseek_r+0x1e>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_lseek_r+0x1e>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	20000334 	.word	0x20000334

080029b8 <_read_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4d07      	ldr	r5, [pc, #28]	@ (80029d8 <_read_r+0x20>)
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	602a      	str	r2, [r5, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7ff f958 	bl	8001c7c <_read>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_read_r+0x1e>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_read_r+0x1e>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	20000334 	.word	0x20000334

080029dc <_write_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4d07      	ldr	r5, [pc, #28]	@ (80029fc <_write_r+0x20>)
 80029e0:	4604      	mov	r4, r0
 80029e2:	4608      	mov	r0, r1
 80029e4:	4611      	mov	r1, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	602a      	str	r2, [r5, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7ff f963 	bl	8001cb6 <_write>
 80029f0:	1c43      	adds	r3, r0, #1
 80029f2:	d102      	bne.n	80029fa <_write_r+0x1e>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b103      	cbz	r3, 80029fa <_write_r+0x1e>
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	20000334 	.word	0x20000334

08002a00 <__errno>:
 8002a00:	4b01      	ldr	r3, [pc, #4]	@ (8002a08 <__errno+0x8>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000010 	.word	0x20000010

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	@ (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2600      	movs	r6, #0
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a50 <__libc_init_array+0x44>)
 8002a20:	f002 f866 	bl	8004af0 <_init>
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2600      	movs	r6, #0
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	080050d8 	.word	0x080050d8
 8002a48:	080050d8 	.word	0x080050d8
 8002a4c:	080050d8 	.word	0x080050d8
 8002a50:	080050dc 	.word	0x080050dc

08002a54 <__retarget_lock_init_recursive>:
 8002a54:	4770      	bx	lr

08002a56 <__retarget_lock_acquire_recursive>:
 8002a56:	4770      	bx	lr

08002a58 <__retarget_lock_release_recursive>:
 8002a58:	4770      	bx	lr

08002a5a <quorem>:
 8002a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5e:	6903      	ldr	r3, [r0, #16]
 8002a60:	690c      	ldr	r4, [r1, #16]
 8002a62:	42a3      	cmp	r3, r4
 8002a64:	4607      	mov	r7, r0
 8002a66:	db7e      	blt.n	8002b66 <quorem+0x10c>
 8002a68:	3c01      	subs	r4, #1
 8002a6a:	f101 0814 	add.w	r8, r1, #20
 8002a6e:	00a3      	lsls	r3, r4, #2
 8002a70:	f100 0514 	add.w	r5, r0, #20
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a84:	3301      	adds	r3, #1
 8002a86:	429a      	cmp	r2, r3
 8002a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a90:	d32e      	bcc.n	8002af0 <quorem+0x96>
 8002a92:	f04f 0a00 	mov.w	sl, #0
 8002a96:	46c4      	mov	ip, r8
 8002a98:	46ae      	mov	lr, r5
 8002a9a:	46d3      	mov	fp, sl
 8002a9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	fb06 a000 	mla	r0, r6, r0, sl
 8002aa6:	0c02      	lsrs	r2, r0, #16
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	fb06 2303 	mla	r3, r6, r3, r2
 8002aae:	f8de 2000 	ldr.w	r2, [lr]
 8002ab2:	b280      	uxth	r0, r0
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	1a12      	subs	r2, r2, r0
 8002ab8:	445a      	add	r2, fp
 8002aba:	f8de 0000 	ldr.w	r0, [lr]
 8002abe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002ac8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002acc:	b292      	uxth	r2, r2
 8002ace:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002ad2:	45e1      	cmp	r9, ip
 8002ad4:	f84e 2b04 	str.w	r2, [lr], #4
 8002ad8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002adc:	d2de      	bcs.n	8002a9c <quorem+0x42>
 8002ade:	9b00      	ldr	r3, [sp, #0]
 8002ae0:	58eb      	ldr	r3, [r5, r3]
 8002ae2:	b92b      	cbnz	r3, 8002af0 <quorem+0x96>
 8002ae4:	9b01      	ldr	r3, [sp, #4]
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	429d      	cmp	r5, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	d32f      	bcc.n	8002b4e <quorem+0xf4>
 8002aee:	613c      	str	r4, [r7, #16]
 8002af0:	4638      	mov	r0, r7
 8002af2:	f001 f97b 	bl	8003dec <__mcmp>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	db25      	blt.n	8002b46 <quorem+0xec>
 8002afa:	4629      	mov	r1, r5
 8002afc:	2000      	movs	r0, #0
 8002afe:	f858 2b04 	ldr.w	r2, [r8], #4
 8002b02:	f8d1 c000 	ldr.w	ip, [r1]
 8002b06:	fa1f fe82 	uxth.w	lr, r2
 8002b0a:	fa1f f38c 	uxth.w	r3, ip
 8002b0e:	eba3 030e 	sub.w	r3, r3, lr
 8002b12:	4403      	add	r3, r0
 8002b14:	0c12      	lsrs	r2, r2, #16
 8002b16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002b1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b24:	45c1      	cmp	r9, r8
 8002b26:	f841 3b04 	str.w	r3, [r1], #4
 8002b2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002b2e:	d2e6      	bcs.n	8002afe <quorem+0xa4>
 8002b30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b38:	b922      	cbnz	r2, 8002b44 <quorem+0xea>
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	429d      	cmp	r5, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	d30b      	bcc.n	8002b5a <quorem+0x100>
 8002b42:	613c      	str	r4, [r7, #16]
 8002b44:	3601      	adds	r6, #1
 8002b46:	4630      	mov	r0, r6
 8002b48:	b003      	add	sp, #12
 8002b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	3b04      	subs	r3, #4
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d1cb      	bne.n	8002aee <quorem+0x94>
 8002b56:	3c01      	subs	r4, #1
 8002b58:	e7c6      	b.n	8002ae8 <quorem+0x8e>
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d1ef      	bne.n	8002b42 <quorem+0xe8>
 8002b62:	3c01      	subs	r4, #1
 8002b64:	e7ea      	b.n	8002b3c <quorem+0xe2>
 8002b66:	2000      	movs	r0, #0
 8002b68:	e7ee      	b.n	8002b48 <quorem+0xee>
 8002b6a:	0000      	movs	r0, r0
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <_dtoa_r>:
 8002b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b74:	69c7      	ldr	r7, [r0, #28]
 8002b76:	b099      	sub	sp, #100	@ 0x64
 8002b78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002b7c:	ec55 4b10 	vmov	r4, r5, d0
 8002b80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002b82:	9109      	str	r1, [sp, #36]	@ 0x24
 8002b84:	4683      	mov	fp, r0
 8002b86:	920e      	str	r2, [sp, #56]	@ 0x38
 8002b88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002b8a:	b97f      	cbnz	r7, 8002bac <_dtoa_r+0x3c>
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f000 fdfd 	bl	800378c <malloc>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8cb 001c 	str.w	r0, [fp, #28]
 8002b98:	b920      	cbnz	r0, 8002ba4 <_dtoa_r+0x34>
 8002b9a:	4ba7      	ldr	r3, [pc, #668]	@ (8002e38 <_dtoa_r+0x2c8>)
 8002b9c:	21ef      	movs	r1, #239	@ 0xef
 8002b9e:	48a7      	ldr	r0, [pc, #668]	@ (8002e3c <_dtoa_r+0x2cc>)
 8002ba0:	f001 fc68 	bl	8004474 <__assert_func>
 8002ba4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002ba8:	6007      	str	r7, [r0, #0]
 8002baa:	60c7      	str	r7, [r0, #12]
 8002bac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	b159      	cbz	r1, 8002bcc <_dtoa_r+0x5c>
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	604a      	str	r2, [r1, #4]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4093      	lsls	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
 8002bbe:	4658      	mov	r0, fp
 8002bc0:	f000 feda 	bl	8003978 <_Bfree>
 8002bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	1e2b      	subs	r3, r5, #0
 8002bce:	bfb9      	ittee	lt
 8002bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002bd4:	9303      	strlt	r3, [sp, #12]
 8002bd6:	2300      	movge	r3, #0
 8002bd8:	6033      	strge	r3, [r6, #0]
 8002bda:	9f03      	ldr	r7, [sp, #12]
 8002bdc:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <_dtoa_r+0x2d0>)
 8002bde:	bfbc      	itt	lt
 8002be0:	2201      	movlt	r2, #1
 8002be2:	6032      	strlt	r2, [r6, #0]
 8002be4:	43bb      	bics	r3, r7
 8002be6:	d112      	bne.n	8002c0e <_dtoa_r+0x9e>
 8002be8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002bea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002bf4:	4323      	orrs	r3, r4
 8002bf6:	f000 854d 	beq.w	8003694 <_dtoa_r+0xb24>
 8002bfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002bfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002e54 <_dtoa_r+0x2e4>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 854f 	beq.w	80036a4 <_dtoa_r+0xb34>
 8002c06:	f10a 0303 	add.w	r3, sl, #3
 8002c0a:	f000 bd49 	b.w	80036a0 <_dtoa_r+0xb30>
 8002c0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	ec51 0b17 	vmov	r0, r1, d7
 8002c18:	2300      	movs	r3, #0
 8002c1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002c1e:	f7fd ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c22:	4680      	mov	r8, r0
 8002c24:	b158      	cbz	r0, 8002c3e <_dtoa_r+0xce>
 8002c26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002c28:	2301      	movs	r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002c2e:	b113      	cbz	r3, 8002c36 <_dtoa_r+0xc6>
 8002c30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002c32:	4b84      	ldr	r3, [pc, #528]	@ (8002e44 <_dtoa_r+0x2d4>)
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002e58 <_dtoa_r+0x2e8>
 8002c3a:	f000 bd33 	b.w	80036a4 <_dtoa_r+0xb34>
 8002c3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002c42:	aa16      	add	r2, sp, #88	@ 0x58
 8002c44:	a917      	add	r1, sp, #92	@ 0x5c
 8002c46:	4658      	mov	r0, fp
 8002c48:	f001 f980 	bl	8003f4c <__d2b>
 8002c4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002c50:	4681      	mov	r9, r0
 8002c52:	2e00      	cmp	r6, #0
 8002c54:	d077      	beq.n	8002d46 <_dtoa_r+0x1d6>
 8002c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002c64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002c68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002c6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002c70:	4619      	mov	r1, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	4b74      	ldr	r3, [pc, #464]	@ (8002e48 <_dtoa_r+0x2d8>)
 8002c76:	f7fd fb0f 	bl	8000298 <__aeabi_dsub>
 8002c7a:	a369      	add	r3, pc, #420	@ (adr r3, 8002e20 <_dtoa_r+0x2b0>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fcc2 	bl	8000608 <__aeabi_dmul>
 8002c84:	a368      	add	r3, pc, #416	@ (adr r3, 8002e28 <_dtoa_r+0x2b8>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fb07 	bl	800029c <__adddf3>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4630      	mov	r0, r6
 8002c92:	460d      	mov	r5, r1
 8002c94:	f7fd fc4e 	bl	8000534 <__aeabi_i2d>
 8002c98:	a365      	add	r3, pc, #404	@ (adr r3, 8002e30 <_dtoa_r+0x2c0>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcb3 	bl	8000608 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4629      	mov	r1, r5
 8002caa:	f7fd faf7 	bl	800029c <__adddf3>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	460d      	mov	r5, r1
 8002cb2:	f7fd ff59 	bl	8000b68 <__aeabi_d2iz>
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4607      	mov	r7, r0
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f7fd ff14 	bl	8000aec <__aeabi_dcmplt>
 8002cc4:	b140      	cbz	r0, 8002cd8 <_dtoa_r+0x168>
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	f7fd fc34 	bl	8000534 <__aeabi_i2d>
 8002ccc:	4622      	mov	r2, r4
 8002cce:	462b      	mov	r3, r5
 8002cd0:	f7fd ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8002cd4:	b900      	cbnz	r0, 8002cd8 <_dtoa_r+0x168>
 8002cd6:	3f01      	subs	r7, #1
 8002cd8:	2f16      	cmp	r7, #22
 8002cda:	d851      	bhi.n	8002d80 <_dtoa_r+0x210>
 8002cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e4c <_dtoa_r+0x2dc>)
 8002cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002cea:	f7fd feff 	bl	8000aec <__aeabi_dcmplt>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d048      	beq.n	8002d84 <_dtoa_r+0x214>
 8002cf2:	3f01      	subs	r7, #1
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9312      	str	r3, [sp, #72]	@ 0x48
 8002cf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002cfa:	1b9b      	subs	r3, r3, r6
 8002cfc:	1e5a      	subs	r2, r3, #1
 8002cfe:	bf44      	itt	mi
 8002d00:	f1c3 0801 	rsbmi	r8, r3, #1
 8002d04:	2300      	movmi	r3, #0
 8002d06:	9208      	str	r2, [sp, #32]
 8002d08:	bf54      	ite	pl
 8002d0a:	f04f 0800 	movpl.w	r8, #0
 8002d0e:	9308      	strmi	r3, [sp, #32]
 8002d10:	2f00      	cmp	r7, #0
 8002d12:	db39      	blt.n	8002d88 <_dtoa_r+0x218>
 8002d14:	9b08      	ldr	r3, [sp, #32]
 8002d16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002d18:	443b      	add	r3, r7
 8002d1a:	9308      	str	r3, [sp, #32]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	d864      	bhi.n	8002df0 <_dtoa_r+0x280>
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	bfc4      	itt	gt
 8002d2a:	3b04      	subgt	r3, #4
 8002d2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d30:	f1a3 0302 	sub.w	r3, r3, #2
 8002d34:	bfcc      	ite	gt
 8002d36:	2400      	movgt	r4, #0
 8002d38:	2401      	movle	r4, #1
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d863      	bhi.n	8002e06 <_dtoa_r+0x296>
 8002d3e:	e8df f003 	tbb	[pc, r3]
 8002d42:	372a      	.short	0x372a
 8002d44:	5535      	.short	0x5535
 8002d46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002d4a:	441e      	add	r6, r3
 8002d4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	bfc1      	itttt	gt
 8002d54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002d58:	409f      	lslgt	r7, r3
 8002d5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002d5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002d62:	bfd6      	itet	le
 8002d64:	f1c3 0320 	rsble	r3, r3, #32
 8002d68:	ea47 0003 	orrgt.w	r0, r7, r3
 8002d6c:	fa04 f003 	lslle.w	r0, r4, r3
 8002d70:	f7fd fbd0 	bl	8000514 <__aeabi_ui2d>
 8002d74:	2201      	movs	r2, #1
 8002d76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002d7a:	3e01      	subs	r6, #1
 8002d7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8002d7e:	e777      	b.n	8002c70 <_dtoa_r+0x100>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e7b8      	b.n	8002cf6 <_dtoa_r+0x186>
 8002d84:	9012      	str	r0, [sp, #72]	@ 0x48
 8002d86:	e7b7      	b.n	8002cf8 <_dtoa_r+0x188>
 8002d88:	427b      	negs	r3, r7
 8002d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	eba8 0807 	sub.w	r8, r8, r7
 8002d92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002d94:	e7c4      	b.n	8002d20 <_dtoa_r+0x1b0>
 8002d96:	2300      	movs	r3, #0
 8002d98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	dc35      	bgt.n	8002e0c <_dtoa_r+0x29c>
 8002da0:	2301      	movs	r3, #1
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	9307      	str	r3, [sp, #28]
 8002da6:	461a      	mov	r2, r3
 8002da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8002daa:	e00b      	b.n	8002dc4 <_dtoa_r+0x254>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e7f3      	b.n	8002d98 <_dtoa_r+0x228>
 8002db0:	2300      	movs	r3, #0
 8002db2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002db4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	9307      	str	r3, [sp, #28]
 8002dc0:	bfb8      	it	lt
 8002dc2:	2301      	movlt	r3, #1
 8002dc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2204      	movs	r2, #4
 8002dcc:	f102 0514 	add.w	r5, r2, #20
 8002dd0:	429d      	cmp	r5, r3
 8002dd2:	d91f      	bls.n	8002e14 <_dtoa_r+0x2a4>
 8002dd4:	6041      	str	r1, [r0, #4]
 8002dd6:	4658      	mov	r0, fp
 8002dd8:	f000 fd8e 	bl	80038f8 <_Balloc>
 8002ddc:	4682      	mov	sl, r0
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d13c      	bne.n	8002e5c <_dtoa_r+0x2ec>
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <_dtoa_r+0x2e0>)
 8002de4:	4602      	mov	r2, r0
 8002de6:	f240 11af 	movw	r1, #431	@ 0x1af
 8002dea:	e6d8      	b.n	8002b9e <_dtoa_r+0x2e>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e7e0      	b.n	8002db2 <_dtoa_r+0x242>
 8002df0:	2401      	movs	r4, #1
 8002df2:	2300      	movs	r3, #0
 8002df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002df6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	9307      	str	r3, [sp, #28]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2312      	movs	r3, #18
 8002e04:	e7d0      	b.n	8002da8 <_dtoa_r+0x238>
 8002e06:	2301      	movs	r3, #1
 8002e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e0a:	e7f5      	b.n	8002df8 <_dtoa_r+0x288>
 8002e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	9307      	str	r3, [sp, #28]
 8002e12:	e7d7      	b.n	8002dc4 <_dtoa_r+0x254>
 8002e14:	3101      	adds	r1, #1
 8002e16:	0052      	lsls	r2, r2, #1
 8002e18:	e7d8      	b.n	8002dcc <_dtoa_r+0x25c>
 8002e1a:	bf00      	nop
 8002e1c:	f3af 8000 	nop.w
 8002e20:	636f4361 	.word	0x636f4361
 8002e24:	3fd287a7 	.word	0x3fd287a7
 8002e28:	8b60c8b3 	.word	0x8b60c8b3
 8002e2c:	3fc68a28 	.word	0x3fc68a28
 8002e30:	509f79fb 	.word	0x509f79fb
 8002e34:	3fd34413 	.word	0x3fd34413
 8002e38:	08004da0 	.word	0x08004da0
 8002e3c:	08004db7 	.word	0x08004db7
 8002e40:	7ff00000 	.word	0x7ff00000
 8002e44:	08004d70 	.word	0x08004d70
 8002e48:	3ff80000 	.word	0x3ff80000
 8002e4c:	08004eb0 	.word	0x08004eb0
 8002e50:	08004e0f 	.word	0x08004e0f
 8002e54:	08004d9c 	.word	0x08004d9c
 8002e58:	08004d6f 	.word	0x08004d6f
 8002e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	9b07      	ldr	r3, [sp, #28]
 8002e64:	2b0e      	cmp	r3, #14
 8002e66:	f200 80a4 	bhi.w	8002fb2 <_dtoa_r+0x442>
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	f000 80a1 	beq.w	8002fb2 <_dtoa_r+0x442>
 8002e70:	2f00      	cmp	r7, #0
 8002e72:	dd33      	ble.n	8002edc <_dtoa_r+0x36c>
 8002e74:	4bad      	ldr	r3, [pc, #692]	@ (800312c <_dtoa_r+0x5bc>)
 8002e76:	f007 020f 	and.w	r2, r7, #15
 8002e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e7e:	ed93 7b00 	vldr	d7, [r3]
 8002e82:	05f8      	lsls	r0, r7, #23
 8002e84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002e8c:	d516      	bpl.n	8002ebc <_dtoa_r+0x34c>
 8002e8e:	4ba8      	ldr	r3, [pc, #672]	@ (8003130 <_dtoa_r+0x5c0>)
 8002e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e98:	f7fd fce0 	bl	800085c <__aeabi_ddiv>
 8002e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ea0:	f004 040f 	and.w	r4, r4, #15
 8002ea4:	2603      	movs	r6, #3
 8002ea6:	4da2      	ldr	r5, [pc, #648]	@ (8003130 <_dtoa_r+0x5c0>)
 8002ea8:	b954      	cbnz	r4, 8002ec0 <_dtoa_r+0x350>
 8002eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eb2:	f7fd fcd3 	bl	800085c <__aeabi_ddiv>
 8002eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eba:	e028      	b.n	8002f0e <_dtoa_r+0x39e>
 8002ebc:	2602      	movs	r6, #2
 8002ebe:	e7f2      	b.n	8002ea6 <_dtoa_r+0x336>
 8002ec0:	07e1      	lsls	r1, r4, #31
 8002ec2:	d508      	bpl.n	8002ed6 <_dtoa_r+0x366>
 8002ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002ecc:	f7fd fb9c 	bl	8000608 <__aeabi_dmul>
 8002ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	1064      	asrs	r4, r4, #1
 8002ed8:	3508      	adds	r5, #8
 8002eda:	e7e5      	b.n	8002ea8 <_dtoa_r+0x338>
 8002edc:	f000 80d2 	beq.w	8003084 <_dtoa_r+0x514>
 8002ee0:	427c      	negs	r4, r7
 8002ee2:	4b92      	ldr	r3, [pc, #584]	@ (800312c <_dtoa_r+0x5bc>)
 8002ee4:	4d92      	ldr	r5, [pc, #584]	@ (8003130 <_dtoa_r+0x5c0>)
 8002ee6:	f004 020f 	and.w	r2, r4, #15
 8002eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002ef6:	f7fd fb87 	bl	8000608 <__aeabi_dmul>
 8002efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002efe:	1124      	asrs	r4, r4, #4
 8002f00:	2300      	movs	r3, #0
 8002f02:	2602      	movs	r6, #2
 8002f04:	2c00      	cmp	r4, #0
 8002f06:	f040 80b2 	bne.w	800306e <_dtoa_r+0x4fe>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1d3      	bne.n	8002eb6 <_dtoa_r+0x346>
 8002f0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002f10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80b7 	beq.w	8003088 <_dtoa_r+0x518>
 8002f1a:	4b86      	ldr	r3, [pc, #536]	@ (8003134 <_dtoa_r+0x5c4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd fde3 	bl	8000aec <__aeabi_dcmplt>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	f000 80ae 	beq.w	8003088 <_dtoa_r+0x518>
 8002f2c:	9b07      	ldr	r3, [sp, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80aa 	beq.w	8003088 <_dtoa_r+0x518>
 8002f34:	9b00      	ldr	r3, [sp, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	dd37      	ble.n	8002faa <_dtoa_r+0x43a>
 8002f3a:	1e7b      	subs	r3, r7, #1
 8002f3c:	9304      	str	r3, [sp, #16]
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4b7d      	ldr	r3, [pc, #500]	@ (8003138 <_dtoa_r+0x5c8>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd fb5f 	bl	8000608 <__aeabi_dmul>
 8002f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f4e:	9c00      	ldr	r4, [sp, #0]
 8002f50:	3601      	adds	r6, #1
 8002f52:	4630      	mov	r0, r6
 8002f54:	f7fd faee 	bl	8000534 <__aeabi_i2d>
 8002f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f5c:	f7fd fb54 	bl	8000608 <__aeabi_dmul>
 8002f60:	4b76      	ldr	r3, [pc, #472]	@ (800313c <_dtoa_r+0x5cc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	f7fd f99a 	bl	800029c <__adddf3>
 8002f68:	4605      	mov	r5, r0
 8002f6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002f6e:	2c00      	cmp	r4, #0
 8002f70:	f040 808d 	bne.w	800308e <_dtoa_r+0x51e>
 8002f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f78:	4b71      	ldr	r3, [pc, #452]	@ (8003140 <_dtoa_r+0x5d0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f7fd f98c 	bl	8000298 <__aeabi_dsub>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4633      	mov	r3, r6
 8002f8c:	f7fd fdcc 	bl	8000b28 <__aeabi_dcmpgt>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	f040 828b 	bne.w	80034ac <_dtoa_r+0x93c>
 8002f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f9a:	462a      	mov	r2, r5
 8002f9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002fa0:	f7fd fda4 	bl	8000aec <__aeabi_dcmplt>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	f040 8128 	bne.w	80031fa <_dtoa_r+0x68a>
 8002faa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002fae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002fb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f2c0 815a 	blt.w	800326e <_dtoa_r+0x6fe>
 8002fba:	2f0e      	cmp	r7, #14
 8002fbc:	f300 8157 	bgt.w	800326e <_dtoa_r+0x6fe>
 8002fc0:	4b5a      	ldr	r3, [pc, #360]	@ (800312c <_dtoa_r+0x5bc>)
 8002fc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002fc6:	ed93 7b00 	vldr	d7, [r3]
 8002fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	ed8d 7b00 	vstr	d7, [sp]
 8002fd2:	da03      	bge.n	8002fdc <_dtoa_r+0x46c>
 8002fd4:	9b07      	ldr	r3, [sp, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f340 8101 	ble.w	80031de <_dtoa_r+0x66e>
 8002fdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002fe0:	4656      	mov	r6, sl
 8002fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7fd fc37 	bl	800085c <__aeabi_ddiv>
 8002fee:	f7fd fdbb 	bl	8000b68 <__aeabi_d2iz>
 8002ff2:	4680      	mov	r8, r0
 8002ff4:	f7fd fa9e 	bl	8000534 <__aeabi_i2d>
 8002ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ffc:	f7fd fb04 	bl	8000608 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800300c:	f7fd f944 	bl	8000298 <__aeabi_dsub>
 8003010:	f806 4b01 	strb.w	r4, [r6], #1
 8003014:	9d07      	ldr	r5, [sp, #28]
 8003016:	eba6 040a 	sub.w	r4, r6, sl
 800301a:	42a5      	cmp	r5, r4
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	f040 8117 	bne.w	8003252 <_dtoa_r+0x6e2>
 8003024:	f7fd f93a 	bl	800029c <__adddf3>
 8003028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800302c:	4604      	mov	r4, r0
 800302e:	460d      	mov	r5, r1
 8003030:	f7fd fd7a 	bl	8000b28 <__aeabi_dcmpgt>
 8003034:	2800      	cmp	r0, #0
 8003036:	f040 80f9 	bne.w	800322c <_dtoa_r+0x6bc>
 800303a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 8003046:	b118      	cbz	r0, 8003050 <_dtoa_r+0x4e0>
 8003048:	f018 0f01 	tst.w	r8, #1
 800304c:	f040 80ee 	bne.w	800322c <_dtoa_r+0x6bc>
 8003050:	4649      	mov	r1, r9
 8003052:	4658      	mov	r0, fp
 8003054:	f000 fc90 	bl	8003978 <_Bfree>
 8003058:	2300      	movs	r3, #0
 800305a:	7033      	strb	r3, [r6, #0]
 800305c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800305e:	3701      	adds	r7, #1
 8003060:	601f      	str	r7, [r3, #0]
 8003062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 831d 	beq.w	80036a4 <_dtoa_r+0xb34>
 800306a:	601e      	str	r6, [r3, #0]
 800306c:	e31a      	b.n	80036a4 <_dtoa_r+0xb34>
 800306e:	07e2      	lsls	r2, r4, #31
 8003070:	d505      	bpl.n	800307e <_dtoa_r+0x50e>
 8003072:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003076:	f7fd fac7 	bl	8000608 <__aeabi_dmul>
 800307a:	3601      	adds	r6, #1
 800307c:	2301      	movs	r3, #1
 800307e:	1064      	asrs	r4, r4, #1
 8003080:	3508      	adds	r5, #8
 8003082:	e73f      	b.n	8002f04 <_dtoa_r+0x394>
 8003084:	2602      	movs	r6, #2
 8003086:	e742      	b.n	8002f0e <_dtoa_r+0x39e>
 8003088:	9c07      	ldr	r4, [sp, #28]
 800308a:	9704      	str	r7, [sp, #16]
 800308c:	e761      	b.n	8002f52 <_dtoa_r+0x3e2>
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <_dtoa_r+0x5bc>)
 8003090:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003092:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003096:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800309a:	4454      	add	r4, sl
 800309c:	2900      	cmp	r1, #0
 800309e:	d053      	beq.n	8003148 <_dtoa_r+0x5d8>
 80030a0:	4928      	ldr	r1, [pc, #160]	@ (8003144 <_dtoa_r+0x5d4>)
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fbda 	bl	800085c <__aeabi_ddiv>
 80030a8:	4633      	mov	r3, r6
 80030aa:	462a      	mov	r2, r5
 80030ac:	f7fd f8f4 	bl	8000298 <__aeabi_dsub>
 80030b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80030b4:	4656      	mov	r6, sl
 80030b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030ba:	f7fd fd55 	bl	8000b68 <__aeabi_d2iz>
 80030be:	4605      	mov	r5, r0
 80030c0:	f7fd fa38 	bl	8000534 <__aeabi_i2d>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030cc:	f7fd f8e4 	bl	8000298 <__aeabi_dsub>
 80030d0:	3530      	adds	r5, #48	@ 0x30
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030da:	f806 5b01 	strb.w	r5, [r6], #1
 80030de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80030e2:	f7fd fd03 	bl	8000aec <__aeabi_dcmplt>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d171      	bne.n	80031ce <_dtoa_r+0x65e>
 80030ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030ee:	4911      	ldr	r1, [pc, #68]	@ (8003134 <_dtoa_r+0x5c4>)
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd f8d1 	bl	8000298 <__aeabi_dsub>
 80030f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80030fa:	f7fd fcf7 	bl	8000aec <__aeabi_dcmplt>
 80030fe:	2800      	cmp	r0, #0
 8003100:	f040 8095 	bne.w	800322e <_dtoa_r+0x6be>
 8003104:	42a6      	cmp	r6, r4
 8003106:	f43f af50 	beq.w	8002faa <_dtoa_r+0x43a>
 800310a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <_dtoa_r+0x5c8>)
 8003110:	2200      	movs	r2, #0
 8003112:	f7fd fa79 	bl	8000608 <__aeabi_dmul>
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <_dtoa_r+0x5c8>)
 8003118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800311c:	2200      	movs	r2, #0
 800311e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003122:	f7fd fa71 	bl	8000608 <__aeabi_dmul>
 8003126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800312a:	e7c4      	b.n	80030b6 <_dtoa_r+0x546>
 800312c:	08004eb0 	.word	0x08004eb0
 8003130:	08004e88 	.word	0x08004e88
 8003134:	3ff00000 	.word	0x3ff00000
 8003138:	40240000 	.word	0x40240000
 800313c:	401c0000 	.word	0x401c0000
 8003140:	40140000 	.word	0x40140000
 8003144:	3fe00000 	.word	0x3fe00000
 8003148:	4631      	mov	r1, r6
 800314a:	4628      	mov	r0, r5
 800314c:	f7fd fa5c 	bl	8000608 <__aeabi_dmul>
 8003150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003154:	9415      	str	r4, [sp, #84]	@ 0x54
 8003156:	4656      	mov	r6, sl
 8003158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800315c:	f7fd fd04 	bl	8000b68 <__aeabi_d2iz>
 8003160:	4605      	mov	r5, r0
 8003162:	f7fd f9e7 	bl	8000534 <__aeabi_i2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800316e:	f7fd f893 	bl	8000298 <__aeabi_dsub>
 8003172:	3530      	adds	r5, #48	@ 0x30
 8003174:	f806 5b01 	strb.w	r5, [r6], #1
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	42a6      	cmp	r6, r4
 800317e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	d124      	bne.n	80031d2 <_dtoa_r+0x662>
 8003188:	4bac      	ldr	r3, [pc, #688]	@ (800343c <_dtoa_r+0x8cc>)
 800318a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800318e:	f7fd f885 	bl	800029c <__adddf3>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800319a:	f7fd fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d145      	bne.n	800322e <_dtoa_r+0x6be>
 80031a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80031a6:	49a5      	ldr	r1, [pc, #660]	@ (800343c <_dtoa_r+0x8cc>)
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd f875 	bl	8000298 <__aeabi_dsub>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031b6:	f7fd fc99 	bl	8000aec <__aeabi_dcmplt>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	f43f aef5 	beq.w	8002faa <_dtoa_r+0x43a>
 80031c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80031c2:	1e73      	subs	r3, r6, #1
 80031c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80031c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80031ca:	2b30      	cmp	r3, #48	@ 0x30
 80031cc:	d0f8      	beq.n	80031c0 <_dtoa_r+0x650>
 80031ce:	9f04      	ldr	r7, [sp, #16]
 80031d0:	e73e      	b.n	8003050 <_dtoa_r+0x4e0>
 80031d2:	4b9b      	ldr	r3, [pc, #620]	@ (8003440 <_dtoa_r+0x8d0>)
 80031d4:	f7fd fa18 	bl	8000608 <__aeabi_dmul>
 80031d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031dc:	e7bc      	b.n	8003158 <_dtoa_r+0x5e8>
 80031de:	d10c      	bne.n	80031fa <_dtoa_r+0x68a>
 80031e0:	4b98      	ldr	r3, [pc, #608]	@ (8003444 <_dtoa_r+0x8d4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031e8:	f7fd fa0e 	bl	8000608 <__aeabi_dmul>
 80031ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031f0:	f7fd fc90 	bl	8000b14 <__aeabi_dcmpge>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	f000 8157 	beq.w	80034a8 <_dtoa_r+0x938>
 80031fa:	2400      	movs	r4, #0
 80031fc:	4625      	mov	r5, r4
 80031fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003200:	43db      	mvns	r3, r3
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	4656      	mov	r6, sl
 8003206:	2700      	movs	r7, #0
 8003208:	4621      	mov	r1, r4
 800320a:	4658      	mov	r0, fp
 800320c:	f000 fbb4 	bl	8003978 <_Bfree>
 8003210:	2d00      	cmp	r5, #0
 8003212:	d0dc      	beq.n	80031ce <_dtoa_r+0x65e>
 8003214:	b12f      	cbz	r7, 8003222 <_dtoa_r+0x6b2>
 8003216:	42af      	cmp	r7, r5
 8003218:	d003      	beq.n	8003222 <_dtoa_r+0x6b2>
 800321a:	4639      	mov	r1, r7
 800321c:	4658      	mov	r0, fp
 800321e:	f000 fbab 	bl	8003978 <_Bfree>
 8003222:	4629      	mov	r1, r5
 8003224:	4658      	mov	r0, fp
 8003226:	f000 fba7 	bl	8003978 <_Bfree>
 800322a:	e7d0      	b.n	80031ce <_dtoa_r+0x65e>
 800322c:	9704      	str	r7, [sp, #16]
 800322e:	4633      	mov	r3, r6
 8003230:	461e      	mov	r6, r3
 8003232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003236:	2a39      	cmp	r2, #57	@ 0x39
 8003238:	d107      	bne.n	800324a <_dtoa_r+0x6da>
 800323a:	459a      	cmp	sl, r3
 800323c:	d1f8      	bne.n	8003230 <_dtoa_r+0x6c0>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	3201      	adds	r2, #1
 8003242:	9204      	str	r2, [sp, #16]
 8003244:	2230      	movs	r2, #48	@ 0x30
 8003246:	f88a 2000 	strb.w	r2, [sl]
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	3201      	adds	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e7bd      	b.n	80031ce <_dtoa_r+0x65e>
 8003252:	4b7b      	ldr	r3, [pc, #492]	@ (8003440 <_dtoa_r+0x8d0>)
 8003254:	2200      	movs	r2, #0
 8003256:	f7fd f9d7 	bl	8000608 <__aeabi_dmul>
 800325a:	2200      	movs	r2, #0
 800325c:	2300      	movs	r3, #0
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	f7fd fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8003266:	2800      	cmp	r0, #0
 8003268:	f43f aebb 	beq.w	8002fe2 <_dtoa_r+0x472>
 800326c:	e6f0      	b.n	8003050 <_dtoa_r+0x4e0>
 800326e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003270:	2a00      	cmp	r2, #0
 8003272:	f000 80db 	beq.w	800342c <_dtoa_r+0x8bc>
 8003276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003278:	2a01      	cmp	r2, #1
 800327a:	f300 80bf 	bgt.w	80033fc <_dtoa_r+0x88c>
 800327e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003280:	2a00      	cmp	r2, #0
 8003282:	f000 80b7 	beq.w	80033f4 <_dtoa_r+0x884>
 8003286:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800328a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800328c:	4646      	mov	r6, r8
 800328e:	9a08      	ldr	r2, [sp, #32]
 8003290:	2101      	movs	r1, #1
 8003292:	441a      	add	r2, r3
 8003294:	4658      	mov	r0, fp
 8003296:	4498      	add	r8, r3
 8003298:	9208      	str	r2, [sp, #32]
 800329a:	f000 fc21 	bl	8003ae0 <__i2b>
 800329e:	4605      	mov	r5, r0
 80032a0:	b15e      	cbz	r6, 80032ba <_dtoa_r+0x74a>
 80032a2:	9b08      	ldr	r3, [sp, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dd08      	ble.n	80032ba <_dtoa_r+0x74a>
 80032a8:	42b3      	cmp	r3, r6
 80032aa:	9a08      	ldr	r2, [sp, #32]
 80032ac:	bfa8      	it	ge
 80032ae:	4633      	movge	r3, r6
 80032b0:	eba8 0803 	sub.w	r8, r8, r3
 80032b4:	1af6      	subs	r6, r6, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	9308      	str	r3, [sp, #32]
 80032ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032bc:	b1f3      	cbz	r3, 80032fc <_dtoa_r+0x78c>
 80032be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80b7 	beq.w	8003434 <_dtoa_r+0x8c4>
 80032c6:	b18c      	cbz	r4, 80032ec <_dtoa_r+0x77c>
 80032c8:	4629      	mov	r1, r5
 80032ca:	4622      	mov	r2, r4
 80032cc:	4658      	mov	r0, fp
 80032ce:	f000 fcc7 	bl	8003c60 <__pow5mult>
 80032d2:	464a      	mov	r2, r9
 80032d4:	4601      	mov	r1, r0
 80032d6:	4605      	mov	r5, r0
 80032d8:	4658      	mov	r0, fp
 80032da:	f000 fc17 	bl	8003b0c <__multiply>
 80032de:	4649      	mov	r1, r9
 80032e0:	9004      	str	r0, [sp, #16]
 80032e2:	4658      	mov	r0, fp
 80032e4:	f000 fb48 	bl	8003978 <_Bfree>
 80032e8:	9b04      	ldr	r3, [sp, #16]
 80032ea:	4699      	mov	r9, r3
 80032ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032ee:	1b1a      	subs	r2, r3, r4
 80032f0:	d004      	beq.n	80032fc <_dtoa_r+0x78c>
 80032f2:	4649      	mov	r1, r9
 80032f4:	4658      	mov	r0, fp
 80032f6:	f000 fcb3 	bl	8003c60 <__pow5mult>
 80032fa:	4681      	mov	r9, r0
 80032fc:	2101      	movs	r1, #1
 80032fe:	4658      	mov	r0, fp
 8003300:	f000 fbee 	bl	8003ae0 <__i2b>
 8003304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003306:	4604      	mov	r4, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 81cf 	beq.w	80036ac <_dtoa_r+0xb3c>
 800330e:	461a      	mov	r2, r3
 8003310:	4601      	mov	r1, r0
 8003312:	4658      	mov	r0, fp
 8003314:	f000 fca4 	bl	8003c60 <__pow5mult>
 8003318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800331a:	2b01      	cmp	r3, #1
 800331c:	4604      	mov	r4, r0
 800331e:	f300 8095 	bgt.w	800344c <_dtoa_r+0x8dc>
 8003322:	9b02      	ldr	r3, [sp, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 8087 	bne.w	8003438 <_dtoa_r+0x8c8>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 8089 	bne.w	8003448 <_dtoa_r+0x8d8>
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800333c:	0d1b      	lsrs	r3, r3, #20
 800333e:	051b      	lsls	r3, r3, #20
 8003340:	b12b      	cbz	r3, 800334e <_dtoa_r+0x7de>
 8003342:	9b08      	ldr	r3, [sp, #32]
 8003344:	3301      	adds	r3, #1
 8003346:	9308      	str	r3, [sp, #32]
 8003348:	f108 0801 	add.w	r8, r8, #1
 800334c:	2301      	movs	r3, #1
 800334e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 81b0 	beq.w	80036b8 <_dtoa_r+0xb48>
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800335e:	6918      	ldr	r0, [r3, #16]
 8003360:	f000 fb72 	bl	8003a48 <__hi0bits>
 8003364:	f1c0 0020 	rsb	r0, r0, #32
 8003368:	9b08      	ldr	r3, [sp, #32]
 800336a:	4418      	add	r0, r3
 800336c:	f010 001f 	ands.w	r0, r0, #31
 8003370:	d077      	beq.n	8003462 <_dtoa_r+0x8f2>
 8003372:	f1c0 0320 	rsb	r3, r0, #32
 8003376:	2b04      	cmp	r3, #4
 8003378:	dd6b      	ble.n	8003452 <_dtoa_r+0x8e2>
 800337a:	9b08      	ldr	r3, [sp, #32]
 800337c:	f1c0 001c 	rsb	r0, r0, #28
 8003380:	4403      	add	r3, r0
 8003382:	4480      	add	r8, r0
 8003384:	4406      	add	r6, r0
 8003386:	9308      	str	r3, [sp, #32]
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	dd05      	ble.n	800339a <_dtoa_r+0x82a>
 800338e:	4649      	mov	r1, r9
 8003390:	4642      	mov	r2, r8
 8003392:	4658      	mov	r0, fp
 8003394:	f000 fcbe 	bl	8003d14 <__lshift>
 8003398:	4681      	mov	r9, r0
 800339a:	9b08      	ldr	r3, [sp, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd05      	ble.n	80033ac <_dtoa_r+0x83c>
 80033a0:	4621      	mov	r1, r4
 80033a2:	461a      	mov	r2, r3
 80033a4:	4658      	mov	r0, fp
 80033a6:	f000 fcb5 	bl	8003d14 <__lshift>
 80033aa:	4604      	mov	r4, r0
 80033ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d059      	beq.n	8003466 <_dtoa_r+0x8f6>
 80033b2:	4621      	mov	r1, r4
 80033b4:	4648      	mov	r0, r9
 80033b6:	f000 fd19 	bl	8003dec <__mcmp>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	da53      	bge.n	8003466 <_dtoa_r+0x8f6>
 80033be:	1e7b      	subs	r3, r7, #1
 80033c0:	9304      	str	r3, [sp, #16]
 80033c2:	4649      	mov	r1, r9
 80033c4:	2300      	movs	r3, #0
 80033c6:	220a      	movs	r2, #10
 80033c8:	4658      	mov	r0, fp
 80033ca:	f000 faf7 	bl	80039bc <__multadd>
 80033ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033d0:	4681      	mov	r9, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8172 	beq.w	80036bc <_dtoa_r+0xb4c>
 80033d8:	2300      	movs	r3, #0
 80033da:	4629      	mov	r1, r5
 80033dc:	220a      	movs	r2, #10
 80033de:	4658      	mov	r0, fp
 80033e0:	f000 faec 	bl	80039bc <__multadd>
 80033e4:	9b00      	ldr	r3, [sp, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	4605      	mov	r5, r0
 80033ea:	dc67      	bgt.n	80034bc <_dtoa_r+0x94c>
 80033ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	dc41      	bgt.n	8003476 <_dtoa_r+0x906>
 80033f2:	e063      	b.n	80034bc <_dtoa_r+0x94c>
 80033f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80033f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80033fa:	e746      	b.n	800328a <_dtoa_r+0x71a>
 80033fc:	9b07      	ldr	r3, [sp, #28]
 80033fe:	1e5c      	subs	r4, r3, #1
 8003400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003402:	42a3      	cmp	r3, r4
 8003404:	bfbf      	itttt	lt
 8003406:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003408:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800340a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800340c:	1ae3      	sublt	r3, r4, r3
 800340e:	bfb4      	ite	lt
 8003410:	18d2      	addlt	r2, r2, r3
 8003412:	1b1c      	subge	r4, r3, r4
 8003414:	9b07      	ldr	r3, [sp, #28]
 8003416:	bfbc      	itt	lt
 8003418:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800341a:	2400      	movlt	r4, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	bfb5      	itete	lt
 8003420:	eba8 0603 	sublt.w	r6, r8, r3
 8003424:	9b07      	ldrge	r3, [sp, #28]
 8003426:	2300      	movlt	r3, #0
 8003428:	4646      	movge	r6, r8
 800342a:	e730      	b.n	800328e <_dtoa_r+0x71e>
 800342c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800342e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003430:	4646      	mov	r6, r8
 8003432:	e735      	b.n	80032a0 <_dtoa_r+0x730>
 8003434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003436:	e75c      	b.n	80032f2 <_dtoa_r+0x782>
 8003438:	2300      	movs	r3, #0
 800343a:	e788      	b.n	800334e <_dtoa_r+0x7de>
 800343c:	3fe00000 	.word	0x3fe00000
 8003440:	40240000 	.word	0x40240000
 8003444:	40140000 	.word	0x40140000
 8003448:	9b02      	ldr	r3, [sp, #8]
 800344a:	e780      	b.n	800334e <_dtoa_r+0x7de>
 800344c:	2300      	movs	r3, #0
 800344e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003450:	e782      	b.n	8003358 <_dtoa_r+0x7e8>
 8003452:	d099      	beq.n	8003388 <_dtoa_r+0x818>
 8003454:	9a08      	ldr	r2, [sp, #32]
 8003456:	331c      	adds	r3, #28
 8003458:	441a      	add	r2, r3
 800345a:	4498      	add	r8, r3
 800345c:	441e      	add	r6, r3
 800345e:	9208      	str	r2, [sp, #32]
 8003460:	e792      	b.n	8003388 <_dtoa_r+0x818>
 8003462:	4603      	mov	r3, r0
 8003464:	e7f6      	b.n	8003454 <_dtoa_r+0x8e4>
 8003466:	9b07      	ldr	r3, [sp, #28]
 8003468:	9704      	str	r7, [sp, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc20      	bgt.n	80034b0 <_dtoa_r+0x940>
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003472:	2b02      	cmp	r3, #2
 8003474:	dd1e      	ble.n	80034b4 <_dtoa_r+0x944>
 8003476:	9b00      	ldr	r3, [sp, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f aec0 	bne.w	80031fe <_dtoa_r+0x68e>
 800347e:	4621      	mov	r1, r4
 8003480:	2205      	movs	r2, #5
 8003482:	4658      	mov	r0, fp
 8003484:	f000 fa9a 	bl	80039bc <__multadd>
 8003488:	4601      	mov	r1, r0
 800348a:	4604      	mov	r4, r0
 800348c:	4648      	mov	r0, r9
 800348e:	f000 fcad 	bl	8003dec <__mcmp>
 8003492:	2800      	cmp	r0, #0
 8003494:	f77f aeb3 	ble.w	80031fe <_dtoa_r+0x68e>
 8003498:	4656      	mov	r6, sl
 800349a:	2331      	movs	r3, #49	@ 0x31
 800349c:	f806 3b01 	strb.w	r3, [r6], #1
 80034a0:	9b04      	ldr	r3, [sp, #16]
 80034a2:	3301      	adds	r3, #1
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	e6ae      	b.n	8003206 <_dtoa_r+0x696>
 80034a8:	9c07      	ldr	r4, [sp, #28]
 80034aa:	9704      	str	r7, [sp, #16]
 80034ac:	4625      	mov	r5, r4
 80034ae:	e7f3      	b.n	8003498 <_dtoa_r+0x928>
 80034b0:	9b07      	ldr	r3, [sp, #28]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8104 	beq.w	80036c4 <_dtoa_r+0xb54>
 80034bc:	2e00      	cmp	r6, #0
 80034be:	dd05      	ble.n	80034cc <_dtoa_r+0x95c>
 80034c0:	4629      	mov	r1, r5
 80034c2:	4632      	mov	r2, r6
 80034c4:	4658      	mov	r0, fp
 80034c6:	f000 fc25 	bl	8003d14 <__lshift>
 80034ca:	4605      	mov	r5, r0
 80034cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d05a      	beq.n	8003588 <_dtoa_r+0xa18>
 80034d2:	6869      	ldr	r1, [r5, #4]
 80034d4:	4658      	mov	r0, fp
 80034d6:	f000 fa0f 	bl	80038f8 <_Balloc>
 80034da:	4606      	mov	r6, r0
 80034dc:	b928      	cbnz	r0, 80034ea <_dtoa_r+0x97a>
 80034de:	4b84      	ldr	r3, [pc, #528]	@ (80036f0 <_dtoa_r+0xb80>)
 80034e0:	4602      	mov	r2, r0
 80034e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80034e6:	f7ff bb5a 	b.w	8002b9e <_dtoa_r+0x2e>
 80034ea:	692a      	ldr	r2, [r5, #16]
 80034ec:	3202      	adds	r2, #2
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	f105 010c 	add.w	r1, r5, #12
 80034f4:	300c      	adds	r0, #12
 80034f6:	f000 ffaf 	bl	8004458 <memcpy>
 80034fa:	2201      	movs	r2, #1
 80034fc:	4631      	mov	r1, r6
 80034fe:	4658      	mov	r0, fp
 8003500:	f000 fc08 	bl	8003d14 <__lshift>
 8003504:	f10a 0301 	add.w	r3, sl, #1
 8003508:	9307      	str	r3, [sp, #28]
 800350a:	9b00      	ldr	r3, [sp, #0]
 800350c:	4453      	add	r3, sl
 800350e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003510:	9b02      	ldr	r3, [sp, #8]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	462f      	mov	r7, r5
 8003518:	930a      	str	r3, [sp, #40]	@ 0x28
 800351a:	4605      	mov	r5, r0
 800351c:	9b07      	ldr	r3, [sp, #28]
 800351e:	4621      	mov	r1, r4
 8003520:	3b01      	subs	r3, #1
 8003522:	4648      	mov	r0, r9
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	f7ff fa98 	bl	8002a5a <quorem>
 800352a:	4639      	mov	r1, r7
 800352c:	9002      	str	r0, [sp, #8]
 800352e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003532:	4648      	mov	r0, r9
 8003534:	f000 fc5a 	bl	8003dec <__mcmp>
 8003538:	462a      	mov	r2, r5
 800353a:	9008      	str	r0, [sp, #32]
 800353c:	4621      	mov	r1, r4
 800353e:	4658      	mov	r0, fp
 8003540:	f000 fc70 	bl	8003e24 <__mdiff>
 8003544:	68c2      	ldr	r2, [r0, #12]
 8003546:	4606      	mov	r6, r0
 8003548:	bb02      	cbnz	r2, 800358c <_dtoa_r+0xa1c>
 800354a:	4601      	mov	r1, r0
 800354c:	4648      	mov	r0, r9
 800354e:	f000 fc4d 	bl	8003dec <__mcmp>
 8003552:	4602      	mov	r2, r0
 8003554:	4631      	mov	r1, r6
 8003556:	4658      	mov	r0, fp
 8003558:	920e      	str	r2, [sp, #56]	@ 0x38
 800355a:	f000 fa0d 	bl	8003978 <_Bfree>
 800355e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003562:	9e07      	ldr	r6, [sp, #28]
 8003564:	ea43 0102 	orr.w	r1, r3, r2
 8003568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800356a:	4319      	orrs	r1, r3
 800356c:	d110      	bne.n	8003590 <_dtoa_r+0xa20>
 800356e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003572:	d029      	beq.n	80035c8 <_dtoa_r+0xa58>
 8003574:	9b08      	ldr	r3, [sp, #32]
 8003576:	2b00      	cmp	r3, #0
 8003578:	dd02      	ble.n	8003580 <_dtoa_r+0xa10>
 800357a:	9b02      	ldr	r3, [sp, #8]
 800357c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003580:	9b00      	ldr	r3, [sp, #0]
 8003582:	f883 8000 	strb.w	r8, [r3]
 8003586:	e63f      	b.n	8003208 <_dtoa_r+0x698>
 8003588:	4628      	mov	r0, r5
 800358a:	e7bb      	b.n	8003504 <_dtoa_r+0x994>
 800358c:	2201      	movs	r2, #1
 800358e:	e7e1      	b.n	8003554 <_dtoa_r+0x9e4>
 8003590:	9b08      	ldr	r3, [sp, #32]
 8003592:	2b00      	cmp	r3, #0
 8003594:	db04      	blt.n	80035a0 <_dtoa_r+0xa30>
 8003596:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003598:	430b      	orrs	r3, r1
 800359a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800359c:	430b      	orrs	r3, r1
 800359e:	d120      	bne.n	80035e2 <_dtoa_r+0xa72>
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	dded      	ble.n	8003580 <_dtoa_r+0xa10>
 80035a4:	4649      	mov	r1, r9
 80035a6:	2201      	movs	r2, #1
 80035a8:	4658      	mov	r0, fp
 80035aa:	f000 fbb3 	bl	8003d14 <__lshift>
 80035ae:	4621      	mov	r1, r4
 80035b0:	4681      	mov	r9, r0
 80035b2:	f000 fc1b 	bl	8003dec <__mcmp>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	dc03      	bgt.n	80035c2 <_dtoa_r+0xa52>
 80035ba:	d1e1      	bne.n	8003580 <_dtoa_r+0xa10>
 80035bc:	f018 0f01 	tst.w	r8, #1
 80035c0:	d0de      	beq.n	8003580 <_dtoa_r+0xa10>
 80035c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80035c6:	d1d8      	bne.n	800357a <_dtoa_r+0xa0a>
 80035c8:	9a00      	ldr	r2, [sp, #0]
 80035ca:	2339      	movs	r3, #57	@ 0x39
 80035cc:	7013      	strb	r3, [r2, #0]
 80035ce:	4633      	mov	r3, r6
 80035d0:	461e      	mov	r6, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80035d8:	2a39      	cmp	r2, #57	@ 0x39
 80035da:	d052      	beq.n	8003682 <_dtoa_r+0xb12>
 80035dc:	3201      	adds	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e612      	b.n	8003208 <_dtoa_r+0x698>
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	dd07      	ble.n	80035f6 <_dtoa_r+0xa86>
 80035e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80035ea:	d0ed      	beq.n	80035c8 <_dtoa_r+0xa58>
 80035ec:	9a00      	ldr	r2, [sp, #0]
 80035ee:	f108 0301 	add.w	r3, r8, #1
 80035f2:	7013      	strb	r3, [r2, #0]
 80035f4:	e608      	b.n	8003208 <_dtoa_r+0x698>
 80035f6:	9b07      	ldr	r3, [sp, #28]
 80035f8:	9a07      	ldr	r2, [sp, #28]
 80035fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80035fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003600:	4293      	cmp	r3, r2
 8003602:	d028      	beq.n	8003656 <_dtoa_r+0xae6>
 8003604:	4649      	mov	r1, r9
 8003606:	2300      	movs	r3, #0
 8003608:	220a      	movs	r2, #10
 800360a:	4658      	mov	r0, fp
 800360c:	f000 f9d6 	bl	80039bc <__multadd>
 8003610:	42af      	cmp	r7, r5
 8003612:	4681      	mov	r9, r0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	f04f 020a 	mov.w	r2, #10
 800361c:	4639      	mov	r1, r7
 800361e:	4658      	mov	r0, fp
 8003620:	d107      	bne.n	8003632 <_dtoa_r+0xac2>
 8003622:	f000 f9cb 	bl	80039bc <__multadd>
 8003626:	4607      	mov	r7, r0
 8003628:	4605      	mov	r5, r0
 800362a:	9b07      	ldr	r3, [sp, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	9307      	str	r3, [sp, #28]
 8003630:	e774      	b.n	800351c <_dtoa_r+0x9ac>
 8003632:	f000 f9c3 	bl	80039bc <__multadd>
 8003636:	4629      	mov	r1, r5
 8003638:	4607      	mov	r7, r0
 800363a:	2300      	movs	r3, #0
 800363c:	220a      	movs	r2, #10
 800363e:	4658      	mov	r0, fp
 8003640:	f000 f9bc 	bl	80039bc <__multadd>
 8003644:	4605      	mov	r5, r0
 8003646:	e7f0      	b.n	800362a <_dtoa_r+0xaba>
 8003648:	9b00      	ldr	r3, [sp, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	bfcc      	ite	gt
 800364e:	461e      	movgt	r6, r3
 8003650:	2601      	movle	r6, #1
 8003652:	4456      	add	r6, sl
 8003654:	2700      	movs	r7, #0
 8003656:	4649      	mov	r1, r9
 8003658:	2201      	movs	r2, #1
 800365a:	4658      	mov	r0, fp
 800365c:	f000 fb5a 	bl	8003d14 <__lshift>
 8003660:	4621      	mov	r1, r4
 8003662:	4681      	mov	r9, r0
 8003664:	f000 fbc2 	bl	8003dec <__mcmp>
 8003668:	2800      	cmp	r0, #0
 800366a:	dcb0      	bgt.n	80035ce <_dtoa_r+0xa5e>
 800366c:	d102      	bne.n	8003674 <_dtoa_r+0xb04>
 800366e:	f018 0f01 	tst.w	r8, #1
 8003672:	d1ac      	bne.n	80035ce <_dtoa_r+0xa5e>
 8003674:	4633      	mov	r3, r6
 8003676:	461e      	mov	r6, r3
 8003678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800367c:	2a30      	cmp	r2, #48	@ 0x30
 800367e:	d0fa      	beq.n	8003676 <_dtoa_r+0xb06>
 8003680:	e5c2      	b.n	8003208 <_dtoa_r+0x698>
 8003682:	459a      	cmp	sl, r3
 8003684:	d1a4      	bne.n	80035d0 <_dtoa_r+0xa60>
 8003686:	9b04      	ldr	r3, [sp, #16]
 8003688:	3301      	adds	r3, #1
 800368a:	9304      	str	r3, [sp, #16]
 800368c:	2331      	movs	r3, #49	@ 0x31
 800368e:	f88a 3000 	strb.w	r3, [sl]
 8003692:	e5b9      	b.n	8003208 <_dtoa_r+0x698>
 8003694:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003696:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80036f4 <_dtoa_r+0xb84>
 800369a:	b11b      	cbz	r3, 80036a4 <_dtoa_r+0xb34>
 800369c:	f10a 0308 	add.w	r3, sl, #8
 80036a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4650      	mov	r0, sl
 80036a6:	b019      	add	sp, #100	@ 0x64
 80036a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f77f ae37 	ble.w	8003322 <_dtoa_r+0x7b2>
 80036b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80036b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80036b8:	2001      	movs	r0, #1
 80036ba:	e655      	b.n	8003368 <_dtoa_r+0x7f8>
 80036bc:	9b00      	ldr	r3, [sp, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f77f aed6 	ble.w	8003470 <_dtoa_r+0x900>
 80036c4:	4656      	mov	r6, sl
 80036c6:	4621      	mov	r1, r4
 80036c8:	4648      	mov	r0, r9
 80036ca:	f7ff f9c6 	bl	8002a5a <quorem>
 80036ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80036d2:	f806 8b01 	strb.w	r8, [r6], #1
 80036d6:	9b00      	ldr	r3, [sp, #0]
 80036d8:	eba6 020a 	sub.w	r2, r6, sl
 80036dc:	4293      	cmp	r3, r2
 80036de:	ddb3      	ble.n	8003648 <_dtoa_r+0xad8>
 80036e0:	4649      	mov	r1, r9
 80036e2:	2300      	movs	r3, #0
 80036e4:	220a      	movs	r2, #10
 80036e6:	4658      	mov	r0, fp
 80036e8:	f000 f968 	bl	80039bc <__multadd>
 80036ec:	4681      	mov	r9, r0
 80036ee:	e7ea      	b.n	80036c6 <_dtoa_r+0xb56>
 80036f0:	08004e0f 	.word	0x08004e0f
 80036f4:	08004d93 	.word	0x08004d93

080036f8 <_free_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4605      	mov	r5, r0
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d041      	beq.n	8003784 <_free_r+0x8c>
 8003700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003704:	1f0c      	subs	r4, r1, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfb8      	it	lt
 800370a:	18e4      	addlt	r4, r4, r3
 800370c:	f000 f8e8 	bl	80038e0 <__malloc_lock>
 8003710:	4a1d      	ldr	r2, [pc, #116]	@ (8003788 <_free_r+0x90>)
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	b933      	cbnz	r3, 8003724 <_free_r+0x2c>
 8003716:	6063      	str	r3, [r4, #4]
 8003718:	6014      	str	r4, [r2, #0]
 800371a:	4628      	mov	r0, r5
 800371c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003720:	f000 b8e4 	b.w	80038ec <__malloc_unlock>
 8003724:	42a3      	cmp	r3, r4
 8003726:	d908      	bls.n	800373a <_free_r+0x42>
 8003728:	6820      	ldr	r0, [r4, #0]
 800372a:	1821      	adds	r1, r4, r0
 800372c:	428b      	cmp	r3, r1
 800372e:	bf01      	itttt	eq
 8003730:	6819      	ldreq	r1, [r3, #0]
 8003732:	685b      	ldreq	r3, [r3, #4]
 8003734:	1809      	addeq	r1, r1, r0
 8003736:	6021      	streq	r1, [r4, #0]
 8003738:	e7ed      	b.n	8003716 <_free_r+0x1e>
 800373a:	461a      	mov	r2, r3
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b10b      	cbz	r3, 8003744 <_free_r+0x4c>
 8003740:	42a3      	cmp	r3, r4
 8003742:	d9fa      	bls.n	800373a <_free_r+0x42>
 8003744:	6811      	ldr	r1, [r2, #0]
 8003746:	1850      	adds	r0, r2, r1
 8003748:	42a0      	cmp	r0, r4
 800374a:	d10b      	bne.n	8003764 <_free_r+0x6c>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	4401      	add	r1, r0
 8003750:	1850      	adds	r0, r2, r1
 8003752:	4283      	cmp	r3, r0
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	d1e0      	bne.n	800371a <_free_r+0x22>
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	6053      	str	r3, [r2, #4]
 800375e:	4408      	add	r0, r1
 8003760:	6010      	str	r0, [r2, #0]
 8003762:	e7da      	b.n	800371a <_free_r+0x22>
 8003764:	d902      	bls.n	800376c <_free_r+0x74>
 8003766:	230c      	movs	r3, #12
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	e7d6      	b.n	800371a <_free_r+0x22>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	1821      	adds	r1, r4, r0
 8003770:	428b      	cmp	r3, r1
 8003772:	bf04      	itt	eq
 8003774:	6819      	ldreq	r1, [r3, #0]
 8003776:	685b      	ldreq	r3, [r3, #4]
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	bf04      	itt	eq
 800377c:	1809      	addeq	r1, r1, r0
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	6054      	str	r4, [r2, #4]
 8003782:	e7ca      	b.n	800371a <_free_r+0x22>
 8003784:	bd38      	pop	{r3, r4, r5, pc}
 8003786:	bf00      	nop
 8003788:	20000340 	.word	0x20000340

0800378c <malloc>:
 800378c:	4b02      	ldr	r3, [pc, #8]	@ (8003798 <malloc+0xc>)
 800378e:	4601      	mov	r1, r0
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f000 b825 	b.w	80037e0 <_malloc_r>
 8003796:	bf00      	nop
 8003798:	20000010 	.word	0x20000010

0800379c <sbrk_aligned>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4e0f      	ldr	r6, [pc, #60]	@ (80037dc <sbrk_aligned+0x40>)
 80037a0:	460c      	mov	r4, r1
 80037a2:	6831      	ldr	r1, [r6, #0]
 80037a4:	4605      	mov	r5, r0
 80037a6:	b911      	cbnz	r1, 80037ae <sbrk_aligned+0x12>
 80037a8:	f000 fe46 	bl	8004438 <_sbrk_r>
 80037ac:	6030      	str	r0, [r6, #0]
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 fe41 	bl	8004438 <_sbrk_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d103      	bne.n	80037c2 <sbrk_aligned+0x26>
 80037ba:	f04f 34ff 	mov.w	r4, #4294967295
 80037be:	4620      	mov	r0, r4
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	1cc4      	adds	r4, r0, #3
 80037c4:	f024 0403 	bic.w	r4, r4, #3
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d0f8      	beq.n	80037be <sbrk_aligned+0x22>
 80037cc:	1a21      	subs	r1, r4, r0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 fe32 	bl	8004438 <_sbrk_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1f2      	bne.n	80037be <sbrk_aligned+0x22>
 80037d8:	e7ef      	b.n	80037ba <sbrk_aligned+0x1e>
 80037da:	bf00      	nop
 80037dc:	2000033c 	.word	0x2000033c

080037e0 <_malloc_r>:
 80037e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e4:	1ccd      	adds	r5, r1, #3
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	4606      	mov	r6, r0
 80037f6:	db01      	blt.n	80037fc <_malloc_r+0x1c>
 80037f8:	42a9      	cmp	r1, r5
 80037fa:	d904      	bls.n	8003806 <_malloc_r+0x26>
 80037fc:	230c      	movs	r3, #12
 80037fe:	6033      	str	r3, [r6, #0]
 8003800:	2000      	movs	r0, #0
 8003802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038dc <_malloc_r+0xfc>
 800380a:	f000 f869 	bl	80038e0 <__malloc_lock>
 800380e:	f8d8 3000 	ldr.w	r3, [r8]
 8003812:	461c      	mov	r4, r3
 8003814:	bb44      	cbnz	r4, 8003868 <_malloc_r+0x88>
 8003816:	4629      	mov	r1, r5
 8003818:	4630      	mov	r0, r6
 800381a:	f7ff ffbf 	bl	800379c <sbrk_aligned>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	4604      	mov	r4, r0
 8003822:	d158      	bne.n	80038d6 <_malloc_r+0xf6>
 8003824:	f8d8 4000 	ldr.w	r4, [r8]
 8003828:	4627      	mov	r7, r4
 800382a:	2f00      	cmp	r7, #0
 800382c:	d143      	bne.n	80038b6 <_malloc_r+0xd6>
 800382e:	2c00      	cmp	r4, #0
 8003830:	d04b      	beq.n	80038ca <_malloc_r+0xea>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	4639      	mov	r1, r7
 8003836:	4630      	mov	r0, r6
 8003838:	eb04 0903 	add.w	r9, r4, r3
 800383c:	f000 fdfc 	bl	8004438 <_sbrk_r>
 8003840:	4581      	cmp	r9, r0
 8003842:	d142      	bne.n	80038ca <_malloc_r+0xea>
 8003844:	6821      	ldr	r1, [r4, #0]
 8003846:	1a6d      	subs	r5, r5, r1
 8003848:	4629      	mov	r1, r5
 800384a:	4630      	mov	r0, r6
 800384c:	f7ff ffa6 	bl	800379c <sbrk_aligned>
 8003850:	3001      	adds	r0, #1
 8003852:	d03a      	beq.n	80038ca <_malloc_r+0xea>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	442b      	add	r3, r5
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	f8d8 3000 	ldr.w	r3, [r8]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	bb62      	cbnz	r2, 80038bc <_malloc_r+0xdc>
 8003862:	f8c8 7000 	str.w	r7, [r8]
 8003866:	e00f      	b.n	8003888 <_malloc_r+0xa8>
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	1b52      	subs	r2, r2, r5
 800386c:	d420      	bmi.n	80038b0 <_malloc_r+0xd0>
 800386e:	2a0b      	cmp	r2, #11
 8003870:	d917      	bls.n	80038a2 <_malloc_r+0xc2>
 8003872:	1961      	adds	r1, r4, r5
 8003874:	42a3      	cmp	r3, r4
 8003876:	6025      	str	r5, [r4, #0]
 8003878:	bf18      	it	ne
 800387a:	6059      	strne	r1, [r3, #4]
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	bf08      	it	eq
 8003880:	f8c8 1000 	streq.w	r1, [r8]
 8003884:	5162      	str	r2, [r4, r5]
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f82f 	bl	80038ec <__malloc_unlock>
 800388e:	f104 000b 	add.w	r0, r4, #11
 8003892:	1d23      	adds	r3, r4, #4
 8003894:	f020 0007 	bic.w	r0, r0, #7
 8003898:	1ac2      	subs	r2, r0, r3
 800389a:	bf1c      	itt	ne
 800389c:	1a1b      	subne	r3, r3, r0
 800389e:	50a3      	strne	r3, [r4, r2]
 80038a0:	e7af      	b.n	8003802 <_malloc_r+0x22>
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	bf0c      	ite	eq
 80038a8:	f8c8 2000 	streq.w	r2, [r8]
 80038ac:	605a      	strne	r2, [r3, #4]
 80038ae:	e7eb      	b.n	8003888 <_malloc_r+0xa8>
 80038b0:	4623      	mov	r3, r4
 80038b2:	6864      	ldr	r4, [r4, #4]
 80038b4:	e7ae      	b.n	8003814 <_malloc_r+0x34>
 80038b6:	463c      	mov	r4, r7
 80038b8:	687f      	ldr	r7, [r7, #4]
 80038ba:	e7b6      	b.n	800382a <_malloc_r+0x4a>
 80038bc:	461a      	mov	r2, r3
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d1fb      	bne.n	80038bc <_malloc_r+0xdc>
 80038c4:	2300      	movs	r3, #0
 80038c6:	6053      	str	r3, [r2, #4]
 80038c8:	e7de      	b.n	8003888 <_malloc_r+0xa8>
 80038ca:	230c      	movs	r3, #12
 80038cc:	6033      	str	r3, [r6, #0]
 80038ce:	4630      	mov	r0, r6
 80038d0:	f000 f80c 	bl	80038ec <__malloc_unlock>
 80038d4:	e794      	b.n	8003800 <_malloc_r+0x20>
 80038d6:	6005      	str	r5, [r0, #0]
 80038d8:	e7d6      	b.n	8003888 <_malloc_r+0xa8>
 80038da:	bf00      	nop
 80038dc:	20000340 	.word	0x20000340

080038e0 <__malloc_lock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	@ (80038e8 <__malloc_lock+0x8>)
 80038e2:	f7ff b8b8 	b.w	8002a56 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000338 	.word	0x20000338

080038ec <__malloc_unlock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	@ (80038f4 <__malloc_unlock+0x8>)
 80038ee:	f7ff b8b3 	b.w	8002a58 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000338 	.word	0x20000338

080038f8 <_Balloc>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	69c6      	ldr	r6, [r0, #28]
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	b976      	cbnz	r6, 8003920 <_Balloc+0x28>
 8003902:	2010      	movs	r0, #16
 8003904:	f7ff ff42 	bl	800378c <malloc>
 8003908:	4602      	mov	r2, r0
 800390a:	61e0      	str	r0, [r4, #28]
 800390c:	b920      	cbnz	r0, 8003918 <_Balloc+0x20>
 800390e:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <_Balloc+0x78>)
 8003910:	4818      	ldr	r0, [pc, #96]	@ (8003974 <_Balloc+0x7c>)
 8003912:	216b      	movs	r1, #107	@ 0x6b
 8003914:	f000 fdae 	bl	8004474 <__assert_func>
 8003918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800391c:	6006      	str	r6, [r0, #0]
 800391e:	60c6      	str	r6, [r0, #12]
 8003920:	69e6      	ldr	r6, [r4, #28]
 8003922:	68f3      	ldr	r3, [r6, #12]
 8003924:	b183      	cbz	r3, 8003948 <_Balloc+0x50>
 8003926:	69e3      	ldr	r3, [r4, #28]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800392e:	b9b8      	cbnz	r0, 8003960 <_Balloc+0x68>
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f605 	lsl.w	r6, r1, r5
 8003936:	1d72      	adds	r2, r6, #5
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4620      	mov	r0, r4
 800393c:	f000 fdb8 	bl	80044b0 <_calloc_r>
 8003940:	b160      	cbz	r0, 800395c <_Balloc+0x64>
 8003942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003946:	e00e      	b.n	8003966 <_Balloc+0x6e>
 8003948:	2221      	movs	r2, #33	@ 0x21
 800394a:	2104      	movs	r1, #4
 800394c:	4620      	mov	r0, r4
 800394e:	f000 fdaf 	bl	80044b0 <_calloc_r>
 8003952:	69e3      	ldr	r3, [r4, #28]
 8003954:	60f0      	str	r0, [r6, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e4      	bne.n	8003926 <_Balloc+0x2e>
 800395c:	2000      	movs	r0, #0
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	6802      	ldr	r2, [r0, #0]
 8003962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003966:	2300      	movs	r3, #0
 8003968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800396c:	e7f7      	b.n	800395e <_Balloc+0x66>
 800396e:	bf00      	nop
 8003970:	08004da0 	.word	0x08004da0
 8003974:	08004e20 	.word	0x08004e20

08003978 <_Bfree>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	69c6      	ldr	r6, [r0, #28]
 800397c:	4605      	mov	r5, r0
 800397e:	460c      	mov	r4, r1
 8003980:	b976      	cbnz	r6, 80039a0 <_Bfree+0x28>
 8003982:	2010      	movs	r0, #16
 8003984:	f7ff ff02 	bl	800378c <malloc>
 8003988:	4602      	mov	r2, r0
 800398a:	61e8      	str	r0, [r5, #28]
 800398c:	b920      	cbnz	r0, 8003998 <_Bfree+0x20>
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <_Bfree+0x3c>)
 8003990:	4809      	ldr	r0, [pc, #36]	@ (80039b8 <_Bfree+0x40>)
 8003992:	218f      	movs	r1, #143	@ 0x8f
 8003994:	f000 fd6e 	bl	8004474 <__assert_func>
 8003998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800399c:	6006      	str	r6, [r0, #0]
 800399e:	60c6      	str	r6, [r0, #12]
 80039a0:	b13c      	cbz	r4, 80039b2 <_Bfree+0x3a>
 80039a2:	69eb      	ldr	r3, [r5, #28]
 80039a4:	6862      	ldr	r2, [r4, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039ac:	6021      	str	r1, [r4, #0]
 80039ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	08004da0 	.word	0x08004da0
 80039b8:	08004e20 	.word	0x08004e20

080039bc <__multadd>:
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	690d      	ldr	r5, [r1, #16]
 80039c2:	4607      	mov	r7, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	461e      	mov	r6, r3
 80039c8:	f101 0c14 	add.w	ip, r1, #20
 80039cc:	2000      	movs	r0, #0
 80039ce:	f8dc 3000 	ldr.w	r3, [ip]
 80039d2:	b299      	uxth	r1, r3
 80039d4:	fb02 6101 	mla	r1, r2, r1, r6
 80039d8:	0c1e      	lsrs	r6, r3, #16
 80039da:	0c0b      	lsrs	r3, r1, #16
 80039dc:	fb02 3306 	mla	r3, r2, r6, r3
 80039e0:	b289      	uxth	r1, r1
 80039e2:	3001      	adds	r0, #1
 80039e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80039e8:	4285      	cmp	r5, r0
 80039ea:	f84c 1b04 	str.w	r1, [ip], #4
 80039ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80039f2:	dcec      	bgt.n	80039ce <__multadd+0x12>
 80039f4:	b30e      	cbz	r6, 8003a3a <__multadd+0x7e>
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	42ab      	cmp	r3, r5
 80039fa:	dc19      	bgt.n	8003a30 <__multadd+0x74>
 80039fc:	6861      	ldr	r1, [r4, #4]
 80039fe:	4638      	mov	r0, r7
 8003a00:	3101      	adds	r1, #1
 8003a02:	f7ff ff79 	bl	80038f8 <_Balloc>
 8003a06:	4680      	mov	r8, r0
 8003a08:	b928      	cbnz	r0, 8003a16 <__multadd+0x5a>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <__multadd+0x84>)
 8003a0e:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <__multadd+0x88>)
 8003a10:	21ba      	movs	r1, #186	@ 0xba
 8003a12:	f000 fd2f 	bl	8004474 <__assert_func>
 8003a16:	6922      	ldr	r2, [r4, #16]
 8003a18:	3202      	adds	r2, #2
 8003a1a:	f104 010c 	add.w	r1, r4, #12
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	300c      	adds	r0, #12
 8003a22:	f000 fd19 	bl	8004458 <memcpy>
 8003a26:	4621      	mov	r1, r4
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f7ff ffa5 	bl	8003978 <_Bfree>
 8003a2e:	4644      	mov	r4, r8
 8003a30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a34:	3501      	adds	r5, #1
 8003a36:	615e      	str	r6, [r3, #20]
 8003a38:	6125      	str	r5, [r4, #16]
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a40:	08004e0f 	.word	0x08004e0f
 8003a44:	08004e20 	.word	0x08004e20

08003a48 <__hi0bits>:
 8003a48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	bf36      	itet	cc
 8003a50:	0403      	lslcc	r3, r0, #16
 8003a52:	2000      	movcs	r0, #0
 8003a54:	2010      	movcc	r0, #16
 8003a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5a:	bf3c      	itt	cc
 8003a5c:	021b      	lslcc	r3, r3, #8
 8003a5e:	3008      	addcc	r0, #8
 8003a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a64:	bf3c      	itt	cc
 8003a66:	011b      	lslcc	r3, r3, #4
 8003a68:	3004      	addcc	r0, #4
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6e:	bf3c      	itt	cc
 8003a70:	009b      	lslcc	r3, r3, #2
 8003a72:	3002      	addcc	r0, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db05      	blt.n	8003a84 <__hi0bits+0x3c>
 8003a78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003a7c:	f100 0001 	add.w	r0, r0, #1
 8003a80:	bf08      	it	eq
 8003a82:	2020      	moveq	r0, #32
 8003a84:	4770      	bx	lr

08003a86 <__lo0bits>:
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f013 0007 	ands.w	r0, r3, #7
 8003a8e:	d00b      	beq.n	8003aa8 <__lo0bits+0x22>
 8003a90:	07d9      	lsls	r1, r3, #31
 8003a92:	d421      	bmi.n	8003ad8 <__lo0bits+0x52>
 8003a94:	0798      	lsls	r0, r3, #30
 8003a96:	bf49      	itett	mi
 8003a98:	085b      	lsrmi	r3, r3, #1
 8003a9a:	089b      	lsrpl	r3, r3, #2
 8003a9c:	2001      	movmi	r0, #1
 8003a9e:	6013      	strmi	r3, [r2, #0]
 8003aa0:	bf5c      	itt	pl
 8003aa2:	6013      	strpl	r3, [r2, #0]
 8003aa4:	2002      	movpl	r0, #2
 8003aa6:	4770      	bx	lr
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	b909      	cbnz	r1, 8003ab0 <__lo0bits+0x2a>
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	2010      	movs	r0, #16
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	b909      	cbnz	r1, 8003ab8 <__lo0bits+0x32>
 8003ab4:	3008      	adds	r0, #8
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	0719      	lsls	r1, r3, #28
 8003aba:	bf04      	itt	eq
 8003abc:	091b      	lsreq	r3, r3, #4
 8003abe:	3004      	addeq	r0, #4
 8003ac0:	0799      	lsls	r1, r3, #30
 8003ac2:	bf04      	itt	eq
 8003ac4:	089b      	lsreq	r3, r3, #2
 8003ac6:	3002      	addeq	r0, #2
 8003ac8:	07d9      	lsls	r1, r3, #31
 8003aca:	d403      	bmi.n	8003ad4 <__lo0bits+0x4e>
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	f100 0001 	add.w	r0, r0, #1
 8003ad2:	d003      	beq.n	8003adc <__lo0bits+0x56>
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4770      	bx	lr
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4770      	bx	lr
 8003adc:	2020      	movs	r0, #32
 8003ade:	4770      	bx	lr

08003ae0 <__i2b>:
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f7ff ff07 	bl	80038f8 <_Balloc>
 8003aea:	4602      	mov	r2, r0
 8003aec:	b928      	cbnz	r0, 8003afa <__i2b+0x1a>
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <__i2b+0x24>)
 8003af0:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <__i2b+0x28>)
 8003af2:	f240 1145 	movw	r1, #325	@ 0x145
 8003af6:	f000 fcbd 	bl	8004474 <__assert_func>
 8003afa:	2301      	movs	r3, #1
 8003afc:	6144      	str	r4, [r0, #20]
 8003afe:	6103      	str	r3, [r0, #16]
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop
 8003b04:	08004e0f 	.word	0x08004e0f
 8003b08:	08004e20 	.word	0x08004e20

08003b0c <__multiply>:
 8003b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b10:	4614      	mov	r4, r2
 8003b12:	690a      	ldr	r2, [r1, #16]
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bfa8      	it	ge
 8003b1a:	4623      	movge	r3, r4
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	bfa4      	itt	ge
 8003b20:	460c      	movge	r4, r1
 8003b22:	461f      	movge	r7, r3
 8003b24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003b28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	6861      	ldr	r1, [r4, #4]
 8003b30:	eb0a 0609 	add.w	r6, sl, r9
 8003b34:	42b3      	cmp	r3, r6
 8003b36:	b085      	sub	sp, #20
 8003b38:	bfb8      	it	lt
 8003b3a:	3101      	addlt	r1, #1
 8003b3c:	f7ff fedc 	bl	80038f8 <_Balloc>
 8003b40:	b930      	cbnz	r0, 8003b50 <__multiply+0x44>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b44      	ldr	r3, [pc, #272]	@ (8003c58 <__multiply+0x14c>)
 8003b46:	4845      	ldr	r0, [pc, #276]	@ (8003c5c <__multiply+0x150>)
 8003b48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003b4c:	f000 fc92 	bl	8004474 <__assert_func>
 8003b50:	f100 0514 	add.w	r5, r0, #20
 8003b54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b58:	462b      	mov	r3, r5
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4543      	cmp	r3, r8
 8003b5e:	d321      	bcc.n	8003ba4 <__multiply+0x98>
 8003b60:	f107 0114 	add.w	r1, r7, #20
 8003b64:	f104 0214 	add.w	r2, r4, #20
 8003b68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003b6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	1b13      	subs	r3, r2, r4
 8003b74:	3b15      	subs	r3, #21
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	f104 0715 	add.w	r7, r4, #21
 8003b80:	42ba      	cmp	r2, r7
 8003b82:	bf38      	it	cc
 8003b84:	2304      	movcc	r3, #4
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	9b02      	ldr	r3, [sp, #8]
 8003b8a:	9103      	str	r1, [sp, #12]
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	d80c      	bhi.n	8003baa <__multiply+0x9e>
 8003b90:	2e00      	cmp	r6, #0
 8003b92:	dd03      	ble.n	8003b9c <__multiply+0x90>
 8003b94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05b      	beq.n	8003c54 <__multiply+0x148>
 8003b9c:	6106      	str	r6, [r0, #16]
 8003b9e:	b005      	add	sp, #20
 8003ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba4:	f843 2b04 	str.w	r2, [r3], #4
 8003ba8:	e7d8      	b.n	8003b5c <__multiply+0x50>
 8003baa:	f8b1 a000 	ldrh.w	sl, [r1]
 8003bae:	f1ba 0f00 	cmp.w	sl, #0
 8003bb2:	d024      	beq.n	8003bfe <__multiply+0xf2>
 8003bb4:	f104 0e14 	add.w	lr, r4, #20
 8003bb8:	46a9      	mov	r9, r5
 8003bba:	f04f 0c00 	mov.w	ip, #0
 8003bbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003bc2:	f8d9 3000 	ldr.w	r3, [r9]
 8003bc6:	fa1f fb87 	uxth.w	fp, r7
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8003bd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003bd4:	f8d9 7000 	ldr.w	r7, [r9]
 8003bd8:	4463      	add	r3, ip
 8003bda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003bde:	fb0a c70b 	mla	r7, sl, fp, ip
 8003be2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003bec:	4572      	cmp	r2, lr
 8003bee:	f849 3b04 	str.w	r3, [r9], #4
 8003bf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003bf6:	d8e2      	bhi.n	8003bbe <__multiply+0xb2>
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	f845 c003 	str.w	ip, [r5, r3]
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003c04:	3104      	adds	r1, #4
 8003c06:	f1b9 0f00 	cmp.w	r9, #0
 8003c0a:	d021      	beq.n	8003c50 <__multiply+0x144>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	f104 0c14 	add.w	ip, r4, #20
 8003c12:	46ae      	mov	lr, r5
 8003c14:	f04f 0a00 	mov.w	sl, #0
 8003c18:	f8bc b000 	ldrh.w	fp, [ip]
 8003c1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003c20:	fb09 770b 	mla	r7, r9, fp, r7
 8003c24:	4457      	add	r7, sl
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003c2c:	f84e 3b04 	str.w	r3, [lr], #4
 8003c30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c38:	f8be 3000 	ldrh.w	r3, [lr]
 8003c3c:	fb09 330a 	mla	r3, r9, sl, r3
 8003c40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003c44:	4562      	cmp	r2, ip
 8003c46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c4a:	d8e5      	bhi.n	8003c18 <__multiply+0x10c>
 8003c4c:	9f01      	ldr	r7, [sp, #4]
 8003c4e:	51eb      	str	r3, [r5, r7]
 8003c50:	3504      	adds	r5, #4
 8003c52:	e799      	b.n	8003b88 <__multiply+0x7c>
 8003c54:	3e01      	subs	r6, #1
 8003c56:	e79b      	b.n	8003b90 <__multiply+0x84>
 8003c58:	08004e0f 	.word	0x08004e0f
 8003c5c:	08004e20 	.word	0x08004e20

08003c60 <__pow5mult>:
 8003c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c64:	4615      	mov	r5, r2
 8003c66:	f012 0203 	ands.w	r2, r2, #3
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	460e      	mov	r6, r1
 8003c6e:	d007      	beq.n	8003c80 <__pow5mult+0x20>
 8003c70:	4c25      	ldr	r4, [pc, #148]	@ (8003d08 <__pow5mult+0xa8>)
 8003c72:	3a01      	subs	r2, #1
 8003c74:	2300      	movs	r3, #0
 8003c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003c7a:	f7ff fe9f 	bl	80039bc <__multadd>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	10ad      	asrs	r5, r5, #2
 8003c82:	d03d      	beq.n	8003d00 <__pow5mult+0xa0>
 8003c84:	69fc      	ldr	r4, [r7, #28]
 8003c86:	b97c      	cbnz	r4, 8003ca8 <__pow5mult+0x48>
 8003c88:	2010      	movs	r0, #16
 8003c8a:	f7ff fd7f 	bl	800378c <malloc>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	61f8      	str	r0, [r7, #28]
 8003c92:	b928      	cbnz	r0, 8003ca0 <__pow5mult+0x40>
 8003c94:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <__pow5mult+0xac>)
 8003c96:	481e      	ldr	r0, [pc, #120]	@ (8003d10 <__pow5mult+0xb0>)
 8003c98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003c9c:	f000 fbea 	bl	8004474 <__assert_func>
 8003ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ca4:	6004      	str	r4, [r0, #0]
 8003ca6:	60c4      	str	r4, [r0, #12]
 8003ca8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cb0:	b94c      	cbnz	r4, 8003cc6 <__pow5mult+0x66>
 8003cb2:	f240 2171 	movw	r1, #625	@ 0x271
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7ff ff12 	bl	8003ae0 <__i2b>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	6003      	str	r3, [r0, #0]
 8003cc6:	f04f 0900 	mov.w	r9, #0
 8003cca:	07eb      	lsls	r3, r5, #31
 8003ccc:	d50a      	bpl.n	8003ce4 <__pow5mult+0x84>
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	f7ff ff1a 	bl	8003b0c <__multiply>
 8003cd8:	4631      	mov	r1, r6
 8003cda:	4680      	mov	r8, r0
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff fe4b 	bl	8003978 <_Bfree>
 8003ce2:	4646      	mov	r6, r8
 8003ce4:	106d      	asrs	r5, r5, #1
 8003ce6:	d00b      	beq.n	8003d00 <__pow5mult+0xa0>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	b938      	cbnz	r0, 8003cfc <__pow5mult+0x9c>
 8003cec:	4622      	mov	r2, r4
 8003cee:	4621      	mov	r1, r4
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	f7ff ff0b 	bl	8003b0c <__multiply>
 8003cf6:	6020      	str	r0, [r4, #0]
 8003cf8:	f8c0 9000 	str.w	r9, [r0]
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	e7e4      	b.n	8003cca <__pow5mult+0x6a>
 8003d00:	4630      	mov	r0, r6
 8003d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d06:	bf00      	nop
 8003d08:	08004e7c 	.word	0x08004e7c
 8003d0c:	08004da0 	.word	0x08004da0
 8003d10:	08004e20 	.word	0x08004e20

08003d14 <__lshift>:
 8003d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d18:	460c      	mov	r4, r1
 8003d1a:	6849      	ldr	r1, [r1, #4]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	4607      	mov	r7, r0
 8003d26:	4691      	mov	r9, r2
 8003d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d2c:	f108 0601 	add.w	r6, r8, #1
 8003d30:	42b3      	cmp	r3, r6
 8003d32:	db0b      	blt.n	8003d4c <__lshift+0x38>
 8003d34:	4638      	mov	r0, r7
 8003d36:	f7ff fddf 	bl	80038f8 <_Balloc>
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	b948      	cbnz	r0, 8003d52 <__lshift+0x3e>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <__lshift+0xd0>)
 8003d42:	4829      	ldr	r0, [pc, #164]	@ (8003de8 <__lshift+0xd4>)
 8003d44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003d48:	f000 fb94 	bl	8004474 <__assert_func>
 8003d4c:	3101      	adds	r1, #1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	e7ee      	b.n	8003d30 <__lshift+0x1c>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f100 0114 	add.w	r1, r0, #20
 8003d58:	f100 0210 	add.w	r2, r0, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	4553      	cmp	r3, sl
 8003d60:	db33      	blt.n	8003dca <__lshift+0xb6>
 8003d62:	6920      	ldr	r0, [r4, #16]
 8003d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d68:	f104 0314 	add.w	r3, r4, #20
 8003d6c:	f019 091f 	ands.w	r9, r9, #31
 8003d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003d78:	d02b      	beq.n	8003dd2 <__lshift+0xbe>
 8003d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8003d7e:	468a      	mov	sl, r1
 8003d80:	2200      	movs	r2, #0
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	fa00 f009 	lsl.w	r0, r0, r9
 8003d88:	4310      	orrs	r0, r2
 8003d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8003d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d92:	459c      	cmp	ip, r3
 8003d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8003d98:	d8f3      	bhi.n	8003d82 <__lshift+0x6e>
 8003d9a:	ebac 0304 	sub.w	r3, ip, r4
 8003d9e:	3b15      	subs	r3, #21
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	3304      	adds	r3, #4
 8003da6:	f104 0015 	add.w	r0, r4, #21
 8003daa:	4584      	cmp	ip, r0
 8003dac:	bf38      	it	cc
 8003dae:	2304      	movcc	r3, #4
 8003db0:	50ca      	str	r2, [r1, r3]
 8003db2:	b10a      	cbz	r2, 8003db8 <__lshift+0xa4>
 8003db4:	f108 0602 	add.w	r6, r8, #2
 8003db8:	3e01      	subs	r6, #1
 8003dba:	4638      	mov	r0, r7
 8003dbc:	612e      	str	r6, [r5, #16]
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	f7ff fdda 	bl	8003978 <_Bfree>
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8003dce:	3301      	adds	r3, #1
 8003dd0:	e7c5      	b.n	8003d5e <__lshift+0x4a>
 8003dd2:	3904      	subs	r1, #4
 8003dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003ddc:	459c      	cmp	ip, r3
 8003dde:	d8f9      	bhi.n	8003dd4 <__lshift+0xc0>
 8003de0:	e7ea      	b.n	8003db8 <__lshift+0xa4>
 8003de2:	bf00      	nop
 8003de4:	08004e0f 	.word	0x08004e0f
 8003de8:	08004e20 	.word	0x08004e20

08003dec <__mcmp>:
 8003dec:	690a      	ldr	r2, [r1, #16]
 8003dee:	4603      	mov	r3, r0
 8003df0:	6900      	ldr	r0, [r0, #16]
 8003df2:	1a80      	subs	r0, r0, r2
 8003df4:	b530      	push	{r4, r5, lr}
 8003df6:	d10e      	bne.n	8003e16 <__mcmp+0x2a>
 8003df8:	3314      	adds	r3, #20
 8003dfa:	3114      	adds	r1, #20
 8003dfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003e04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e0c:	4295      	cmp	r5, r2
 8003e0e:	d003      	beq.n	8003e18 <__mcmp+0x2c>
 8003e10:	d205      	bcs.n	8003e1e <__mcmp+0x32>
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	bd30      	pop	{r4, r5, pc}
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d3f3      	bcc.n	8003e04 <__mcmp+0x18>
 8003e1c:	e7fb      	b.n	8003e16 <__mcmp+0x2a>
 8003e1e:	2001      	movs	r0, #1
 8003e20:	e7f9      	b.n	8003e16 <__mcmp+0x2a>
	...

08003e24 <__mdiff>:
 8003e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e28:	4689      	mov	r9, r1
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4648      	mov	r0, r9
 8003e30:	4614      	mov	r4, r2
 8003e32:	f7ff ffdb 	bl	8003dec <__mcmp>
 8003e36:	1e05      	subs	r5, r0, #0
 8003e38:	d112      	bne.n	8003e60 <__mdiff+0x3c>
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff fd5b 	bl	80038f8 <_Balloc>
 8003e42:	4602      	mov	r2, r0
 8003e44:	b928      	cbnz	r0, 8003e52 <__mdiff+0x2e>
 8003e46:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <__mdiff+0x120>)
 8003e48:	f240 2137 	movw	r1, #567	@ 0x237
 8003e4c:	483e      	ldr	r0, [pc, #248]	@ (8003f48 <__mdiff+0x124>)
 8003e4e:	f000 fb11 	bl	8004474 <__assert_func>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	b003      	add	sp, #12
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	bfbc      	itt	lt
 8003e62:	464b      	movlt	r3, r9
 8003e64:	46a1      	movlt	r9, r4
 8003e66:	4630      	mov	r0, r6
 8003e68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003e6c:	bfba      	itte	lt
 8003e6e:	461c      	movlt	r4, r3
 8003e70:	2501      	movlt	r5, #1
 8003e72:	2500      	movge	r5, #0
 8003e74:	f7ff fd40 	bl	80038f8 <_Balloc>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	b918      	cbnz	r0, 8003e84 <__mdiff+0x60>
 8003e7c:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <__mdiff+0x120>)
 8003e7e:	f240 2145 	movw	r1, #581	@ 0x245
 8003e82:	e7e3      	b.n	8003e4c <__mdiff+0x28>
 8003e84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003e88:	6926      	ldr	r6, [r4, #16]
 8003e8a:	60c5      	str	r5, [r0, #12]
 8003e8c:	f109 0310 	add.w	r3, r9, #16
 8003e90:	f109 0514 	add.w	r5, r9, #20
 8003e94:	f104 0e14 	add.w	lr, r4, #20
 8003e98:	f100 0b14 	add.w	fp, r0, #20
 8003e9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003ea0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	46d9      	mov	r9, fp
 8003ea8:	f04f 0c00 	mov.w	ip, #0
 8003eac:	9b01      	ldr	r3, [sp, #4]
 8003eae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003eb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	fa1f f38a 	uxth.w	r3, sl
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	b283      	uxth	r3, r0
 8003ec0:	1acb      	subs	r3, r1, r3
 8003ec2:	0c00      	lsrs	r0, r0, #16
 8003ec4:	4463      	add	r3, ip
 8003ec6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003eca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003ed4:	4576      	cmp	r6, lr
 8003ed6:	f849 3b04 	str.w	r3, [r9], #4
 8003eda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003ede:	d8e5      	bhi.n	8003eac <__mdiff+0x88>
 8003ee0:	1b33      	subs	r3, r6, r4
 8003ee2:	3b15      	subs	r3, #21
 8003ee4:	f023 0303 	bic.w	r3, r3, #3
 8003ee8:	3415      	adds	r4, #21
 8003eea:	3304      	adds	r3, #4
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	bf38      	it	cc
 8003ef0:	2304      	movcc	r3, #4
 8003ef2:	441d      	add	r5, r3
 8003ef4:	445b      	add	r3, fp
 8003ef6:	461e      	mov	r6, r3
 8003ef8:	462c      	mov	r4, r5
 8003efa:	4544      	cmp	r4, r8
 8003efc:	d30e      	bcc.n	8003f1c <__mdiff+0xf8>
 8003efe:	f108 0103 	add.w	r1, r8, #3
 8003f02:	1b49      	subs	r1, r1, r5
 8003f04:	f021 0103 	bic.w	r1, r1, #3
 8003f08:	3d03      	subs	r5, #3
 8003f0a:	45a8      	cmp	r8, r5
 8003f0c:	bf38      	it	cc
 8003f0e:	2100      	movcc	r1, #0
 8003f10:	440b      	add	r3, r1
 8003f12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003f16:	b191      	cbz	r1, 8003f3e <__mdiff+0x11a>
 8003f18:	6117      	str	r7, [r2, #16]
 8003f1a:	e79d      	b.n	8003e58 <__mdiff+0x34>
 8003f1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8003f20:	46e6      	mov	lr, ip
 8003f22:	0c08      	lsrs	r0, r1, #16
 8003f24:	fa1c fc81 	uxtah	ip, ip, r1
 8003f28:	4471      	add	r1, lr
 8003f2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003f2e:	b289      	uxth	r1, r1
 8003f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003f34:	f846 1b04 	str.w	r1, [r6], #4
 8003f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003f3c:	e7dd      	b.n	8003efa <__mdiff+0xd6>
 8003f3e:	3f01      	subs	r7, #1
 8003f40:	e7e7      	b.n	8003f12 <__mdiff+0xee>
 8003f42:	bf00      	nop
 8003f44:	08004e0f 	.word	0x08004e0f
 8003f48:	08004e20 	.word	0x08004e20

08003f4c <__d2b>:
 8003f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f50:	460f      	mov	r7, r1
 8003f52:	2101      	movs	r1, #1
 8003f54:	ec59 8b10 	vmov	r8, r9, d0
 8003f58:	4616      	mov	r6, r2
 8003f5a:	f7ff fccd 	bl	80038f8 <_Balloc>
 8003f5e:	4604      	mov	r4, r0
 8003f60:	b930      	cbnz	r0, 8003f70 <__d2b+0x24>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <__d2b+0xa8>)
 8003f66:	4824      	ldr	r0, [pc, #144]	@ (8003ff8 <__d2b+0xac>)
 8003f68:	f240 310f 	movw	r1, #783	@ 0x30f
 8003f6c:	f000 fa82 	bl	8004474 <__assert_func>
 8003f70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f78:	b10d      	cbz	r5, 8003f7e <__d2b+0x32>
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	f1b8 0300 	subs.w	r3, r8, #0
 8003f84:	d023      	beq.n	8003fce <__d2b+0x82>
 8003f86:	4668      	mov	r0, sp
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	f7ff fd7c 	bl	8003a86 <__lo0bits>
 8003f8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003f92:	b1d0      	cbz	r0, 8003fca <__d2b+0x7e>
 8003f94:	f1c0 0320 	rsb	r3, r0, #32
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	40c2      	lsrs	r2, r0
 8003fa0:	6163      	str	r3, [r4, #20]
 8003fa2:	9201      	str	r2, [sp, #4]
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	61a3      	str	r3, [r4, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2201      	moveq	r2, #1
 8003fae:	2202      	movne	r2, #2
 8003fb0:	6122      	str	r2, [r4, #16]
 8003fb2:	b1a5      	cbz	r5, 8003fde <__d2b+0x92>
 8003fb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003fb8:	4405      	add	r5, r0
 8003fba:	603d      	str	r5, [r7, #0]
 8003fbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003fc0:	6030      	str	r0, [r6, #0]
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	b003      	add	sp, #12
 8003fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fca:	6161      	str	r1, [r4, #20]
 8003fcc:	e7ea      	b.n	8003fa4 <__d2b+0x58>
 8003fce:	a801      	add	r0, sp, #4
 8003fd0:	f7ff fd59 	bl	8003a86 <__lo0bits>
 8003fd4:	9b01      	ldr	r3, [sp, #4]
 8003fd6:	6163      	str	r3, [r4, #20]
 8003fd8:	3020      	adds	r0, #32
 8003fda:	2201      	movs	r2, #1
 8003fdc:	e7e8      	b.n	8003fb0 <__d2b+0x64>
 8003fde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003fe6:	6038      	str	r0, [r7, #0]
 8003fe8:	6918      	ldr	r0, [r3, #16]
 8003fea:	f7ff fd2d 	bl	8003a48 <__hi0bits>
 8003fee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003ff2:	e7e5      	b.n	8003fc0 <__d2b+0x74>
 8003ff4:	08004e0f 	.word	0x08004e0f
 8003ff8:	08004e20 	.word	0x08004e20

08003ffc <__ssputs_r>:
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	688e      	ldr	r6, [r1, #8]
 8004002:	461f      	mov	r7, r3
 8004004:	42be      	cmp	r6, r7
 8004006:	680b      	ldr	r3, [r1, #0]
 8004008:	4682      	mov	sl, r0
 800400a:	460c      	mov	r4, r1
 800400c:	4690      	mov	r8, r2
 800400e:	d82d      	bhi.n	800406c <__ssputs_r+0x70>
 8004010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004014:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004018:	d026      	beq.n	8004068 <__ssputs_r+0x6c>
 800401a:	6965      	ldr	r5, [r4, #20]
 800401c:	6909      	ldr	r1, [r1, #16]
 800401e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004022:	eba3 0901 	sub.w	r9, r3, r1
 8004026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800402a:	1c7b      	adds	r3, r7, #1
 800402c:	444b      	add	r3, r9
 800402e:	106d      	asrs	r5, r5, #1
 8004030:	429d      	cmp	r5, r3
 8004032:	bf38      	it	cc
 8004034:	461d      	movcc	r5, r3
 8004036:	0553      	lsls	r3, r2, #21
 8004038:	d527      	bpl.n	800408a <__ssputs_r+0x8e>
 800403a:	4629      	mov	r1, r5
 800403c:	f7ff fbd0 	bl	80037e0 <_malloc_r>
 8004040:	4606      	mov	r6, r0
 8004042:	b360      	cbz	r0, 800409e <__ssputs_r+0xa2>
 8004044:	6921      	ldr	r1, [r4, #16]
 8004046:	464a      	mov	r2, r9
 8004048:	f000 fa06 	bl	8004458 <memcpy>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	6126      	str	r6, [r4, #16]
 800405a:	6165      	str	r5, [r4, #20]
 800405c:	444e      	add	r6, r9
 800405e:	eba5 0509 	sub.w	r5, r5, r9
 8004062:	6026      	str	r6, [r4, #0]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	463e      	mov	r6, r7
 8004068:	42be      	cmp	r6, r7
 800406a:	d900      	bls.n	800406e <__ssputs_r+0x72>
 800406c:	463e      	mov	r6, r7
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	4632      	mov	r2, r6
 8004072:	4641      	mov	r1, r8
 8004074:	f000 f9c6 	bl	8004404 <memmove>
 8004078:	68a3      	ldr	r3, [r4, #8]
 800407a:	1b9b      	subs	r3, r3, r6
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	4433      	add	r3, r6
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	2000      	movs	r0, #0
 8004086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408a:	462a      	mov	r2, r5
 800408c:	f000 fa36 	bl	80044fc <_realloc_r>
 8004090:	4606      	mov	r6, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	d1e0      	bne.n	8004058 <__ssputs_r+0x5c>
 8004096:	6921      	ldr	r1, [r4, #16]
 8004098:	4650      	mov	r0, sl
 800409a:	f7ff fb2d 	bl	80036f8 <_free_r>
 800409e:	230c      	movs	r3, #12
 80040a0:	f8ca 3000 	str.w	r3, [sl]
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	e7e9      	b.n	8004086 <__ssputs_r+0x8a>
	...

080040b4 <_svfiprintf_r>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	4698      	mov	r8, r3
 80040ba:	898b      	ldrh	r3, [r1, #12]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	b09d      	sub	sp, #116	@ 0x74
 80040c0:	4607      	mov	r7, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	4614      	mov	r4, r2
 80040c6:	d510      	bpl.n	80040ea <_svfiprintf_r+0x36>
 80040c8:	690b      	ldr	r3, [r1, #16]
 80040ca:	b973      	cbnz	r3, 80040ea <_svfiprintf_r+0x36>
 80040cc:	2140      	movs	r1, #64	@ 0x40
 80040ce:	f7ff fb87 	bl	80037e0 <_malloc_r>
 80040d2:	6028      	str	r0, [r5, #0]
 80040d4:	6128      	str	r0, [r5, #16]
 80040d6:	b930      	cbnz	r0, 80040e6 <_svfiprintf_r+0x32>
 80040d8:	230c      	movs	r3, #12
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	b01d      	add	sp, #116	@ 0x74
 80040e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e6:	2340      	movs	r3, #64	@ 0x40
 80040e8:	616b      	str	r3, [r5, #20]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ee:	2320      	movs	r3, #32
 80040f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f8:	2330      	movs	r3, #48	@ 0x30
 80040fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004298 <_svfiprintf_r+0x1e4>
 80040fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004102:	f04f 0901 	mov.w	r9, #1
 8004106:	4623      	mov	r3, r4
 8004108:	469a      	mov	sl, r3
 800410a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410e:	b10a      	cbz	r2, 8004114 <_svfiprintf_r+0x60>
 8004110:	2a25      	cmp	r2, #37	@ 0x25
 8004112:	d1f9      	bne.n	8004108 <_svfiprintf_r+0x54>
 8004114:	ebba 0b04 	subs.w	fp, sl, r4
 8004118:	d00b      	beq.n	8004132 <_svfiprintf_r+0x7e>
 800411a:	465b      	mov	r3, fp
 800411c:	4622      	mov	r2, r4
 800411e:	4629      	mov	r1, r5
 8004120:	4638      	mov	r0, r7
 8004122:	f7ff ff6b 	bl	8003ffc <__ssputs_r>
 8004126:	3001      	adds	r0, #1
 8004128:	f000 80a7 	beq.w	800427a <_svfiprintf_r+0x1c6>
 800412c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800412e:	445a      	add	r2, fp
 8004130:	9209      	str	r2, [sp, #36]	@ 0x24
 8004132:	f89a 3000 	ldrb.w	r3, [sl]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 809f 	beq.w	800427a <_svfiprintf_r+0x1c6>
 800413c:	2300      	movs	r3, #0
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004146:	f10a 0a01 	add.w	sl, sl, #1
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004152:	931a      	str	r3, [sp, #104]	@ 0x68
 8004154:	4654      	mov	r4, sl
 8004156:	2205      	movs	r2, #5
 8004158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415c:	484e      	ldr	r0, [pc, #312]	@ (8004298 <_svfiprintf_r+0x1e4>)
 800415e:	f7fc f83f 	bl	80001e0 <memchr>
 8004162:	9a04      	ldr	r2, [sp, #16]
 8004164:	b9d8      	cbnz	r0, 800419e <_svfiprintf_r+0xea>
 8004166:	06d0      	lsls	r0, r2, #27
 8004168:	bf44      	itt	mi
 800416a:	2320      	movmi	r3, #32
 800416c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004170:	0711      	lsls	r1, r2, #28
 8004172:	bf44      	itt	mi
 8004174:	232b      	movmi	r3, #43	@ 0x2b
 8004176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800417a:	f89a 3000 	ldrb.w	r3, [sl]
 800417e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004180:	d015      	beq.n	80041ae <_svfiprintf_r+0xfa>
 8004182:	9a07      	ldr	r2, [sp, #28]
 8004184:	4654      	mov	r4, sl
 8004186:	2000      	movs	r0, #0
 8004188:	f04f 0c0a 	mov.w	ip, #10
 800418c:	4621      	mov	r1, r4
 800418e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004192:	3b30      	subs	r3, #48	@ 0x30
 8004194:	2b09      	cmp	r3, #9
 8004196:	d94b      	bls.n	8004230 <_svfiprintf_r+0x17c>
 8004198:	b1b0      	cbz	r0, 80041c8 <_svfiprintf_r+0x114>
 800419a:	9207      	str	r2, [sp, #28]
 800419c:	e014      	b.n	80041c8 <_svfiprintf_r+0x114>
 800419e:	eba0 0308 	sub.w	r3, r0, r8
 80041a2:	fa09 f303 	lsl.w	r3, r9, r3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	46a2      	mov	sl, r4
 80041ac:	e7d2      	b.n	8004154 <_svfiprintf_r+0xa0>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	1d19      	adds	r1, r3, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	9103      	str	r1, [sp, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfbb      	ittet	lt
 80041ba:	425b      	neglt	r3, r3
 80041bc:	f042 0202 	orrlt.w	r2, r2, #2
 80041c0:	9307      	strge	r3, [sp, #28]
 80041c2:	9307      	strlt	r3, [sp, #28]
 80041c4:	bfb8      	it	lt
 80041c6:	9204      	strlt	r2, [sp, #16]
 80041c8:	7823      	ldrb	r3, [r4, #0]
 80041ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80041cc:	d10a      	bne.n	80041e4 <_svfiprintf_r+0x130>
 80041ce:	7863      	ldrb	r3, [r4, #1]
 80041d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d2:	d132      	bne.n	800423a <_svfiprintf_r+0x186>
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	9203      	str	r2, [sp, #12]
 80041dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041e0:	3402      	adds	r4, #2
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80042a8 <_svfiprintf_r+0x1f4>
 80041e8:	7821      	ldrb	r1, [r4, #0]
 80041ea:	2203      	movs	r2, #3
 80041ec:	4650      	mov	r0, sl
 80041ee:	f7fb fff7 	bl	80001e0 <memchr>
 80041f2:	b138      	cbz	r0, 8004204 <_svfiprintf_r+0x150>
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	eba0 000a 	sub.w	r0, r0, sl
 80041fa:	2240      	movs	r2, #64	@ 0x40
 80041fc:	4082      	lsls	r2, r0
 80041fe:	4313      	orrs	r3, r2
 8004200:	3401      	adds	r4, #1
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	4824      	ldr	r0, [pc, #144]	@ (800429c <_svfiprintf_r+0x1e8>)
 800420a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800420e:	2206      	movs	r2, #6
 8004210:	f7fb ffe6 	bl	80001e0 <memchr>
 8004214:	2800      	cmp	r0, #0
 8004216:	d036      	beq.n	8004286 <_svfiprintf_r+0x1d2>
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <_svfiprintf_r+0x1ec>)
 800421a:	bb1b      	cbnz	r3, 8004264 <_svfiprintf_r+0x1b0>
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	3307      	adds	r3, #7
 8004220:	f023 0307 	bic.w	r3, r3, #7
 8004224:	3308      	adds	r3, #8
 8004226:	9303      	str	r3, [sp, #12]
 8004228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800422a:	4433      	add	r3, r6
 800422c:	9309      	str	r3, [sp, #36]	@ 0x24
 800422e:	e76a      	b.n	8004106 <_svfiprintf_r+0x52>
 8004230:	fb0c 3202 	mla	r2, ip, r2, r3
 8004234:	460c      	mov	r4, r1
 8004236:	2001      	movs	r0, #1
 8004238:	e7a8      	b.n	800418c <_svfiprintf_r+0xd8>
 800423a:	2300      	movs	r3, #0
 800423c:	3401      	adds	r4, #1
 800423e:	9305      	str	r3, [sp, #20]
 8004240:	4619      	mov	r1, r3
 8004242:	f04f 0c0a 	mov.w	ip, #10
 8004246:	4620      	mov	r0, r4
 8004248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424c:	3a30      	subs	r2, #48	@ 0x30
 800424e:	2a09      	cmp	r2, #9
 8004250:	d903      	bls.n	800425a <_svfiprintf_r+0x1a6>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0c6      	beq.n	80041e4 <_svfiprintf_r+0x130>
 8004256:	9105      	str	r1, [sp, #20]
 8004258:	e7c4      	b.n	80041e4 <_svfiprintf_r+0x130>
 800425a:	fb0c 2101 	mla	r1, ip, r1, r2
 800425e:	4604      	mov	r4, r0
 8004260:	2301      	movs	r3, #1
 8004262:	e7f0      	b.n	8004246 <_svfiprintf_r+0x192>
 8004264:	ab03      	add	r3, sp, #12
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	462a      	mov	r2, r5
 800426a:	4b0e      	ldr	r3, [pc, #56]	@ (80042a4 <_svfiprintf_r+0x1f0>)
 800426c:	a904      	add	r1, sp, #16
 800426e:	4638      	mov	r0, r7
 8004270:	f7fd fe82 	bl	8001f78 <_printf_float>
 8004274:	1c42      	adds	r2, r0, #1
 8004276:	4606      	mov	r6, r0
 8004278:	d1d6      	bne.n	8004228 <_svfiprintf_r+0x174>
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	065b      	lsls	r3, r3, #25
 800427e:	f53f af2d 	bmi.w	80040dc <_svfiprintf_r+0x28>
 8004282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004284:	e72c      	b.n	80040e0 <_svfiprintf_r+0x2c>
 8004286:	ab03      	add	r3, sp, #12
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	462a      	mov	r2, r5
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <_svfiprintf_r+0x1f0>)
 800428e:	a904      	add	r1, sp, #16
 8004290:	4638      	mov	r0, r7
 8004292:	f7fe f909 	bl	80024a8 <_printf_i>
 8004296:	e7ed      	b.n	8004274 <_svfiprintf_r+0x1c0>
 8004298:	08004f78 	.word	0x08004f78
 800429c:	08004f82 	.word	0x08004f82
 80042a0:	08001f79 	.word	0x08001f79
 80042a4:	08003ffd 	.word	0x08003ffd
 80042a8:	08004f7e 	.word	0x08004f7e

080042ac <__sflush_r>:
 80042ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b4:	0716      	lsls	r6, r2, #28
 80042b6:	4605      	mov	r5, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	d454      	bmi.n	8004366 <__sflush_r+0xba>
 80042bc:	684b      	ldr	r3, [r1, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dc02      	bgt.n	80042c8 <__sflush_r+0x1c>
 80042c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dd48      	ble.n	800435a <__sflush_r+0xae>
 80042c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d045      	beq.n	800435a <__sflush_r+0xae>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042d4:	682f      	ldr	r7, [r5, #0]
 80042d6:	6a21      	ldr	r1, [r4, #32]
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	d030      	beq.n	800433e <__sflush_r+0x92>
 80042dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	0759      	lsls	r1, r3, #29
 80042e2:	d505      	bpl.n	80042f0 <__sflush_r+0x44>
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042ea:	b10b      	cbz	r3, 80042f0 <__sflush_r+0x44>
 80042ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042f4:	6a21      	ldr	r1, [r4, #32]
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b0      	blx	r6
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	d106      	bne.n	800430e <__sflush_r+0x62>
 8004300:	6829      	ldr	r1, [r5, #0]
 8004302:	291d      	cmp	r1, #29
 8004304:	d82b      	bhi.n	800435e <__sflush_r+0xb2>
 8004306:	4a2a      	ldr	r2, [pc, #168]	@ (80043b0 <__sflush_r+0x104>)
 8004308:	410a      	asrs	r2, r1
 800430a:	07d6      	lsls	r6, r2, #31
 800430c:	d427      	bmi.n	800435e <__sflush_r+0xb2>
 800430e:	2200      	movs	r2, #0
 8004310:	6062      	str	r2, [r4, #4]
 8004312:	04d9      	lsls	r1, r3, #19
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	d504      	bpl.n	8004324 <__sflush_r+0x78>
 800431a:	1c42      	adds	r2, r0, #1
 800431c:	d101      	bne.n	8004322 <__sflush_r+0x76>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	b903      	cbnz	r3, 8004324 <__sflush_r+0x78>
 8004322:	6560      	str	r0, [r4, #84]	@ 0x54
 8004324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004326:	602f      	str	r7, [r5, #0]
 8004328:	b1b9      	cbz	r1, 800435a <__sflush_r+0xae>
 800432a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800432e:	4299      	cmp	r1, r3
 8004330:	d002      	beq.n	8004338 <__sflush_r+0x8c>
 8004332:	4628      	mov	r0, r5
 8004334:	f7ff f9e0 	bl	80036f8 <_free_r>
 8004338:	2300      	movs	r3, #0
 800433a:	6363      	str	r3, [r4, #52]	@ 0x34
 800433c:	e00d      	b.n	800435a <__sflush_r+0xae>
 800433e:	2301      	movs	r3, #1
 8004340:	4628      	mov	r0, r5
 8004342:	47b0      	blx	r6
 8004344:	4602      	mov	r2, r0
 8004346:	1c50      	adds	r0, r2, #1
 8004348:	d1c9      	bne.n	80042de <__sflush_r+0x32>
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0c6      	beq.n	80042de <__sflush_r+0x32>
 8004350:	2b1d      	cmp	r3, #29
 8004352:	d001      	beq.n	8004358 <__sflush_r+0xac>
 8004354:	2b16      	cmp	r3, #22
 8004356:	d11e      	bne.n	8004396 <__sflush_r+0xea>
 8004358:	602f      	str	r7, [r5, #0]
 800435a:	2000      	movs	r0, #0
 800435c:	e022      	b.n	80043a4 <__sflush_r+0xf8>
 800435e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004362:	b21b      	sxth	r3, r3
 8004364:	e01b      	b.n	800439e <__sflush_r+0xf2>
 8004366:	690f      	ldr	r7, [r1, #16]
 8004368:	2f00      	cmp	r7, #0
 800436a:	d0f6      	beq.n	800435a <__sflush_r+0xae>
 800436c:	0793      	lsls	r3, r2, #30
 800436e:	680e      	ldr	r6, [r1, #0]
 8004370:	bf08      	it	eq
 8004372:	694b      	ldreq	r3, [r1, #20]
 8004374:	600f      	str	r7, [r1, #0]
 8004376:	bf18      	it	ne
 8004378:	2300      	movne	r3, #0
 800437a:	eba6 0807 	sub.w	r8, r6, r7
 800437e:	608b      	str	r3, [r1, #8]
 8004380:	f1b8 0f00 	cmp.w	r8, #0
 8004384:	dde9      	ble.n	800435a <__sflush_r+0xae>
 8004386:	6a21      	ldr	r1, [r4, #32]
 8004388:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800438a:	4643      	mov	r3, r8
 800438c:	463a      	mov	r2, r7
 800438e:	4628      	mov	r0, r5
 8004390:	47b0      	blx	r6
 8004392:	2800      	cmp	r0, #0
 8004394:	dc08      	bgt.n	80043a8 <__sflush_r+0xfc>
 8004396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800439a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	4407      	add	r7, r0
 80043aa:	eba8 0800 	sub.w	r8, r8, r0
 80043ae:	e7e7      	b.n	8004380 <__sflush_r+0xd4>
 80043b0:	dfbffffe 	.word	0xdfbffffe

080043b4 <_fflush_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	690b      	ldr	r3, [r1, #16]
 80043b8:	4605      	mov	r5, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	b913      	cbnz	r3, 80043c4 <_fflush_r+0x10>
 80043be:	2500      	movs	r5, #0
 80043c0:	4628      	mov	r0, r5
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	b118      	cbz	r0, 80043ce <_fflush_r+0x1a>
 80043c6:	6a03      	ldr	r3, [r0, #32]
 80043c8:	b90b      	cbnz	r3, 80043ce <_fflush_r+0x1a>
 80043ca:	f7fe fa19 	bl	8002800 <__sinit>
 80043ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f3      	beq.n	80043be <_fflush_r+0xa>
 80043d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043d8:	07d0      	lsls	r0, r2, #31
 80043da:	d404      	bmi.n	80043e6 <_fflush_r+0x32>
 80043dc:	0599      	lsls	r1, r3, #22
 80043de:	d402      	bmi.n	80043e6 <_fflush_r+0x32>
 80043e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043e2:	f7fe fb38 	bl	8002a56 <__retarget_lock_acquire_recursive>
 80043e6:	4628      	mov	r0, r5
 80043e8:	4621      	mov	r1, r4
 80043ea:	f7ff ff5f 	bl	80042ac <__sflush_r>
 80043ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043f0:	07da      	lsls	r2, r3, #31
 80043f2:	4605      	mov	r5, r0
 80043f4:	d4e4      	bmi.n	80043c0 <_fflush_r+0xc>
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	059b      	lsls	r3, r3, #22
 80043fa:	d4e1      	bmi.n	80043c0 <_fflush_r+0xc>
 80043fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043fe:	f7fe fb2b 	bl	8002a58 <__retarget_lock_release_recursive>
 8004402:	e7dd      	b.n	80043c0 <_fflush_r+0xc>

08004404 <memmove>:
 8004404:	4288      	cmp	r0, r1
 8004406:	b510      	push	{r4, lr}
 8004408:	eb01 0402 	add.w	r4, r1, r2
 800440c:	d902      	bls.n	8004414 <memmove+0x10>
 800440e:	4284      	cmp	r4, r0
 8004410:	4623      	mov	r3, r4
 8004412:	d807      	bhi.n	8004424 <memmove+0x20>
 8004414:	1e43      	subs	r3, r0, #1
 8004416:	42a1      	cmp	r1, r4
 8004418:	d008      	beq.n	800442c <memmove+0x28>
 800441a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004422:	e7f8      	b.n	8004416 <memmove+0x12>
 8004424:	4402      	add	r2, r0
 8004426:	4601      	mov	r1, r0
 8004428:	428a      	cmp	r2, r1
 800442a:	d100      	bne.n	800442e <memmove+0x2a>
 800442c:	bd10      	pop	{r4, pc}
 800442e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004436:	e7f7      	b.n	8004428 <memmove+0x24>

08004438 <_sbrk_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4d06      	ldr	r5, [pc, #24]	@ (8004454 <_sbrk_r+0x1c>)
 800443c:	2300      	movs	r3, #0
 800443e:	4604      	mov	r4, r0
 8004440:	4608      	mov	r0, r1
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	f7fd fc88 	bl	8001d58 <_sbrk>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_sbrk_r+0x1a>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_sbrk_r+0x1a>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000334 	.word	0x20000334

08004458 <memcpy>:
 8004458:	440a      	add	r2, r1
 800445a:	4291      	cmp	r1, r2
 800445c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004460:	d100      	bne.n	8004464 <memcpy+0xc>
 8004462:	4770      	bx	lr
 8004464:	b510      	push	{r4, lr}
 8004466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800446a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800446e:	4291      	cmp	r1, r2
 8004470:	d1f9      	bne.n	8004466 <memcpy+0xe>
 8004472:	bd10      	pop	{r4, pc}

08004474 <__assert_func>:
 8004474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004476:	4614      	mov	r4, r2
 8004478:	461a      	mov	r2, r3
 800447a:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <__assert_func+0x2c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4605      	mov	r5, r0
 8004480:	68d8      	ldr	r0, [r3, #12]
 8004482:	b954      	cbnz	r4, 800449a <__assert_func+0x26>
 8004484:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <__assert_func+0x30>)
 8004486:	461c      	mov	r4, r3
 8004488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800448c:	9100      	str	r1, [sp, #0]
 800448e:	462b      	mov	r3, r5
 8004490:	4905      	ldr	r1, [pc, #20]	@ (80044a8 <__assert_func+0x34>)
 8004492:	f000 f86f 	bl	8004574 <fiprintf>
 8004496:	f000 f87f 	bl	8004598 <abort>
 800449a:	4b04      	ldr	r3, [pc, #16]	@ (80044ac <__assert_func+0x38>)
 800449c:	e7f4      	b.n	8004488 <__assert_func+0x14>
 800449e:	bf00      	nop
 80044a0:	20000010 	.word	0x20000010
 80044a4:	08004fce 	.word	0x08004fce
 80044a8:	08004fa0 	.word	0x08004fa0
 80044ac:	08004f93 	.word	0x08004f93

080044b0 <_calloc_r>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	fba1 5402 	umull	r5, r4, r1, r2
 80044b6:	b93c      	cbnz	r4, 80044c8 <_calloc_r+0x18>
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7ff f991 	bl	80037e0 <_malloc_r>
 80044be:	4606      	mov	r6, r0
 80044c0:	b928      	cbnz	r0, 80044ce <_calloc_r+0x1e>
 80044c2:	2600      	movs	r6, #0
 80044c4:	4630      	mov	r0, r6
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	220c      	movs	r2, #12
 80044ca:	6002      	str	r2, [r0, #0]
 80044cc:	e7f9      	b.n	80044c2 <_calloc_r+0x12>
 80044ce:	462a      	mov	r2, r5
 80044d0:	4621      	mov	r1, r4
 80044d2:	f7fe fa42 	bl	800295a <memset>
 80044d6:	e7f5      	b.n	80044c4 <_calloc_r+0x14>

080044d8 <__ascii_mbtowc>:
 80044d8:	b082      	sub	sp, #8
 80044da:	b901      	cbnz	r1, 80044de <__ascii_mbtowc+0x6>
 80044dc:	a901      	add	r1, sp, #4
 80044de:	b142      	cbz	r2, 80044f2 <__ascii_mbtowc+0x1a>
 80044e0:	b14b      	cbz	r3, 80044f6 <__ascii_mbtowc+0x1e>
 80044e2:	7813      	ldrb	r3, [r2, #0]
 80044e4:	600b      	str	r3, [r1, #0]
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	1e10      	subs	r0, r2, #0
 80044ea:	bf18      	it	ne
 80044ec:	2001      	movne	r0, #1
 80044ee:	b002      	add	sp, #8
 80044f0:	4770      	bx	lr
 80044f2:	4610      	mov	r0, r2
 80044f4:	e7fb      	b.n	80044ee <__ascii_mbtowc+0x16>
 80044f6:	f06f 0001 	mvn.w	r0, #1
 80044fa:	e7f8      	b.n	80044ee <__ascii_mbtowc+0x16>

080044fc <_realloc_r>:
 80044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004500:	4680      	mov	r8, r0
 8004502:	4615      	mov	r5, r2
 8004504:	460c      	mov	r4, r1
 8004506:	b921      	cbnz	r1, 8004512 <_realloc_r+0x16>
 8004508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800450c:	4611      	mov	r1, r2
 800450e:	f7ff b967 	b.w	80037e0 <_malloc_r>
 8004512:	b92a      	cbnz	r2, 8004520 <_realloc_r+0x24>
 8004514:	f7ff f8f0 	bl	80036f8 <_free_r>
 8004518:	2400      	movs	r4, #0
 800451a:	4620      	mov	r0, r4
 800451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004520:	f000 f841 	bl	80045a6 <_malloc_usable_size_r>
 8004524:	4285      	cmp	r5, r0
 8004526:	4606      	mov	r6, r0
 8004528:	d802      	bhi.n	8004530 <_realloc_r+0x34>
 800452a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800452e:	d8f4      	bhi.n	800451a <_realloc_r+0x1e>
 8004530:	4629      	mov	r1, r5
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff f954 	bl	80037e0 <_malloc_r>
 8004538:	4607      	mov	r7, r0
 800453a:	2800      	cmp	r0, #0
 800453c:	d0ec      	beq.n	8004518 <_realloc_r+0x1c>
 800453e:	42b5      	cmp	r5, r6
 8004540:	462a      	mov	r2, r5
 8004542:	4621      	mov	r1, r4
 8004544:	bf28      	it	cs
 8004546:	4632      	movcs	r2, r6
 8004548:	f7ff ff86 	bl	8004458 <memcpy>
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff f8d2 	bl	80036f8 <_free_r>
 8004554:	463c      	mov	r4, r7
 8004556:	e7e0      	b.n	800451a <_realloc_r+0x1e>

08004558 <__ascii_wctomb>:
 8004558:	4603      	mov	r3, r0
 800455a:	4608      	mov	r0, r1
 800455c:	b141      	cbz	r1, 8004570 <__ascii_wctomb+0x18>
 800455e:	2aff      	cmp	r2, #255	@ 0xff
 8004560:	d904      	bls.n	800456c <__ascii_wctomb+0x14>
 8004562:	228a      	movs	r2, #138	@ 0x8a
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	4770      	bx	lr
 800456c:	700a      	strb	r2, [r1, #0]
 800456e:	2001      	movs	r0, #1
 8004570:	4770      	bx	lr
	...

08004574 <fiprintf>:
 8004574:	b40e      	push	{r1, r2, r3}
 8004576:	b503      	push	{r0, r1, lr}
 8004578:	4601      	mov	r1, r0
 800457a:	ab03      	add	r3, sp, #12
 800457c:	4805      	ldr	r0, [pc, #20]	@ (8004594 <fiprintf+0x20>)
 800457e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004582:	6800      	ldr	r0, [r0, #0]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	f000 f83f 	bl	8004608 <_vfiprintf_r>
 800458a:	b002      	add	sp, #8
 800458c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004590:	b003      	add	sp, #12
 8004592:	4770      	bx	lr
 8004594:	20000010 	.word	0x20000010

08004598 <abort>:
 8004598:	b508      	push	{r3, lr}
 800459a:	2006      	movs	r0, #6
 800459c:	f000 fa08 	bl	80049b0 <raise>
 80045a0:	2001      	movs	r0, #1
 80045a2:	f7fd fb60 	bl	8001c66 <_exit>

080045a6 <_malloc_usable_size_r>:
 80045a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045aa:	1f18      	subs	r0, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfbc      	itt	lt
 80045b0:	580b      	ldrlt	r3, [r1, r0]
 80045b2:	18c0      	addlt	r0, r0, r3
 80045b4:	4770      	bx	lr

080045b6 <__sfputc_r>:
 80045b6:	6893      	ldr	r3, [r2, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	b410      	push	{r4}
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	da08      	bge.n	80045d4 <__sfputc_r+0x1e>
 80045c2:	6994      	ldr	r4, [r2, #24]
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	db01      	blt.n	80045cc <__sfputc_r+0x16>
 80045c8:	290a      	cmp	r1, #10
 80045ca:	d103      	bne.n	80045d4 <__sfputc_r+0x1e>
 80045cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d0:	f000 b932 	b.w	8004838 <__swbuf_r>
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	1c58      	adds	r0, r3, #1
 80045d8:	6010      	str	r0, [r2, #0]
 80045da:	7019      	strb	r1, [r3, #0]
 80045dc:	4608      	mov	r0, r1
 80045de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <__sfputs_r>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	4614      	mov	r4, r2
 80045ec:	18d5      	adds	r5, r2, r3
 80045ee:	42ac      	cmp	r4, r5
 80045f0:	d101      	bne.n	80045f6 <__sfputs_r+0x12>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e007      	b.n	8004606 <__sfputs_r+0x22>
 80045f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fa:	463a      	mov	r2, r7
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffda 	bl	80045b6 <__sfputc_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d1f3      	bne.n	80045ee <__sfputs_r+0xa>
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004608 <_vfiprintf_r>:
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	460d      	mov	r5, r1
 800460e:	b09d      	sub	sp, #116	@ 0x74
 8004610:	4614      	mov	r4, r2
 8004612:	4698      	mov	r8, r3
 8004614:	4606      	mov	r6, r0
 8004616:	b118      	cbz	r0, 8004620 <_vfiprintf_r+0x18>
 8004618:	6a03      	ldr	r3, [r0, #32]
 800461a:	b90b      	cbnz	r3, 8004620 <_vfiprintf_r+0x18>
 800461c:	f7fe f8f0 	bl	8002800 <__sinit>
 8004620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004622:	07d9      	lsls	r1, r3, #31
 8004624:	d405      	bmi.n	8004632 <_vfiprintf_r+0x2a>
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	059a      	lsls	r2, r3, #22
 800462a:	d402      	bmi.n	8004632 <_vfiprintf_r+0x2a>
 800462c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800462e:	f7fe fa12 	bl	8002a56 <__retarget_lock_acquire_recursive>
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	d501      	bpl.n	800463c <_vfiprintf_r+0x34>
 8004638:	692b      	ldr	r3, [r5, #16]
 800463a:	b99b      	cbnz	r3, 8004664 <_vfiprintf_r+0x5c>
 800463c:	4629      	mov	r1, r5
 800463e:	4630      	mov	r0, r6
 8004640:	f000 f938 	bl	80048b4 <__swsetup_r>
 8004644:	b170      	cbz	r0, 8004664 <_vfiprintf_r+0x5c>
 8004646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004648:	07dc      	lsls	r4, r3, #31
 800464a:	d504      	bpl.n	8004656 <_vfiprintf_r+0x4e>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	b01d      	add	sp, #116	@ 0x74
 8004652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	0598      	lsls	r0, r3, #22
 800465a:	d4f7      	bmi.n	800464c <_vfiprintf_r+0x44>
 800465c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800465e:	f7fe f9fb 	bl	8002a58 <__retarget_lock_release_recursive>
 8004662:	e7f3      	b.n	800464c <_vfiprintf_r+0x44>
 8004664:	2300      	movs	r3, #0
 8004666:	9309      	str	r3, [sp, #36]	@ 0x24
 8004668:	2320      	movs	r3, #32
 800466a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800466e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004672:	2330      	movs	r3, #48	@ 0x30
 8004674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004824 <_vfiprintf_r+0x21c>
 8004678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800467c:	f04f 0901 	mov.w	r9, #1
 8004680:	4623      	mov	r3, r4
 8004682:	469a      	mov	sl, r3
 8004684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004688:	b10a      	cbz	r2, 800468e <_vfiprintf_r+0x86>
 800468a:	2a25      	cmp	r2, #37	@ 0x25
 800468c:	d1f9      	bne.n	8004682 <_vfiprintf_r+0x7a>
 800468e:	ebba 0b04 	subs.w	fp, sl, r4
 8004692:	d00b      	beq.n	80046ac <_vfiprintf_r+0xa4>
 8004694:	465b      	mov	r3, fp
 8004696:	4622      	mov	r2, r4
 8004698:	4629      	mov	r1, r5
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffa2 	bl	80045e4 <__sfputs_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	f000 80a7 	beq.w	80047f4 <_vfiprintf_r+0x1ec>
 80046a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046a8:	445a      	add	r2, fp
 80046aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ac:	f89a 3000 	ldrb.w	r3, [sl]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 809f 	beq.w	80047f4 <_vfiprintf_r+0x1ec>
 80046b6:	2300      	movs	r3, #0
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c0:	f10a 0a01 	add.w	sl, sl, #1
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	9307      	str	r3, [sp, #28]
 80046c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80046ce:	4654      	mov	r4, sl
 80046d0:	2205      	movs	r2, #5
 80046d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d6:	4853      	ldr	r0, [pc, #332]	@ (8004824 <_vfiprintf_r+0x21c>)
 80046d8:	f7fb fd82 	bl	80001e0 <memchr>
 80046dc:	9a04      	ldr	r2, [sp, #16]
 80046de:	b9d8      	cbnz	r0, 8004718 <_vfiprintf_r+0x110>
 80046e0:	06d1      	lsls	r1, r2, #27
 80046e2:	bf44      	itt	mi
 80046e4:	2320      	movmi	r3, #32
 80046e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ea:	0713      	lsls	r3, r2, #28
 80046ec:	bf44      	itt	mi
 80046ee:	232b      	movmi	r3, #43	@ 0x2b
 80046f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046f4:	f89a 3000 	ldrb.w	r3, [sl]
 80046f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046fa:	d015      	beq.n	8004728 <_vfiprintf_r+0x120>
 80046fc:	9a07      	ldr	r2, [sp, #28]
 80046fe:	4654      	mov	r4, sl
 8004700:	2000      	movs	r0, #0
 8004702:	f04f 0c0a 	mov.w	ip, #10
 8004706:	4621      	mov	r1, r4
 8004708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470c:	3b30      	subs	r3, #48	@ 0x30
 800470e:	2b09      	cmp	r3, #9
 8004710:	d94b      	bls.n	80047aa <_vfiprintf_r+0x1a2>
 8004712:	b1b0      	cbz	r0, 8004742 <_vfiprintf_r+0x13a>
 8004714:	9207      	str	r2, [sp, #28]
 8004716:	e014      	b.n	8004742 <_vfiprintf_r+0x13a>
 8004718:	eba0 0308 	sub.w	r3, r0, r8
 800471c:	fa09 f303 	lsl.w	r3, r9, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	9304      	str	r3, [sp, #16]
 8004724:	46a2      	mov	sl, r4
 8004726:	e7d2      	b.n	80046ce <_vfiprintf_r+0xc6>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	1d19      	adds	r1, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	9103      	str	r1, [sp, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	bfbb      	ittet	lt
 8004734:	425b      	neglt	r3, r3
 8004736:	f042 0202 	orrlt.w	r2, r2, #2
 800473a:	9307      	strge	r3, [sp, #28]
 800473c:	9307      	strlt	r3, [sp, #28]
 800473e:	bfb8      	it	lt
 8004740:	9204      	strlt	r2, [sp, #16]
 8004742:	7823      	ldrb	r3, [r4, #0]
 8004744:	2b2e      	cmp	r3, #46	@ 0x2e
 8004746:	d10a      	bne.n	800475e <_vfiprintf_r+0x156>
 8004748:	7863      	ldrb	r3, [r4, #1]
 800474a:	2b2a      	cmp	r3, #42	@ 0x2a
 800474c:	d132      	bne.n	80047b4 <_vfiprintf_r+0x1ac>
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	9203      	str	r2, [sp, #12]
 8004756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800475a:	3402      	adds	r4, #2
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004834 <_vfiprintf_r+0x22c>
 8004762:	7821      	ldrb	r1, [r4, #0]
 8004764:	2203      	movs	r2, #3
 8004766:	4650      	mov	r0, sl
 8004768:	f7fb fd3a 	bl	80001e0 <memchr>
 800476c:	b138      	cbz	r0, 800477e <_vfiprintf_r+0x176>
 800476e:	9b04      	ldr	r3, [sp, #16]
 8004770:	eba0 000a 	sub.w	r0, r0, sl
 8004774:	2240      	movs	r2, #64	@ 0x40
 8004776:	4082      	lsls	r2, r0
 8004778:	4313      	orrs	r3, r2
 800477a:	3401      	adds	r4, #1
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004782:	4829      	ldr	r0, [pc, #164]	@ (8004828 <_vfiprintf_r+0x220>)
 8004784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004788:	2206      	movs	r2, #6
 800478a:	f7fb fd29 	bl	80001e0 <memchr>
 800478e:	2800      	cmp	r0, #0
 8004790:	d03f      	beq.n	8004812 <_vfiprintf_r+0x20a>
 8004792:	4b26      	ldr	r3, [pc, #152]	@ (800482c <_vfiprintf_r+0x224>)
 8004794:	bb1b      	cbnz	r3, 80047de <_vfiprintf_r+0x1d6>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	3307      	adds	r3, #7
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	3308      	adds	r3, #8
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a4:	443b      	add	r3, r7
 80047a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a8:	e76a      	b.n	8004680 <_vfiprintf_r+0x78>
 80047aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ae:	460c      	mov	r4, r1
 80047b0:	2001      	movs	r0, #1
 80047b2:	e7a8      	b.n	8004706 <_vfiprintf_r+0xfe>
 80047b4:	2300      	movs	r3, #0
 80047b6:	3401      	adds	r4, #1
 80047b8:	9305      	str	r3, [sp, #20]
 80047ba:	4619      	mov	r1, r3
 80047bc:	f04f 0c0a 	mov.w	ip, #10
 80047c0:	4620      	mov	r0, r4
 80047c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c6:	3a30      	subs	r2, #48	@ 0x30
 80047c8:	2a09      	cmp	r2, #9
 80047ca:	d903      	bls.n	80047d4 <_vfiprintf_r+0x1cc>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0c6      	beq.n	800475e <_vfiprintf_r+0x156>
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	e7c4      	b.n	800475e <_vfiprintf_r+0x156>
 80047d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d8:	4604      	mov	r4, r0
 80047da:	2301      	movs	r3, #1
 80047dc:	e7f0      	b.n	80047c0 <_vfiprintf_r+0x1b8>
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <_vfiprintf_r+0x228>)
 80047e6:	a904      	add	r1, sp, #16
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7fd fbc5 	bl	8001f78 <_printf_float>
 80047ee:	4607      	mov	r7, r0
 80047f0:	1c78      	adds	r0, r7, #1
 80047f2:	d1d6      	bne.n	80047a2 <_vfiprintf_r+0x19a>
 80047f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047f6:	07d9      	lsls	r1, r3, #31
 80047f8:	d405      	bmi.n	8004806 <_vfiprintf_r+0x1fe>
 80047fa:	89ab      	ldrh	r3, [r5, #12]
 80047fc:	059a      	lsls	r2, r3, #22
 80047fe:	d402      	bmi.n	8004806 <_vfiprintf_r+0x1fe>
 8004800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004802:	f7fe f929 	bl	8002a58 <__retarget_lock_release_recursive>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	065b      	lsls	r3, r3, #25
 800480a:	f53f af1f 	bmi.w	800464c <_vfiprintf_r+0x44>
 800480e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004810:	e71e      	b.n	8004650 <_vfiprintf_r+0x48>
 8004812:	ab03      	add	r3, sp, #12
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	462a      	mov	r2, r5
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <_vfiprintf_r+0x228>)
 800481a:	a904      	add	r1, sp, #16
 800481c:	4630      	mov	r0, r6
 800481e:	f7fd fe43 	bl	80024a8 <_printf_i>
 8004822:	e7e4      	b.n	80047ee <_vfiprintf_r+0x1e6>
 8004824:	08004f78 	.word	0x08004f78
 8004828:	08004f82 	.word	0x08004f82
 800482c:	08001f79 	.word	0x08001f79
 8004830:	080045e5 	.word	0x080045e5
 8004834:	08004f7e 	.word	0x08004f7e

08004838 <__swbuf_r>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	460e      	mov	r6, r1
 800483c:	4614      	mov	r4, r2
 800483e:	4605      	mov	r5, r0
 8004840:	b118      	cbz	r0, 800484a <__swbuf_r+0x12>
 8004842:	6a03      	ldr	r3, [r0, #32]
 8004844:	b90b      	cbnz	r3, 800484a <__swbuf_r+0x12>
 8004846:	f7fd ffdb 	bl	8002800 <__sinit>
 800484a:	69a3      	ldr	r3, [r4, #24]
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	071a      	lsls	r2, r3, #28
 8004852:	d501      	bpl.n	8004858 <__swbuf_r+0x20>
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b943      	cbnz	r3, 800486a <__swbuf_r+0x32>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f82a 	bl	80048b4 <__swsetup_r>
 8004860:	b118      	cbz	r0, 800486a <__swbuf_r+0x32>
 8004862:	f04f 37ff 	mov.w	r7, #4294967295
 8004866:	4638      	mov	r0, r7
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	1a98      	subs	r0, r3, r2
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	b2f6      	uxtb	r6, r6
 8004874:	4283      	cmp	r3, r0
 8004876:	4637      	mov	r7, r6
 8004878:	dc05      	bgt.n	8004886 <__swbuf_r+0x4e>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f7ff fd99 	bl	80043b4 <_fflush_r>
 8004882:	2800      	cmp	r0, #0
 8004884:	d1ed      	bne.n	8004862 <__swbuf_r+0x2a>
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	3b01      	subs	r3, #1
 800488a:	60a3      	str	r3, [r4, #8]
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	6022      	str	r2, [r4, #0]
 8004892:	701e      	strb	r6, [r3, #0]
 8004894:	6962      	ldr	r2, [r4, #20]
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	429a      	cmp	r2, r3
 800489a:	d004      	beq.n	80048a6 <__swbuf_r+0x6e>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	07db      	lsls	r3, r3, #31
 80048a0:	d5e1      	bpl.n	8004866 <__swbuf_r+0x2e>
 80048a2:	2e0a      	cmp	r6, #10
 80048a4:	d1df      	bne.n	8004866 <__swbuf_r+0x2e>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7ff fd83 	bl	80043b4 <_fflush_r>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d0d9      	beq.n	8004866 <__swbuf_r+0x2e>
 80048b2:	e7d6      	b.n	8004862 <__swbuf_r+0x2a>

080048b4 <__swsetup_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4b29      	ldr	r3, [pc, #164]	@ (800495c <__swsetup_r+0xa8>)
 80048b8:	4605      	mov	r5, r0
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	460c      	mov	r4, r1
 80048be:	b118      	cbz	r0, 80048c8 <__swsetup_r+0x14>
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b90b      	cbnz	r3, 80048c8 <__swsetup_r+0x14>
 80048c4:	f7fd ff9c 	bl	8002800 <__sinit>
 80048c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048cc:	0719      	lsls	r1, r3, #28
 80048ce:	d422      	bmi.n	8004916 <__swsetup_r+0x62>
 80048d0:	06da      	lsls	r2, r3, #27
 80048d2:	d407      	bmi.n	80048e4 <__swsetup_r+0x30>
 80048d4:	2209      	movs	r2, #9
 80048d6:	602a      	str	r2, [r5, #0]
 80048d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e033      	b.n	800494c <__swsetup_r+0x98>
 80048e4:	0758      	lsls	r0, r3, #29
 80048e6:	d512      	bpl.n	800490e <__swsetup_r+0x5a>
 80048e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ea:	b141      	cbz	r1, 80048fe <__swsetup_r+0x4a>
 80048ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048f0:	4299      	cmp	r1, r3
 80048f2:	d002      	beq.n	80048fa <__swsetup_r+0x46>
 80048f4:	4628      	mov	r0, r5
 80048f6:	f7fe feff 	bl	80036f8 <_free_r>
 80048fa:	2300      	movs	r3, #0
 80048fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	2300      	movs	r3, #0
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	b94b      	cbnz	r3, 800492e <__swsetup_r+0x7a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004924:	d003      	beq.n	800492e <__swsetup_r+0x7a>
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f883 	bl	8004a34 <__smakebuf_r>
 800492e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004932:	f013 0201 	ands.w	r2, r3, #1
 8004936:	d00a      	beq.n	800494e <__swsetup_r+0x9a>
 8004938:	2200      	movs	r2, #0
 800493a:	60a2      	str	r2, [r4, #8]
 800493c:	6962      	ldr	r2, [r4, #20]
 800493e:	4252      	negs	r2, r2
 8004940:	61a2      	str	r2, [r4, #24]
 8004942:	6922      	ldr	r2, [r4, #16]
 8004944:	b942      	cbnz	r2, 8004958 <__swsetup_r+0xa4>
 8004946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800494a:	d1c5      	bne.n	80048d8 <__swsetup_r+0x24>
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	0799      	lsls	r1, r3, #30
 8004950:	bf58      	it	pl
 8004952:	6962      	ldrpl	r2, [r4, #20]
 8004954:	60a2      	str	r2, [r4, #8]
 8004956:	e7f4      	b.n	8004942 <__swsetup_r+0x8e>
 8004958:	2000      	movs	r0, #0
 800495a:	e7f7      	b.n	800494c <__swsetup_r+0x98>
 800495c:	20000010 	.word	0x20000010

08004960 <_raise_r>:
 8004960:	291f      	cmp	r1, #31
 8004962:	b538      	push	{r3, r4, r5, lr}
 8004964:	4605      	mov	r5, r0
 8004966:	460c      	mov	r4, r1
 8004968:	d904      	bls.n	8004974 <_raise_r+0x14>
 800496a:	2316      	movs	r3, #22
 800496c:	6003      	str	r3, [r0, #0]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004976:	b112      	cbz	r2, 800497e <_raise_r+0x1e>
 8004978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800497c:	b94b      	cbnz	r3, 8004992 <_raise_r+0x32>
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f830 	bl	80049e4 <_getpid_r>
 8004984:	4622      	mov	r2, r4
 8004986:	4601      	mov	r1, r0
 8004988:	4628      	mov	r0, r5
 800498a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498e:	f000 b817 	b.w	80049c0 <_kill_r>
 8004992:	2b01      	cmp	r3, #1
 8004994:	d00a      	beq.n	80049ac <_raise_r+0x4c>
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	d103      	bne.n	80049a2 <_raise_r+0x42>
 800499a:	2316      	movs	r3, #22
 800499c:	6003      	str	r3, [r0, #0]
 800499e:	2001      	movs	r0, #1
 80049a0:	e7e7      	b.n	8004972 <_raise_r+0x12>
 80049a2:	2100      	movs	r1, #0
 80049a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80049a8:	4620      	mov	r0, r4
 80049aa:	4798      	blx	r3
 80049ac:	2000      	movs	r0, #0
 80049ae:	e7e0      	b.n	8004972 <_raise_r+0x12>

080049b0 <raise>:
 80049b0:	4b02      	ldr	r3, [pc, #8]	@ (80049bc <raise+0xc>)
 80049b2:	4601      	mov	r1, r0
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	f7ff bfd3 	b.w	8004960 <_raise_r>
 80049ba:	bf00      	nop
 80049bc:	20000010 	.word	0x20000010

080049c0 <_kill_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	@ (80049e0 <_kill_r+0x20>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	602b      	str	r3, [r5, #0]
 80049ce:	f7fd f93a 	bl	8001c46 <_kill>
 80049d2:	1c43      	adds	r3, r0, #1
 80049d4:	d102      	bne.n	80049dc <_kill_r+0x1c>
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	b103      	cbz	r3, 80049dc <_kill_r+0x1c>
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	20000334 	.word	0x20000334

080049e4 <_getpid_r>:
 80049e4:	f7fd b927 	b.w	8001c36 <_getpid>

080049e8 <__swhatbuf_r>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	460c      	mov	r4, r1
 80049ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f0:	2900      	cmp	r1, #0
 80049f2:	b096      	sub	sp, #88	@ 0x58
 80049f4:	4615      	mov	r5, r2
 80049f6:	461e      	mov	r6, r3
 80049f8:	da0d      	bge.n	8004a16 <__swhatbuf_r+0x2e>
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2340      	movne	r3, #64	@ 0x40
 8004a08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	6031      	str	r1, [r6, #0]
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	b016      	add	sp, #88	@ 0x58
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
 8004a16:	466a      	mov	r2, sp
 8004a18:	f000 f848 	bl	8004aac <_fstat_r>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	dbec      	blt.n	80049fa <__swhatbuf_r+0x12>
 8004a20:	9901      	ldr	r1, [sp, #4]
 8004a22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a2a:	4259      	negs	r1, r3
 8004a2c:	4159      	adcs	r1, r3
 8004a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a32:	e7eb      	b.n	8004a0c <__swhatbuf_r+0x24>

08004a34 <__smakebuf_r>:
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a38:	079d      	lsls	r5, r3, #30
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	d507      	bpl.n	8004a50 <__smakebuf_r+0x1c>
 8004a40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	6163      	str	r3, [r4, #20]
 8004a4c:	b003      	add	sp, #12
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a50:	ab01      	add	r3, sp, #4
 8004a52:	466a      	mov	r2, sp
 8004a54:	f7ff ffc8 	bl	80049e8 <__swhatbuf_r>
 8004a58:	9f00      	ldr	r7, [sp, #0]
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7fe febe 	bl	80037e0 <_malloc_r>
 8004a64:	b948      	cbnz	r0, 8004a7a <__smakebuf_r+0x46>
 8004a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6a:	059a      	lsls	r2, r3, #22
 8004a6c:	d4ee      	bmi.n	8004a4c <__smakebuf_r+0x18>
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	e7e2      	b.n	8004a40 <__smakebuf_r+0xc>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	6020      	str	r0, [r4, #0]
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a8a:	b15b      	cbz	r3, 8004aa4 <__smakebuf_r+0x70>
 8004a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f81d 	bl	8004ad0 <_isatty_r>
 8004a96:	b128      	cbz	r0, 8004aa4 <__smakebuf_r+0x70>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	431d      	orrs	r5, r3
 8004aa8:	81a5      	strh	r5, [r4, #12]
 8004aaa:	e7cf      	b.n	8004a4c <__smakebuf_r+0x18>

08004aac <_fstat_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	@ (8004acc <_fstat_r+0x20>)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	f7fd f924 	bl	8001d06 <_fstat>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	d102      	bne.n	8004ac8 <_fstat_r+0x1c>
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	b103      	cbz	r3, 8004ac8 <_fstat_r+0x1c>
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	bf00      	nop
 8004acc:	20000334 	.word	0x20000334

08004ad0 <_isatty_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d06      	ldr	r5, [pc, #24]	@ (8004aec <_isatty_r+0x1c>)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fd f923 	bl	8001d26 <_isatty>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_isatty_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_isatty_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20000334 	.word	0x20000334

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
